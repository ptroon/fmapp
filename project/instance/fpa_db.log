2020-06-09 00:04:27,112 INFO sqlalchemy.engine.base.Engine Thread-235 : BEGIN (implicit)
2020-06-09 00:04:27,114 INFO sqlalchemy.engine.base.Engine Thread-235 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:04:27,114 INFO sqlalchemy.engine.base.Engine Thread-235 : (1, 1)
2020-06-09 00:04:27,116 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:04:27,117 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:04:27,122 INFO sqlalchemy.engine.base.Engine Thread-235 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:04:27,122 INFO sqlalchemy.engine.base.Engine Thread-235 : ()
2020-06-09 00:04:27,125 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:04:27,126 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,126 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,126 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:04:27,126 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,127 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,127 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,127 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,127 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,127 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,127 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:04:27,128 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:04:27,128 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:04:27,128 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,128 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:04:27,131 INFO sqlalchemy.engine.base.Engine Thread-235 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:04:27,131 INFO sqlalchemy.engine.base.Engine Thread-235 : ('philip',)
2020-06-09 00:04:27,132 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:04:27,132 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:04:27,133 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:04:27,133 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:04:27,133 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:04:27,133 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:04:27,133 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:04:27,133 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:04:27,165 INFO sqlalchemy.engine.base.Engine Thread-235 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:04:27,166 INFO sqlalchemy.engine.base.Engine Thread-235 : ('philip', 1, 1)
2020-06-09 00:04:27,166 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:04:27,167 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:04:27,170 INFO sqlalchemy.engine.base.Engine Thread-235 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:04:27,170 INFO sqlalchemy.engine.base.Engine Thread-235 : ('philip', 1, 1)
2020-06-09 00:04:27,171 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:04:27,171 DEBUG sqlalchemy.engine.base.Engine Thread-235 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:04:27,177 INFO sqlalchemy.engine.base.Engine Thread-235 : ROLLBACK
2020-06-09 00:04:27,525 INFO sqlalchemy.engine.base.Engine Thread-246 : BEGIN (implicit)
2020-06-09 00:04:27,526 INFO sqlalchemy.engine.base.Engine Thread-246 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:04:27,527 INFO sqlalchemy.engine.base.Engine Thread-246 : (1, 1)
2020-06-09 00:04:27,527 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:04:27,528 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:04:27,530 INFO sqlalchemy.engine.base.Engine Thread-246 : ROLLBACK
2020-06-09 00:04:27,603 INFO sqlalchemy.engine.base.Engine Thread-247 : BEGIN (implicit)
2020-06-09 00:04:27,605 INFO sqlalchemy.engine.base.Engine Thread-248 : BEGIN (implicit)
2020-06-09 00:04:27,607 INFO sqlalchemy.engine.base.Engine Thread-247 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:04:27,609 INFO sqlalchemy.engine.base.Engine Thread-249 : BEGIN (implicit)
2020-06-09 00:04:27,611 INFO sqlalchemy.engine.base.Engine Thread-248 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:04:27,614 INFO sqlalchemy.engine.base.Engine Thread-250 : BEGIN (implicit)
2020-06-09 00:04:27,614 INFO sqlalchemy.engine.base.Engine Thread-247 : (1, 1)
2020-06-09 00:04:27,615 INFO sqlalchemy.engine.base.Engine Thread-249 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:04:27,617 INFO sqlalchemy.engine.base.Engine Thread-249 : (1, 1)
2020-06-09 00:04:27,616 INFO sqlalchemy.engine.base.Engine Thread-250 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:04:27,618 INFO sqlalchemy.engine.base.Engine Thread-250 : (1, 1)
2020-06-09 00:04:27,617 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:04:27,618 DEBUG sqlalchemy.engine.base.Engine Thread-249 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:04:27,619 DEBUG sqlalchemy.engine.base.Engine Thread-249 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:04:27,619 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:04:27,615 INFO sqlalchemy.engine.base.Engine Thread-248 : (1, 1)
2020-06-09 00:04:27,622 INFO sqlalchemy.engine.base.Engine Thread-249 : ROLLBACK
2020-06-09 00:04:27,624 INFO sqlalchemy.engine.base.Engine Thread-247 : ROLLBACK
2020-06-09 00:04:27,624 DEBUG sqlalchemy.engine.base.Engine Thread-250 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:04:27,626 DEBUG sqlalchemy.engine.base.Engine Thread-250 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:04:27,624 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:04:27,629 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:04:27,628 INFO sqlalchemy.engine.base.Engine Thread-250 : ROLLBACK
2020-06-09 00:04:27,632 INFO sqlalchemy.engine.base.Engine Thread-248 : ROLLBACK
2020-06-09 00:05:10,138 INFO sqlalchemy.engine.base.Engine Thread-252 : BEGIN (implicit)
2020-06-09 00:05:10,139 INFO sqlalchemy.engine.base.Engine Thread-252 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:10,139 INFO sqlalchemy.engine.base.Engine Thread-252 : (1, 1)
2020-06-09 00:05:10,140 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:10,140 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:10,145 INFO sqlalchemy.engine.base.Engine Thread-252 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:05:10,145 INFO sqlalchemy.engine.base.Engine Thread-252 : ()
2020-06-09 00:05:10,148 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:05:10,149 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,149 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,149 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:05:10,149 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,149 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,150 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,150 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,150 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,150 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,150 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:05:10,150 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:05:10,151 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:05:10,151 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,151 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:10,155 INFO sqlalchemy.engine.base.Engine Thread-252 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:05:10,155 INFO sqlalchemy.engine.base.Engine Thread-252 : ('philip',)
2020-06-09 00:05:10,156 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:05:10,156 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:05:10,156 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:05:10,156 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:05:10,156 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:05:10,157 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:05:10,157 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:05:10,157 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:05:10,185 INFO sqlalchemy.engine.base.Engine Thread-252 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:05:10,185 INFO sqlalchemy.engine.base.Engine Thread-252 : ('philip', 1, 1)
2020-06-09 00:05:10,186 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:10,186 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:10,189 INFO sqlalchemy.engine.base.Engine Thread-252 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:05:10,190 INFO sqlalchemy.engine.base.Engine Thread-252 : ('philip', 1, 1)
2020-06-09 00:05:10,190 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:10,190 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:10,195 INFO sqlalchemy.engine.base.Engine Thread-252 : ROLLBACK
2020-06-09 00:05:10,431 INFO sqlalchemy.engine.base.Engine Thread-263 : BEGIN (implicit)
2020-06-09 00:05:10,432 INFO sqlalchemy.engine.base.Engine Thread-263 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:10,432 INFO sqlalchemy.engine.base.Engine Thread-263 : (1, 1)
2020-06-09 00:05:10,433 DEBUG sqlalchemy.engine.base.Engine Thread-263 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:10,433 DEBUG sqlalchemy.engine.base.Engine Thread-263 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:10,435 INFO sqlalchemy.engine.base.Engine Thread-263 : ROLLBACK
2020-06-09 00:05:10,517 INFO sqlalchemy.engine.base.Engine Thread-264 : BEGIN (implicit)
2020-06-09 00:05:10,522 INFO sqlalchemy.engine.base.Engine Thread-267 : BEGIN (implicit)
2020-06-09 00:05:10,523 INFO sqlalchemy.engine.base.Engine Thread-264 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:10,527 INFO sqlalchemy.engine.base.Engine Thread-264 : (1, 1)
2020-06-09 00:05:10,527 INFO sqlalchemy.engine.base.Engine Thread-267 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:10,531 INFO sqlalchemy.engine.base.Engine Thread-267 : (1, 1)
2020-06-09 00:05:10,526 INFO sqlalchemy.engine.base.Engine Thread-265 : BEGIN (implicit)
2020-06-09 00:05:10,531 DEBUG sqlalchemy.engine.base.Engine Thread-264 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:10,532 DEBUG sqlalchemy.engine.base.Engine Thread-264 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:10,532 INFO sqlalchemy.engine.base.Engine Thread-265 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:10,534 INFO sqlalchemy.engine.base.Engine Thread-265 : (1, 1)
2020-06-09 00:05:10,530 INFO sqlalchemy.engine.base.Engine Thread-266 : BEGIN (implicit)
2020-06-09 00:05:10,533 DEBUG sqlalchemy.engine.base.Engine Thread-267 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:10,535 INFO sqlalchemy.engine.base.Engine Thread-266 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:10,535 DEBUG sqlalchemy.engine.base.Engine Thread-265 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:10,537 DEBUG sqlalchemy.engine.base.Engine Thread-265 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:10,536 DEBUG sqlalchemy.engine.base.Engine Thread-267 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:10,537 INFO sqlalchemy.engine.base.Engine Thread-266 : (1, 1)
2020-06-09 00:05:10,536 INFO sqlalchemy.engine.base.Engine Thread-264 : ROLLBACK
2020-06-09 00:05:10,539 INFO sqlalchemy.engine.base.Engine Thread-265 : ROLLBACK
2020-06-09 00:05:10,541 INFO sqlalchemy.engine.base.Engine Thread-267 : ROLLBACK
2020-06-09 00:05:10,543 DEBUG sqlalchemy.engine.base.Engine Thread-266 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:10,544 DEBUG sqlalchemy.engine.base.Engine Thread-266 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:10,546 INFO sqlalchemy.engine.base.Engine Thread-266 : ROLLBACK
2020-06-09 00:05:32,418 INFO sqlalchemy.engine.base.Engine Thread-269 : BEGIN (implicit)
2020-06-09 00:05:32,419 INFO sqlalchemy.engine.base.Engine Thread-269 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:32,419 INFO sqlalchemy.engine.base.Engine Thread-269 : (1, 1)
2020-06-09 00:05:32,420 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:32,420 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:32,425 INFO sqlalchemy.engine.base.Engine Thread-269 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:05:32,425 INFO sqlalchemy.engine.base.Engine Thread-269 : ()
2020-06-09 00:05:32,427 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:05:32,427 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,428 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,428 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:05:32,428 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,428 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,428 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,428 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,428 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,429 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,429 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:05:32,429 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:05:32,429 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:05:32,429 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,429 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:05:32,432 INFO sqlalchemy.engine.base.Engine Thread-269 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:05:32,433 INFO sqlalchemy.engine.base.Engine Thread-269 : ('philip',)
2020-06-09 00:05:32,433 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:05:32,434 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:05:32,434 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:05:32,434 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:05:32,434 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:05:32,434 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:05:32,434 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:05:32,434 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:05:32,458 INFO sqlalchemy.engine.base.Engine Thread-269 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:05:32,459 INFO sqlalchemy.engine.base.Engine Thread-269 : ('philip', 1, 1)
2020-06-09 00:05:32,459 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:32,460 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:32,462 INFO sqlalchemy.engine.base.Engine Thread-269 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:05:32,463 INFO sqlalchemy.engine.base.Engine Thread-269 : ('philip', 1, 1)
2020-06-09 00:05:32,463 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:32,464 DEBUG sqlalchemy.engine.base.Engine Thread-269 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:32,468 INFO sqlalchemy.engine.base.Engine Thread-269 : ROLLBACK
2020-06-09 00:05:32,698 INFO sqlalchemy.engine.base.Engine Thread-280 : BEGIN (implicit)
2020-06-09 00:05:32,699 INFO sqlalchemy.engine.base.Engine Thread-280 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:32,699 INFO sqlalchemy.engine.base.Engine Thread-280 : (1, 1)
2020-06-09 00:05:32,700 DEBUG sqlalchemy.engine.base.Engine Thread-280 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:32,700 DEBUG sqlalchemy.engine.base.Engine Thread-280 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:32,702 INFO sqlalchemy.engine.base.Engine Thread-280 : ROLLBACK
2020-06-09 00:05:32,778 INFO sqlalchemy.engine.base.Engine Thread-283 : BEGIN (implicit)
2020-06-09 00:05:32,779 INFO sqlalchemy.engine.base.Engine Thread-283 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:32,779 INFO sqlalchemy.engine.base.Engine Thread-283 : (1, 1)
2020-06-09 00:05:32,781 INFO sqlalchemy.engine.base.Engine Thread-281 : BEGIN (implicit)
2020-06-09 00:05:32,782 DEBUG sqlalchemy.engine.base.Engine Thread-283 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:32,786 DEBUG sqlalchemy.engine.base.Engine Thread-283 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:32,784 INFO sqlalchemy.engine.base.Engine Thread-281 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:32,787 INFO sqlalchemy.engine.base.Engine Thread-281 : (1, 1)
2020-06-09 00:05:32,787 INFO sqlalchemy.engine.base.Engine Thread-284 : BEGIN (implicit)
2020-06-09 00:05:32,789 INFO sqlalchemy.engine.base.Engine Thread-283 : ROLLBACK
2020-06-09 00:05:32,790 INFO sqlalchemy.engine.base.Engine Thread-284 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:32,792 INFO sqlalchemy.engine.base.Engine Thread-284 : (1, 1)
2020-06-09 00:05:32,792 INFO sqlalchemy.engine.base.Engine Thread-282 : BEGIN (implicit)
2020-06-09 00:05:32,792 DEBUG sqlalchemy.engine.base.Engine Thread-281 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:32,793 INFO sqlalchemy.engine.base.Engine Thread-282 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:05:32,795 INFO sqlalchemy.engine.base.Engine Thread-282 : (1, 1)
2020-06-09 00:05:32,794 DEBUG sqlalchemy.engine.base.Engine Thread-281 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:32,794 DEBUG sqlalchemy.engine.base.Engine Thread-284 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:32,797 INFO sqlalchemy.engine.base.Engine Thread-281 : ROLLBACK
2020-06-09 00:05:32,797 DEBUG sqlalchemy.engine.base.Engine Thread-282 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:05:32,798 DEBUG sqlalchemy.engine.base.Engine Thread-282 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:32,798 DEBUG sqlalchemy.engine.base.Engine Thread-284 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:05:32,800 INFO sqlalchemy.engine.base.Engine Thread-282 : ROLLBACK
2020-06-09 00:05:32,802 INFO sqlalchemy.engine.base.Engine Thread-284 : ROLLBACK
2020-06-09 00:06:22,216 INFO sqlalchemy.engine.base.Engine Thread-286 : BEGIN (implicit)
2020-06-09 00:06:22,218 INFO sqlalchemy.engine.base.Engine Thread-286 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:06:22,218 INFO sqlalchemy.engine.base.Engine Thread-286 : (1, 1)
2020-06-09 00:06:22,219 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:06:22,219 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:06:22,224 INFO sqlalchemy.engine.base.Engine Thread-286 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:06:22,224 INFO sqlalchemy.engine.base.Engine Thread-286 : ()
2020-06-09 00:06:22,226 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:06:22,227 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,227 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,227 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:06:22,227 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,227 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,228 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,228 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,228 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,228 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,228 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:06:22,228 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:06:22,228 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:06:22,229 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,229 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:06:22,232 INFO sqlalchemy.engine.base.Engine Thread-286 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:06:22,232 INFO sqlalchemy.engine.base.Engine Thread-286 : ('philip',)
2020-06-09 00:06:22,233 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:06:22,233 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:06:22,234 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:06:22,234 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:06:22,234 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:06:22,234 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:06:22,234 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:06:22,234 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:06:22,264 INFO sqlalchemy.engine.base.Engine Thread-286 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:06:22,265 INFO sqlalchemy.engine.base.Engine Thread-286 : ('philip', 1, 1)
2020-06-09 00:06:22,265 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:06:22,266 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:06:22,269 INFO sqlalchemy.engine.base.Engine Thread-286 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:06:22,269 INFO sqlalchemy.engine.base.Engine Thread-286 : ('philip', 1, 1)
2020-06-09 00:06:22,269 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:06:22,270 DEBUG sqlalchemy.engine.base.Engine Thread-286 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:06:22,275 INFO sqlalchemy.engine.base.Engine Thread-286 : ROLLBACK
2020-06-09 00:06:22,532 INFO sqlalchemy.engine.base.Engine Thread-297 : BEGIN (implicit)
2020-06-09 00:06:22,533 INFO sqlalchemy.engine.base.Engine Thread-297 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:06:22,533 INFO sqlalchemy.engine.base.Engine Thread-297 : (1, 1)
2020-06-09 00:06:22,534 DEBUG sqlalchemy.engine.base.Engine Thread-297 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:06:22,534 DEBUG sqlalchemy.engine.base.Engine Thread-297 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:06:22,536 INFO sqlalchemy.engine.base.Engine Thread-297 : ROLLBACK
2020-06-09 00:06:22,625 INFO sqlalchemy.engine.base.Engine Thread-298 : BEGIN (implicit)
2020-06-09 00:06:22,626 INFO sqlalchemy.engine.base.Engine Thread-298 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:06:22,626 INFO sqlalchemy.engine.base.Engine Thread-298 : (1, 1)
2020-06-09 00:06:22,627 DEBUG sqlalchemy.engine.base.Engine Thread-298 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:06:22,627 DEBUG sqlalchemy.engine.base.Engine Thread-298 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:06:22,631 INFO sqlalchemy.engine.base.Engine Thread-299 : BEGIN (implicit)
2020-06-09 00:06:22,632 INFO sqlalchemy.engine.base.Engine Thread-299 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:06:22,632 INFO sqlalchemy.engine.base.Engine Thread-299 : (1, 1)
2020-06-09 00:06:22,633 INFO sqlalchemy.engine.base.Engine Thread-298 : ROLLBACK
2020-06-09 00:06:22,634 DEBUG sqlalchemy.engine.base.Engine Thread-299 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:06:22,634 DEBUG sqlalchemy.engine.base.Engine Thread-299 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:06:22,637 INFO sqlalchemy.engine.base.Engine Thread-299 : ROLLBACK
2020-06-09 00:06:22,641 INFO sqlalchemy.engine.base.Engine Thread-300 : BEGIN (implicit)
2020-06-09 00:06:22,644 INFO sqlalchemy.engine.base.Engine Thread-301 : BEGIN (implicit)
2020-06-09 00:06:22,645 INFO sqlalchemy.engine.base.Engine Thread-300 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:06:22,647 INFO sqlalchemy.engine.base.Engine Thread-301 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:06:22,647 INFO sqlalchemy.engine.base.Engine Thread-300 : (1, 1)
2020-06-09 00:06:22,647 INFO sqlalchemy.engine.base.Engine Thread-301 : (1, 1)
2020-06-09 00:06:22,648 DEBUG sqlalchemy.engine.base.Engine Thread-300 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:06:22,648 DEBUG sqlalchemy.engine.base.Engine Thread-301 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:06:22,649 DEBUG sqlalchemy.engine.base.Engine Thread-300 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:06:22,649 DEBUG sqlalchemy.engine.base.Engine Thread-301 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:06:22,651 INFO sqlalchemy.engine.base.Engine Thread-300 : ROLLBACK
2020-06-09 00:06:22,653 INFO sqlalchemy.engine.base.Engine Thread-301 : ROLLBACK
2020-06-09 00:07:14,619 INFO sqlalchemy.engine.base.Engine Thread-303 : BEGIN (implicit)
2020-06-09 00:07:14,621 INFO sqlalchemy.engine.base.Engine Thread-303 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:07:14,621 INFO sqlalchemy.engine.base.Engine Thread-303 : (1, 1)
2020-06-09 00:07:14,622 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:07:14,622 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:07:14,627 INFO sqlalchemy.engine.base.Engine Thread-303 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:07:14,627 INFO sqlalchemy.engine.base.Engine Thread-303 : ()
2020-06-09 00:07:14,629 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:07:14,629 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,629 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,629 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:07:14,629 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,630 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,630 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,630 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,630 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,630 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,630 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:07:14,630 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:07:14,631 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:07:14,631 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,631 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:07:14,634 INFO sqlalchemy.engine.base.Engine Thread-303 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:07:14,634 INFO sqlalchemy.engine.base.Engine Thread-303 : ('philip',)
2020-06-09 00:07:14,635 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:07:14,636 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:07:14,636 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:07:14,636 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:07:14,636 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:07:14,636 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:07:14,636 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:07:14,637 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:07:14,666 INFO sqlalchemy.engine.base.Engine Thread-303 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:07:14,666 INFO sqlalchemy.engine.base.Engine Thread-303 : ('philip', 1, 1)
2020-06-09 00:07:14,667 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:07:14,667 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:07:14,670 INFO sqlalchemy.engine.base.Engine Thread-303 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:07:14,670 INFO sqlalchemy.engine.base.Engine Thread-303 : ('philip', 1, 1)
2020-06-09 00:07:14,671 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:07:14,671 DEBUG sqlalchemy.engine.base.Engine Thread-303 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:07:14,676 INFO sqlalchemy.engine.base.Engine Thread-303 : ROLLBACK
2020-06-09 00:07:14,919 INFO sqlalchemy.engine.base.Engine Thread-314 : BEGIN (implicit)
2020-06-09 00:07:14,920 INFO sqlalchemy.engine.base.Engine Thread-314 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:07:14,920 INFO sqlalchemy.engine.base.Engine Thread-314 : (1, 1)
2020-06-09 00:07:14,921 DEBUG sqlalchemy.engine.base.Engine Thread-314 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:07:14,921 DEBUG sqlalchemy.engine.base.Engine Thread-314 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:07:14,924 INFO sqlalchemy.engine.base.Engine Thread-314 : ROLLBACK
2020-06-09 00:07:14,996 INFO sqlalchemy.engine.base.Engine Thread-315 : BEGIN (implicit)
2020-06-09 00:07:15,000 INFO sqlalchemy.engine.base.Engine Thread-315 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:07:15,000 INFO sqlalchemy.engine.base.Engine Thread-315 : (1, 1)
2020-06-09 00:07:15,000 DEBUG sqlalchemy.engine.base.Engine Thread-315 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:07:15,001 DEBUG sqlalchemy.engine.base.Engine Thread-315 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:07:14,999 INFO sqlalchemy.engine.base.Engine Thread-316 : BEGIN (implicit)
2020-06-09 00:07:15,004 INFO sqlalchemy.engine.base.Engine Thread-315 : ROLLBACK
2020-06-09 00:07:15,006 INFO sqlalchemy.engine.base.Engine Thread-317 : BEGIN (implicit)
2020-06-09 00:07:15,008 INFO sqlalchemy.engine.base.Engine Thread-316 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:07:15,009 INFO sqlalchemy.engine.base.Engine Thread-317 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:07:15,009 INFO sqlalchemy.engine.base.Engine Thread-316 : (1, 1)
2020-06-09 00:07:15,010 INFO sqlalchemy.engine.base.Engine Thread-317 : (1, 1)
2020-06-09 00:07:15,012 DEBUG sqlalchemy.engine.base.Engine Thread-316 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:07:15,013 INFO sqlalchemy.engine.base.Engine Thread-318 : BEGIN (implicit)
2020-06-09 00:07:15,014 DEBUG sqlalchemy.engine.base.Engine Thread-316 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:07:15,014 DEBUG sqlalchemy.engine.base.Engine Thread-317 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:07:15,016 DEBUG sqlalchemy.engine.base.Engine Thread-317 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:07:15,018 INFO sqlalchemy.engine.base.Engine Thread-316 : ROLLBACK
2020-06-09 00:07:15,022 INFO sqlalchemy.engine.base.Engine Thread-317 : ROLLBACK
2020-06-09 00:07:15,015 INFO sqlalchemy.engine.base.Engine Thread-318 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:07:15,024 INFO sqlalchemy.engine.base.Engine Thread-318 : (1, 1)
2020-06-09 00:07:15,024 DEBUG sqlalchemy.engine.base.Engine Thread-318 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:07:15,025 DEBUG sqlalchemy.engine.base.Engine Thread-318 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:07:15,027 INFO sqlalchemy.engine.base.Engine Thread-318 : ROLLBACK
2020-06-09 00:10:33,221 INFO sqlalchemy.engine.base.Engine Thread-320 : BEGIN (implicit)
2020-06-09 00:10:33,223 INFO sqlalchemy.engine.base.Engine Thread-320 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:10:33,223 INFO sqlalchemy.engine.base.Engine Thread-320 : (1, 1)
2020-06-09 00:10:33,224 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:10:33,224 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:10:33,228 INFO sqlalchemy.engine.base.Engine Thread-320 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:10:33,228 INFO sqlalchemy.engine.base.Engine Thread-320 : ()
2020-06-09 00:10:33,230 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:10:33,231 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,231 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,231 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:10:33,231 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,231 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,231 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,231 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,232 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,232 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,232 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:10:33,232 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:10:33,232 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:10:33,232 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,232 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:10:33,235 INFO sqlalchemy.engine.base.Engine Thread-320 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:10:33,235 INFO sqlalchemy.engine.base.Engine Thread-320 : ('philip',)
2020-06-09 00:10:33,236 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:10:33,237 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:10:33,237 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:10:33,237 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:10:33,237 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:10:33,237 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:10:33,237 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:10:33,237 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:10:33,268 INFO sqlalchemy.engine.base.Engine Thread-320 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:10:33,268 INFO sqlalchemy.engine.base.Engine Thread-320 : ('philip', 1, 1)
2020-06-09 00:10:33,269 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:10:33,269 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:10:33,272 INFO sqlalchemy.engine.base.Engine Thread-320 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:10:33,272 INFO sqlalchemy.engine.base.Engine Thread-320 : ('philip', 1, 1)
2020-06-09 00:10:33,273 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:10:33,273 DEBUG sqlalchemy.engine.base.Engine Thread-320 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:10:33,278 INFO sqlalchemy.engine.base.Engine Thread-320 : ROLLBACK
2020-06-09 00:10:33,581 INFO sqlalchemy.engine.base.Engine Thread-331 : BEGIN (implicit)
2020-06-09 00:10:33,584 INFO sqlalchemy.engine.base.Engine Thread-332 : BEGIN (implicit)
2020-06-09 00:10:33,585 INFO sqlalchemy.engine.base.Engine Thread-331 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:10:33,586 INFO sqlalchemy.engine.base.Engine Thread-332 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:10:33,586 INFO sqlalchemy.engine.base.Engine Thread-331 : (1, 1)
2020-06-09 00:10:33,586 INFO sqlalchemy.engine.base.Engine Thread-332 : (1, 1)
2020-06-09 00:10:33,589 INFO sqlalchemy.engine.base.Engine Thread-333 : BEGIN (implicit)
2020-06-09 00:10:33,592 INFO sqlalchemy.engine.base.Engine Thread-334 : BEGIN (implicit)
2020-06-09 00:10:33,594 INFO sqlalchemy.engine.base.Engine Thread-333 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:10:33,594 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:10:33,594 DEBUG sqlalchemy.engine.base.Engine Thread-332 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:10:33,595 INFO sqlalchemy.engine.base.Engine Thread-334 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:10:33,595 INFO sqlalchemy.engine.base.Engine Thread-333 : (1, 1)
2020-06-09 00:10:33,596 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:10:33,596 DEBUG sqlalchemy.engine.base.Engine Thread-332 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:10:33,596 INFO sqlalchemy.engine.base.Engine Thread-334 : (1, 1)
2020-06-09 00:10:33,598 DEBUG sqlalchemy.engine.base.Engine Thread-333 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:10:33,600 INFO sqlalchemy.engine.base.Engine Thread-332 : ROLLBACK
2020-06-09 00:10:33,601 INFO sqlalchemy.engine.base.Engine Thread-331 : ROLLBACK
2020-06-09 00:10:33,602 DEBUG sqlalchemy.engine.base.Engine Thread-333 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:10:33,602 DEBUG sqlalchemy.engine.base.Engine Thread-334 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:10:33,605 DEBUG sqlalchemy.engine.base.Engine Thread-334 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:10:33,605 INFO sqlalchemy.engine.base.Engine Thread-333 : ROLLBACK
2020-06-09 00:10:33,608 INFO sqlalchemy.engine.base.Engine Thread-334 : ROLLBACK
2020-06-09 00:10:33,611 INFO sqlalchemy.engine.base.Engine Thread-335 : BEGIN (implicit)
2020-06-09 00:10:33,613 INFO sqlalchemy.engine.base.Engine Thread-335 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:10:33,614 INFO sqlalchemy.engine.base.Engine Thread-335 : (1, 1)
2020-06-09 00:10:33,615 DEBUG sqlalchemy.engine.base.Engine Thread-335 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:10:33,615 DEBUG sqlalchemy.engine.base.Engine Thread-335 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:10:33,617 INFO sqlalchemy.engine.base.Engine Thread-335 : ROLLBACK
2020-06-09 00:11:56,792 INFO sqlalchemy.engine.base.Engine Thread-337 : BEGIN (implicit)
2020-06-09 00:11:56,793 INFO sqlalchemy.engine.base.Engine Thread-337 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:11:56,793 INFO sqlalchemy.engine.base.Engine Thread-337 : (1, 1)
2020-06-09 00:11:56,794 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:11:56,794 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:11:56,798 INFO sqlalchemy.engine.base.Engine Thread-337 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:11:56,798 INFO sqlalchemy.engine.base.Engine Thread-337 : ()
2020-06-09 00:11:56,800 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:11:56,801 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,801 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,801 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:11:56,801 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,801 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,802 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,802 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,802 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,802 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,802 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:11:56,802 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:11:56,803 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:11:56,803 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,803 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:11:56,806 INFO sqlalchemy.engine.base.Engine Thread-337 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:11:56,806 INFO sqlalchemy.engine.base.Engine Thread-337 : ('philip',)
2020-06-09 00:11:56,807 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:11:56,807 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:11:56,807 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:11:56,807 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:11:56,807 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:11:56,808 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:11:56,808 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:11:56,808 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:11:56,834 INFO sqlalchemy.engine.base.Engine Thread-337 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:11:56,834 INFO sqlalchemy.engine.base.Engine Thread-337 : ('philip', 1, 1)
2020-06-09 00:11:56,835 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:11:56,835 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:11:56,838 INFO sqlalchemy.engine.base.Engine Thread-337 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:11:56,838 INFO sqlalchemy.engine.base.Engine Thread-337 : ('philip', 1, 1)
2020-06-09 00:11:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:11:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:11:56,843 INFO sqlalchemy.engine.base.Engine Thread-337 : ROLLBACK
2020-06-09 00:11:57,099 INFO sqlalchemy.engine.base.Engine Thread-349 : BEGIN (implicit)
2020-06-09 00:11:57,100 INFO sqlalchemy.engine.base.Engine Thread-349 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:11:57,100 INFO sqlalchemy.engine.base.Engine Thread-349 : (1, 1)
2020-06-09 00:11:57,102 INFO sqlalchemy.engine.base.Engine Thread-351 : BEGIN (implicit)
2020-06-09 00:11:57,103 INFO sqlalchemy.engine.base.Engine Thread-351 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:11:57,103 INFO sqlalchemy.engine.base.Engine Thread-351 : (1, 1)
2020-06-09 00:11:57,104 INFO sqlalchemy.engine.base.Engine Thread-348 : BEGIN (implicit)
2020-06-09 00:11:57,106 INFO sqlalchemy.engine.base.Engine Thread-348 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:11:57,106 DEBUG sqlalchemy.engine.base.Engine Thread-351 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:11:57,108 DEBUG sqlalchemy.engine.base.Engine Thread-351 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:11:57,108 INFO sqlalchemy.engine.base.Engine Thread-348 : (1, 1)
2020-06-09 00:11:57,108 DEBUG sqlalchemy.engine.base.Engine Thread-349 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:11:57,111 DEBUG sqlalchemy.engine.base.Engine Thread-349 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:11:57,111 INFO sqlalchemy.engine.base.Engine Thread-351 : ROLLBACK
2020-06-09 00:11:57,108 INFO sqlalchemy.engine.base.Engine Thread-350 : BEGIN (implicit)
2020-06-09 00:11:57,113 INFO sqlalchemy.engine.base.Engine Thread-350 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:11:57,113 INFO sqlalchemy.engine.base.Engine Thread-350 : (1, 1)
2020-06-09 00:11:57,112 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:11:57,114 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:11:57,114 DEBUG sqlalchemy.engine.base.Engine Thread-350 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:11:57,116 INFO sqlalchemy.engine.base.Engine Thread-348 : ROLLBACK
2020-06-09 00:11:57,117 DEBUG sqlalchemy.engine.base.Engine Thread-350 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:11:57,118 INFO sqlalchemy.engine.base.Engine Thread-349 : ROLLBACK
2020-06-09 00:11:57,121 INFO sqlalchemy.engine.base.Engine Thread-350 : ROLLBACK
2020-06-09 00:11:57,129 INFO sqlalchemy.engine.base.Engine Thread-352 : BEGIN (implicit)
2020-06-09 00:11:57,130 INFO sqlalchemy.engine.base.Engine Thread-352 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:11:57,130 INFO sqlalchemy.engine.base.Engine Thread-352 : (1, 1)
2020-06-09 00:11:57,131 DEBUG sqlalchemy.engine.base.Engine Thread-352 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:11:57,131 DEBUG sqlalchemy.engine.base.Engine Thread-352 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:11:57,133 INFO sqlalchemy.engine.base.Engine Thread-352 : ROLLBACK
2020-06-09 00:12:24,049 INFO sqlalchemy.engine.base.Engine Thread-354 : BEGIN (implicit)
2020-06-09 00:12:24,050 INFO sqlalchemy.engine.base.Engine Thread-354 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:12:24,050 INFO sqlalchemy.engine.base.Engine Thread-354 : (1, 1)
2020-06-09 00:12:24,051 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:12:24,051 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:12:24,056 INFO sqlalchemy.engine.base.Engine Thread-354 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:12:24,056 INFO sqlalchemy.engine.base.Engine Thread-354 : ()
2020-06-09 00:12:24,058 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:12:24,058 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,058 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,058 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:12:24,059 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,059 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,059 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,059 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,059 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,059 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,059 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:12:24,060 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:12:24,060 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:12:24,060 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,060 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:12:24,064 INFO sqlalchemy.engine.base.Engine Thread-354 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:12:24,064 INFO sqlalchemy.engine.base.Engine Thread-354 : ('philip',)
2020-06-09 00:12:24,065 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:12:24,065 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:12:24,065 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:12:24,065 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:12:24,066 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:12:24,066 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:12:24,066 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:12:24,066 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:12:24,156 INFO sqlalchemy.engine.base.Engine Thread-354 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:12:24,156 INFO sqlalchemy.engine.base.Engine Thread-354 : ('philip', 1, 1)
2020-06-09 00:12:24,157 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:12:24,157 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:12:24,160 INFO sqlalchemy.engine.base.Engine Thread-354 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:12:24,160 INFO sqlalchemy.engine.base.Engine Thread-354 : ('philip', 1, 1)
2020-06-09 00:12:24,160 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:12:24,161 DEBUG sqlalchemy.engine.base.Engine Thread-354 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:12:24,166 INFO sqlalchemy.engine.base.Engine Thread-354 : ROLLBACK
2020-06-09 00:12:24,429 INFO sqlalchemy.engine.base.Engine Thread-364 : BEGIN (implicit)
2020-06-09 00:12:24,430 INFO sqlalchemy.engine.base.Engine Thread-364 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:12:24,430 INFO sqlalchemy.engine.base.Engine Thread-364 : (1, 1)
2020-06-09 00:12:24,433 INFO sqlalchemy.engine.base.Engine Thread-365 : BEGIN (implicit)
2020-06-09 00:12:24,434 INFO sqlalchemy.engine.base.Engine Thread-365 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:12:24,435 INFO sqlalchemy.engine.base.Engine Thread-365 : (1, 1)
2020-06-09 00:12:24,435 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:12:24,435 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:12:24,437 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:12:24,438 INFO sqlalchemy.engine.base.Engine Thread-364 : ROLLBACK
2020-06-09 00:12:24,439 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:12:24,442 INFO sqlalchemy.engine.base.Engine Thread-366 : BEGIN (implicit)
2020-06-09 00:12:24,445 INFO sqlalchemy.engine.base.Engine Thread-365 : ROLLBACK
2020-06-09 00:12:24,448 INFO sqlalchemy.engine.base.Engine Thread-366 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:12:24,450 INFO sqlalchemy.engine.base.Engine Thread-367 : BEGIN (implicit)
2020-06-09 00:12:24,450 INFO sqlalchemy.engine.base.Engine Thread-366 : (1, 1)
2020-06-09 00:12:24,452 INFO sqlalchemy.engine.base.Engine Thread-367 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:12:24,452 INFO sqlalchemy.engine.base.Engine Thread-367 : (1, 1)
2020-06-09 00:12:24,453 DEBUG sqlalchemy.engine.base.Engine Thread-366 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:12:24,453 DEBUG sqlalchemy.engine.base.Engine Thread-366 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:12:24,454 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:12:24,455 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:12:24,458 INFO sqlalchemy.engine.base.Engine Thread-366 : ROLLBACK
2020-06-09 00:12:24,459 INFO sqlalchemy.engine.base.Engine Thread-367 : ROLLBACK
2020-06-09 00:12:24,462 INFO sqlalchemy.engine.base.Engine Thread-368 : BEGIN (implicit)
2020-06-09 00:12:24,464 INFO sqlalchemy.engine.base.Engine Thread-368 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:12:24,464 INFO sqlalchemy.engine.base.Engine Thread-368 : (1, 1)
2020-06-09 00:12:24,464 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:12:24,465 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:12:24,467 INFO sqlalchemy.engine.base.Engine Thread-368 : ROLLBACK
2020-06-09 00:24:23,182 INFO sqlalchemy.engine.base.Engine Thread-370 : BEGIN (implicit)
2020-06-09 00:24:23,184 INFO sqlalchemy.engine.base.Engine Thread-370 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:24:23,184 INFO sqlalchemy.engine.base.Engine Thread-370 : (1, 1)
2020-06-09 00:24:23,187 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:24:23,187 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:24:23,192 INFO sqlalchemy.engine.base.Engine Thread-370 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:24:23,192 INFO sqlalchemy.engine.base.Engine Thread-370 : ()
2020-06-09 00:24:23,195 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:24:23,195 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,195 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,196 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:24:23,196 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,196 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,196 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,196 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,196 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,197 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,197 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:24:23,197 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:24:23,197 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:24:23,197 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,197 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:24:23,200 INFO sqlalchemy.engine.base.Engine Thread-370 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:24:23,201 INFO sqlalchemy.engine.base.Engine Thread-370 : ('philip',)
2020-06-09 00:24:23,201 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:24:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:24:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:24:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:24:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:24:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:24:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:24:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:24:23,266 INFO sqlalchemy.engine.base.Engine Thread-370 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:24:23,266 INFO sqlalchemy.engine.base.Engine Thread-370 : ('philip', 1, 1)
2020-06-09 00:24:23,267 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:24:23,267 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:24:23,270 INFO sqlalchemy.engine.base.Engine Thread-370 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:24:23,270 INFO sqlalchemy.engine.base.Engine Thread-370 : ('philip', 1, 1)
2020-06-09 00:24:23,270 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:24:23,271 DEBUG sqlalchemy.engine.base.Engine Thread-370 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:24:23,275 INFO sqlalchemy.engine.base.Engine Thread-370 : ROLLBACK
2020-06-09 00:24:23,539 INFO sqlalchemy.engine.base.Engine Thread-381 : BEGIN (implicit)
2020-06-09 00:24:23,540 INFO sqlalchemy.engine.base.Engine Thread-381 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:24:23,540 INFO sqlalchemy.engine.base.Engine Thread-381 : (1, 1)
2020-06-09 00:24:23,541 DEBUG sqlalchemy.engine.base.Engine Thread-381 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:24:23,541 DEBUG sqlalchemy.engine.base.Engine Thread-381 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:24:23,543 INFO sqlalchemy.engine.base.Engine Thread-381 : ROLLBACK
2020-06-09 00:24:23,624 INFO sqlalchemy.engine.base.Engine Thread-382 : BEGIN (implicit)
2020-06-09 00:24:23,627 INFO sqlalchemy.engine.base.Engine Thread-384 : BEGIN (implicit)
2020-06-09 00:24:23,631 INFO sqlalchemy.engine.base.Engine Thread-383 : BEGIN (implicit)
2020-06-09 00:24:23,633 INFO sqlalchemy.engine.base.Engine Thread-385 : BEGIN (implicit)
2020-06-09 00:24:23,634 INFO sqlalchemy.engine.base.Engine Thread-382 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:24:23,635 INFO sqlalchemy.engine.base.Engine Thread-384 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:24:23,636 INFO sqlalchemy.engine.base.Engine Thread-383 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:24:23,637 INFO sqlalchemy.engine.base.Engine Thread-385 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:24:23,637 INFO sqlalchemy.engine.base.Engine Thread-382 : (1, 1)
2020-06-09 00:24:23,638 INFO sqlalchemy.engine.base.Engine Thread-384 : (1, 1)
2020-06-09 00:24:23,638 INFO sqlalchemy.engine.base.Engine Thread-383 : (1, 1)
2020-06-09 00:24:23,638 INFO sqlalchemy.engine.base.Engine Thread-385 : (1, 1)
2020-06-09 00:24:23,639 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:24:23,640 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:24:23,641 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:24:23,641 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:24:23,641 DEBUG sqlalchemy.engine.base.Engine Thread-385 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:24:23,646 DEBUG sqlalchemy.engine.base.Engine Thread-385 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:24:23,644 INFO sqlalchemy.engine.base.Engine Thread-384 : ROLLBACK
2020-06-09 00:24:23,640 DEBUG sqlalchemy.engine.base.Engine Thread-383 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:24:23,647 INFO sqlalchemy.engine.base.Engine Thread-382 : ROLLBACK
2020-06-09 00:24:23,650 INFO sqlalchemy.engine.base.Engine Thread-385 : ROLLBACK
2020-06-09 00:24:23,650 DEBUG sqlalchemy.engine.base.Engine Thread-383 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:24:23,655 INFO sqlalchemy.engine.base.Engine Thread-383 : ROLLBACK
2020-06-09 00:25:03,706 INFO sqlalchemy.engine.base.Engine Thread-387 : BEGIN (implicit)
2020-06-09 00:25:03,708 INFO sqlalchemy.engine.base.Engine Thread-387 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.complex_active = %s
2020-06-09 00:25:03,708 INFO sqlalchemy.engine.base.Engine Thread-387 : (1,)
2020-06-09 00:25:03,710 DEBUG sqlalchemy.engine.base.Engine Thread-387 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:25:03,712 INFO sqlalchemy.engine.base.Engine Thread-387 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:25:03,712 INFO sqlalchemy.engine.base.Engine Thread-387 : (1, 1)
2020-06-09 00:25:03,712 DEBUG sqlalchemy.engine.base.Engine Thread-387 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:03,713 DEBUG sqlalchemy.engine.base.Engine Thread-387 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:03,727 INFO sqlalchemy.engine.base.Engine Thread-387 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:03,727 INFO sqlalchemy.engine.base.Engine Thread-387 : ('philip', 1, 1)
2020-06-09 00:25:03,728 DEBUG sqlalchemy.engine.base.Engine Thread-387 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:03,728 DEBUG sqlalchemy.engine.base.Engine Thread-387 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:03,731 INFO sqlalchemy.engine.base.Engine Thread-387 : ROLLBACK
2020-06-09 00:25:15,953 INFO sqlalchemy.engine.base.Engine Thread-397 : BEGIN (implicit)
2020-06-09 00:25:15,954 INFO sqlalchemy.engine.base.Engine Thread-397 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:25:15,954 INFO sqlalchemy.engine.base.Engine Thread-397 : (1, 1)
2020-06-09 00:25:15,955 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:15,955 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:15,958 INFO sqlalchemy.engine.base.Engine Thread-397 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:15,958 INFO sqlalchemy.engine.base.Engine Thread-397 : ('philip', 1, 1)
2020-06-09 00:25:15,959 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:15,959 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:15,970 INFO sqlalchemy.engine.base.Engine Thread-397 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical, parameters_3.id AS parameters_3_id, parameters_3.param_name AS parameters_3_param_name, parameters_3.param_value AS parameters_3_param_value, parameters_3.param_group AS parameters_3_param_group, parameters_3.param_parent AS parameters_3_param_parent, parameters_3.param_disabled AS parameters_3_param_disabled, parameters_3.param_critical AS parameters_3_param_critical, parameters_4.id AS parameters_4_id, parameters_4.param_name AS parameters_4_param_name, parameters_4.param_value AS parameters_4_param_value, parameters_4.param_group AS parameters_4_param_group, parameters_4.param_parent AS parameters_4_param_parent, parameters_4.param_disabled AS parameters_4_param_disabled, parameters_4.param_critical AS parameters_4_param_critical 
FROM complexes, parameters AS parameters_1, parameters AS parameters_2, parameters AS parameters_3, parameters AS parameters_4 
WHERE complexes.complex_manager = parameters_1.id AND complexes.complex_type = parameters_2.id AND complexes.complex_country = parameters_3.id AND complexes.complex_active = parameters_4.id
2020-06-09 00:25:15,970 INFO sqlalchemy.engine.base.Engine Thread-397 : ()
2020-06-09 00:25:15,971 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical', 'parameters_3_id', 'parameters_3_param_name', 'parameters_3_param_value', 'parameters_3_param_group', 'parameters_3_param_parent', 'parameters_3_param_disabled', 'parameters_3_param_critical', 'parameters_4_id', 'parameters_4_param_name', 'parameters_4_param_value', 'parameters_4_param_group', 'parameters_4_param_parent', 'parameters_4_param_disabled', 'parameters_4_param_critical')
2020-06-09 00:25:15,972 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67, 87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0, 108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0, 69, 'India', 'IND', 1, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-09 00:25:15,972 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67, 86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0, 101, 'Fortigate', 'Fortigate', 100, 0, 0, 1, 61, 'United Kingdom', 'GBR', 1, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-09 00:25:15,987 INFO sqlalchemy.engine.base.Engine Thread-397 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:15,987 INFO sqlalchemy.engine.base.Engine Thread-397 : ('philip', 1, 1)
2020-06-09 00:25:15,988 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:15,988 DEBUG sqlalchemy.engine.base.Engine Thread-397 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:15,991 INFO sqlalchemy.engine.base.Engine Thread-397 : ROLLBACK
2020-06-09 00:25:25,261 INFO sqlalchemy.engine.base.Engine Thread-407 : BEGIN (implicit)
2020-06-09 00:25:25,262 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:25:25,262 INFO sqlalchemy.engine.base.Engine Thread-407 : (1, 1)
2020-06-09 00:25:25,263 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:25,263 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:25,265 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:25,266 INFO sqlalchemy.engine.base.Engine Thread-407 : ('philip', 1, 1)
2020-06-09 00:25:25,266 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:25,267 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:25,270 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-06-09 00:25:25,270 INFO sqlalchemy.engine.base.Engine Thread-407 : ('2', 1)
2020-06-09 00:25:25,271 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:25:25,271 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:25:25,276 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-09 00:25:25,276 INFO sqlalchemy.engine.base.Engine Thread-407 : (89,)
2020-06-09 00:25:25,277 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:25,277 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-06-09 00:25:25,277 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-06-09 00:25:25,278 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-09 00:25:25,278 INFO sqlalchemy.engine.base.Engine Thread-407 : (2,)
2020-06-09 00:25:25,279 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:25,279 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-06-09 00:25:25,279 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-06-09 00:25:25,279 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-06-09 00:25:25,280 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-09 00:25:25,281 INFO sqlalchemy.engine.base.Engine Thread-407 : (100,)
2020-06-09 00:25:25,281 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:25,282 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-09 00:25:25,282 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-09 00:25:25,282 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-09 00:25:25,282 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-09 00:25:25,282 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-09 00:25:25,284 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-09 00:25:25,284 INFO sqlalchemy.engine.base.Engine Thread-407 : (1,)
2020-06-09 00:25:25,284 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:25,284 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-09 00:25:25,285 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-09 00:25:25,286 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-09 00:25:25,286 INFO sqlalchemy.engine.base.Engine Thread-407 : (1,)
2020-06-09 00:25:25,287 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:25,287 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-09 00:25:25,287 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-09 00:25:25,288 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-09 00:25:25,288 INFO sqlalchemy.engine.base.Engine Thread-407 : (105,)
2020-06-09 00:25:25,289 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:25,289 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-09 00:25:25,289 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-09 00:25:25,290 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-09 00:25:25,290 INFO sqlalchemy.engine.base.Engine Thread-407 : (92,)
2020-06-09 00:25:25,291 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:25,291 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-06-09 00:25:25,291 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-06-09 00:25:25,291 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-06-09 00:25:25,291 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-06-09 00:25:25,292 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-09 00:25:25,292 INFO sqlalchemy.engine.base.Engine Thread-407 : (66,)
2020-06-09 00:25:25,293 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:25,293 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-09 00:25:25,293 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-09 00:25:25,335 INFO sqlalchemy.engine.base.Engine Thread-407 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:25,336 INFO sqlalchemy.engine.base.Engine Thread-407 : ('philip', 1, 1)
2020-06-09 00:25:25,336 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:25,337 DEBUG sqlalchemy.engine.base.Engine Thread-407 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:25,344 INFO sqlalchemy.engine.base.Engine Thread-407 : ROLLBACK
2020-06-09 00:25:29,945 INFO sqlalchemy.engine.base.Engine Thread-417 : BEGIN (implicit)
2020-06-09 00:25:29,947 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-09 00:25:29,948 INFO sqlalchemy.engine.base.Engine Thread-417 : ()
2020-06-09 00:25:29,949 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:25:29,949 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:29,950 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:25:29,951 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-09 00:25:29,951 INFO sqlalchemy.engine.base.Engine Thread-417 : (100,)
2020-06-09 00:25:29,952 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:29,952 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-09 00:25:29,952 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-09 00:25:29,952 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-09 00:25:29,953 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-09 00:25:29,953 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-09 00:25:29,955 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:25:29,955 INFO sqlalchemy.engine.base.Engine Thread-417 : (1, 1)
2020-06-09 00:25:29,956 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:29,956 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:29,966 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:29,966 INFO sqlalchemy.engine.base.Engine Thread-417 : ('philip', 1, 1)
2020-06-09 00:25:29,967 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:29,967 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:29,970 INFO sqlalchemy.engine.base.Engine Thread-417 : ROLLBACK
2020-06-09 00:25:30,960 INFO sqlalchemy.engine.base.Engine Thread-427 : BEGIN (implicit)
2020-06-09 00:25:30,962 INFO sqlalchemy.engine.base.Engine Thread-427 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-09 00:25:30,962 INFO sqlalchemy.engine.base.Engine Thread-427 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:30,964 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-09 00:25:30,964 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-09 00:25:30,964 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-09 00:25:30,964 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:30,964 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-09 00:25:30,964 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:30,965 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:30,969 INFO sqlalchemy.engine.base.Engine Thread-427 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-09 00:25:30,969 INFO sqlalchemy.engine.base.Engine Thread-427 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:30,970 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-09 00:25:30,970 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-09 00:25:31,009 INFO sqlalchemy.engine.base.Engine Thread-427 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-09 00:25:31,009 INFO sqlalchemy.engine.base.Engine Thread-427 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:31,010 DEBUG sqlalchemy.engine.base.Engine Thread-427 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-09 00:25:31,011 INFO sqlalchemy.engine.base.Engine Thread-427 : ROLLBACK
2020-06-09 00:25:31,038 INFO sqlalchemy.engine.base.Engine Thread-428 : BEGIN (implicit)
2020-06-09 00:25:31,040 INFO sqlalchemy.engine.base.Engine Thread-428 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-09 00:25:31,040 INFO sqlalchemy.engine.base.Engine Thread-428 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:31,041 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-09 00:25:31,041 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-09 00:25:31,041 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-09 00:25:31,041 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:31,041 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-09 00:25:31,041 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:31,041 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:31,045 INFO sqlalchemy.engine.base.Engine Thread-428 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-09 00:25:31,045 INFO sqlalchemy.engine.base.Engine Thread-428 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:31,046 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-09 00:25:31,046 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-09 00:25:31,050 INFO sqlalchemy.engine.base.Engine Thread-428 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-09 00:25:31,050 INFO sqlalchemy.engine.base.Engine Thread-428 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:31,051 DEBUG sqlalchemy.engine.base.Engine Thread-428 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-09 00:25:31,052 INFO sqlalchemy.engine.base.Engine Thread-428 : ROLLBACK
2020-06-09 00:25:40,433 INFO sqlalchemy.engine.base.Engine Thread-429 : BEGIN (implicit)
2020-06-09 00:25:40,434 INFO sqlalchemy.engine.base.Engine Thread-429 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:25:40,434 INFO sqlalchemy.engine.base.Engine Thread-429 : (1, 1)
2020-06-09 00:25:40,435 DEBUG sqlalchemy.engine.base.Engine Thread-429 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:40,435 DEBUG sqlalchemy.engine.base.Engine Thread-429 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:40,441 INFO sqlalchemy.engine.base.Engine Thread-429 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-09 00:25:40,441 INFO sqlalchemy.engine.base.Engine Thread-429 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-09 00:25:40,442 DEBUG sqlalchemy.engine.base.Engine Thread-429 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-09 00:25:40,442 DEBUG sqlalchemy.engine.base.Engine Thread-429 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-09 00:25:40,442 DEBUG sqlalchemy.engine.base.Engine Thread-429 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-09 00:25:40,442 DEBUG sqlalchemy.engine.base.Engine Thread-429 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-09 00:25:40,442 DEBUG sqlalchemy.engine.base.Engine Thread-429 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-09 00:25:40,463 INFO sqlalchemy.engine.base.Engine Thread-429 : ROLLBACK
2020-06-09 00:25:41,699 INFO sqlalchemy.engine.base.Engine Thread-430 : BEGIN (implicit)
2020-06-09 00:25:41,700 INFO sqlalchemy.engine.base.Engine Thread-430 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:25:41,701 INFO sqlalchemy.engine.base.Engine Thread-430 : (1, 1)
2020-06-09 00:25:41,701 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:41,701 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:41,705 INFO sqlalchemy.engine.base.Engine Thread-430 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-09 00:25:41,705 INFO sqlalchemy.engine.base.Engine Thread-430 : (23,)
2020-06-09 00:25:41,705 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-09 00:25:41,706 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-09 00:25:41,710 INFO sqlalchemy.engine.base.Engine Thread-430 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-09 00:25:41,710 INFO sqlalchemy.engine.base.Engine Thread-430 : (23,)
2020-06-09 00:25:41,710 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-09 00:25:41,712 INFO sqlalchemy.engine.base.Engine Thread-430 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-09 00:25:41,712 INFO sqlalchemy.engine.base.Engine Thread-430 : ()
2020-06-09 00:25:41,713 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-09 00:25:41,713 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-09 00:25:41,713 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-09 00:25:41,716 INFO sqlalchemy.engine.base.Engine Thread-430 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-09 00:25:41,716 INFO sqlalchemy.engine.base.Engine Thread-430 : ()
2020-06-09 00:25:41,717 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:25:41,717 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:41,718 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:25:41,720 INFO sqlalchemy.engine.base.Engine Thread-430 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-09 00:25:41,720 INFO sqlalchemy.engine.base.Engine Thread-430 : (23,)
2020-06-09 00:25:41,721 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-09 00:25:41,721 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (2, 'Zone 5 Complexes')
2020-06-09 00:25:41,722 INFO sqlalchemy.engine.base.Engine Thread-430 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-09 00:25:41,722 INFO sqlalchemy.engine.base.Engine Thread-430 : (2,)
2020-06-09 00:25:41,722 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Col ('complexgroups_1_group_members',)
2020-06-09 00:25:41,722 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row ('1,2',)
2020-06-09 00:25:41,728 INFO sqlalchemy.engine.base.Engine Thread-430 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-09 00:25:41,729 INFO sqlalchemy.engine.base.Engine Thread-430 : ('1', '2')
2020-06-09 00:25:41,729 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-09 00:25:41,730 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (1, 'Made Up CheckPoint')
2020-06-09 00:25:41,730 DEBUG sqlalchemy.engine.base.Engine Thread-430 : Row (2, 'Made Up Fortigate')
2020-06-09 00:25:41,743 INFO sqlalchemy.engine.base.Engine Thread-430 : ROLLBACK
2020-06-09 00:25:47,496 INFO sqlalchemy.engine.base.Engine Thread-431 : BEGIN (implicit)
2020-06-09 00:25:47,498 INFO sqlalchemy.engine.base.Engine Thread-431 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-09 00:25:47,498 INFO sqlalchemy.engine.base.Engine Thread-431 : ()
2020-06-09 00:25:47,499 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:25:47,500 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:47,500 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:25:47,501 INFO sqlalchemy.engine.base.Engine Thread-431 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-09 00:25:47,501 INFO sqlalchemy.engine.base.Engine Thread-431 : (100,)
2020-06-09 00:25:47,502 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-09 00:25:47,502 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-09 00:25:47,502 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-09 00:25:47,502 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-09 00:25:47,502 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-09 00:25:47,503 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-09 00:25:47,504 INFO sqlalchemy.engine.base.Engine Thread-431 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:25:47,504 INFO sqlalchemy.engine.base.Engine Thread-431 : (1, 1)
2020-06-09 00:25:47,505 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:47,505 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:47,509 INFO sqlalchemy.engine.base.Engine Thread-431 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:47,509 INFO sqlalchemy.engine.base.Engine Thread-431 : ('philip', 1, 1)
2020-06-09 00:25:47,510 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:47,510 DEBUG sqlalchemy.engine.base.Engine Thread-431 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:47,513 INFO sqlalchemy.engine.base.Engine Thread-431 : ROLLBACK
2020-06-09 00:25:48,478 INFO sqlalchemy.engine.base.Engine Thread-441 : BEGIN (implicit)
2020-06-09 00:25:48,482 INFO sqlalchemy.engine.base.Engine Thread-441 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-09 00:25:48,482 INFO sqlalchemy.engine.base.Engine Thread-441 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:48,483 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-09 00:25:48,483 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-09 00:25:48,483 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-09 00:25:48,484 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:48,484 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-09 00:25:48,484 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:48,484 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:48,488 INFO sqlalchemy.engine.base.Engine Thread-441 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-09 00:25:48,488 INFO sqlalchemy.engine.base.Engine Thread-441 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:48,489 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-09 00:25:48,489 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-09 00:25:48,493 INFO sqlalchemy.engine.base.Engine Thread-441 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-09 00:25:48,493 INFO sqlalchemy.engine.base.Engine Thread-441 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:48,494 DEBUG sqlalchemy.engine.base.Engine Thread-441 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-09 00:25:48,495 INFO sqlalchemy.engine.base.Engine Thread-441 : ROLLBACK
2020-06-09 00:25:48,517 INFO sqlalchemy.engine.base.Engine Thread-442 : BEGIN (implicit)
2020-06-09 00:25:48,518 INFO sqlalchemy.engine.base.Engine Thread-442 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-09 00:25:48,518 INFO sqlalchemy.engine.base.Engine Thread-442 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:48,519 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-09 00:25:48,519 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-09 00:25:48,519 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-09 00:25:48,519 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:48,519 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-09 00:25:48,519 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:48,520 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-09 00:25:48,524 INFO sqlalchemy.engine.base.Engine Thread-442 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-09 00:25:48,524 INFO sqlalchemy.engine.base.Engine Thread-442 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:48,525 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-09 00:25:48,525 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-09 00:25:48,529 INFO sqlalchemy.engine.base.Engine Thread-442 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-09 00:25:48,529 INFO sqlalchemy.engine.base.Engine Thread-442 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-09 00:25:48,529 DEBUG sqlalchemy.engine.base.Engine Thread-442 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-09 00:25:48,530 INFO sqlalchemy.engine.base.Engine Thread-442 : ROLLBACK
2020-06-09 00:25:49,365 INFO sqlalchemy.engine.base.Engine Thread-443 : BEGIN (implicit)
2020-06-09 00:25:49,366 INFO sqlalchemy.engine.base.Engine Thread-443 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:25:49,366 INFO sqlalchemy.engine.base.Engine Thread-443 : (1, 1)
2020-06-09 00:25:49,366 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:49,367 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:49,371 INFO sqlalchemy.engine.base.Engine Thread-443 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:25:49,371 INFO sqlalchemy.engine.base.Engine Thread-443 : ()
2020-06-09 00:25:49,373 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:25:49,373 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:25:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,375 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,375 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:25:49,375 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:25:49,375 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:25:49,375 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,375 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:25:49,378 INFO sqlalchemy.engine.base.Engine Thread-443 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:25:49,378 INFO sqlalchemy.engine.base.Engine Thread-443 : ('philip',)
2020-06-09 00:25:49,379 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:25:49,379 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:25:49,379 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:25:49,380 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:25:49,380 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:25:49,380 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:25:49,380 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:25:49,380 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:25:49,384 INFO sqlalchemy.engine.base.Engine Thread-443 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:49,384 INFO sqlalchemy.engine.base.Engine Thread-443 : ('philip', 1, 1)
2020-06-09 00:25:49,385 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:49,385 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:49,388 INFO sqlalchemy.engine.base.Engine Thread-443 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:25:49,388 INFO sqlalchemy.engine.base.Engine Thread-443 : ('philip', 1, 1)
2020-06-09 00:25:49,388 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:25:49,389 DEBUG sqlalchemy.engine.base.Engine Thread-443 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:25:49,393 INFO sqlalchemy.engine.base.Engine Thread-443 : ROLLBACK
2020-06-09 00:26:55,177 INFO sqlalchemy.engine.base.Engine Thread-453 : BEGIN (implicit)
2020-06-09 00:26:55,178 INFO sqlalchemy.engine.base.Engine Thread-453 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:26:55,178 INFO sqlalchemy.engine.base.Engine Thread-453 : (1, 1)
2020-06-09 00:26:55,179 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:26:55,180 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:26:55,185 INFO sqlalchemy.engine.base.Engine Thread-453 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:26:55,185 INFO sqlalchemy.engine.base.Engine Thread-453 : ()
2020-06-09 00:26:55,187 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:26:55,187 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,188 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,188 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:26:55,188 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,188 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,188 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,188 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,189 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,189 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,189 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:26:55,189 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:26:55,189 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:26:55,189 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,189 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:26:55,192 INFO sqlalchemy.engine.base.Engine Thread-453 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:26:55,192 INFO sqlalchemy.engine.base.Engine Thread-453 : ('philip',)
2020-06-09 00:26:55,193 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:26:55,193 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:26:55,193 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:26:55,194 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:26:55,194 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:26:55,194 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:26:55,194 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:26:55,194 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:26:55,220 INFO sqlalchemy.engine.base.Engine Thread-453 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:26:55,220 INFO sqlalchemy.engine.base.Engine Thread-453 : ('philip', 1, 1)
2020-06-09 00:26:55,221 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:26:55,221 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:26:55,224 INFO sqlalchemy.engine.base.Engine Thread-453 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:26:55,224 INFO sqlalchemy.engine.base.Engine Thread-453 : ('philip', 1, 1)
2020-06-09 00:26:55,224 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:26:55,224 DEBUG sqlalchemy.engine.base.Engine Thread-453 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:26:55,229 INFO sqlalchemy.engine.base.Engine Thread-453 : ROLLBACK
2020-06-09 00:32:31,507 INFO sqlalchemy.engine.base.Engine Thread-464 : BEGIN (implicit)
2020-06-09 00:32:31,509 INFO sqlalchemy.engine.base.Engine Thread-464 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:32:31,509 INFO sqlalchemy.engine.base.Engine Thread-464 : (1, 1)
2020-06-09 00:32:31,511 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:32:31,512 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:32:31,517 INFO sqlalchemy.engine.base.Engine Thread-464 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:32:31,517 INFO sqlalchemy.engine.base.Engine Thread-464 : ()
2020-06-09 00:32:31,518 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:32:31,519 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,519 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,519 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:32:31,519 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,519 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,520 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,520 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,520 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,520 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,520 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:32:31,520 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:32:31,520 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:32:31,521 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,521 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:32:31,524 INFO sqlalchemy.engine.base.Engine Thread-464 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:32:31,524 INFO sqlalchemy.engine.base.Engine Thread-464 : ('philip',)
2020-06-09 00:32:31,525 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:32:31,525 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:32:31,525 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:32:31,525 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:32:31,525 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:32:31,525 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:32:31,525 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:32:31,526 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:32:31,552 INFO sqlalchemy.engine.base.Engine Thread-464 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:32:31,552 INFO sqlalchemy.engine.base.Engine Thread-464 : ('philip', 1, 1)
2020-06-09 00:32:31,553 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:32:31,553 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:32:31,556 INFO sqlalchemy.engine.base.Engine Thread-464 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:32:31,556 INFO sqlalchemy.engine.base.Engine Thread-464 : ('philip', 1, 1)
2020-06-09 00:32:31,557 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:32:31,557 DEBUG sqlalchemy.engine.base.Engine Thread-464 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:32:31,562 INFO sqlalchemy.engine.base.Engine Thread-464 : ROLLBACK
2020-06-09 00:34:36,215 INFO sqlalchemy.engine.base.Engine Thread-475 : BEGIN (implicit)
2020-06-09 00:34:36,216 INFO sqlalchemy.engine.base.Engine Thread-475 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:34:36,216 INFO sqlalchemy.engine.base.Engine Thread-475 : (1, 1)
2020-06-09 00:34:36,218 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:34:36,218 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:34:36,222 INFO sqlalchemy.engine.base.Engine Thread-475 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:34:36,223 INFO sqlalchemy.engine.base.Engine Thread-475 : ()
2020-06-09 00:34:36,224 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:34:36,225 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,225 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,225 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:34:36,225 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,226 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,226 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,226 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,226 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,226 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,226 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:34:36,227 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:34:36,227 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:34:36,227 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,227 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:34:36,230 INFO sqlalchemy.engine.base.Engine Thread-475 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:34:36,230 INFO sqlalchemy.engine.base.Engine Thread-475 : ('philip',)
2020-06-09 00:34:36,231 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:34:36,231 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:34:36,231 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:34:36,232 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:34:36,232 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:34:36,232 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:34:36,232 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:34:36,232 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:34:36,259 INFO sqlalchemy.engine.base.Engine Thread-475 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:34:36,259 INFO sqlalchemy.engine.base.Engine Thread-475 : ('philip', 1, 1)
2020-06-09 00:34:36,260 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:34:36,260 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:34:36,263 INFO sqlalchemy.engine.base.Engine Thread-475 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:34:36,263 INFO sqlalchemy.engine.base.Engine Thread-475 : ('philip', 1, 1)
2020-06-09 00:34:36,263 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:34:36,264 DEBUG sqlalchemy.engine.base.Engine Thread-475 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:34:36,268 INFO sqlalchemy.engine.base.Engine Thread-475 : ROLLBACK
2020-06-09 00:34:40,517 INFO sqlalchemy.engine.base.Engine Thread-486 : BEGIN (implicit)
2020-06-09 00:34:40,518 INFO sqlalchemy.engine.base.Engine Thread-486 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:34:40,519 INFO sqlalchemy.engine.base.Engine Thread-486 : (1, 1)
2020-06-09 00:34:40,521 INFO sqlalchemy.engine.base.Engine Thread-487 : BEGIN (implicit)
2020-06-09 00:34:40,521 INFO sqlalchemy.engine.base.Engine Thread-487 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:34:40,522 INFO sqlalchemy.engine.base.Engine Thread-487 : (1, 1)
2020-06-09 00:34:40,522 DEBUG sqlalchemy.engine.base.Engine Thread-486 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:34:40,522 DEBUG sqlalchemy.engine.base.Engine Thread-486 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:34:40,523 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:34:40,524 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:34:40,526 INFO sqlalchemy.engine.base.Engine Thread-486 : ROLLBACK
2020-06-09 00:34:40,527 INFO sqlalchemy.engine.base.Engine Thread-487 : ROLLBACK
2020-06-09 00:34:40,530 INFO sqlalchemy.engine.base.Engine Thread-488 : BEGIN (implicit)
2020-06-09 00:34:40,534 INFO sqlalchemy.engine.base.Engine Thread-488 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:34:40,534 INFO sqlalchemy.engine.base.Engine Thread-488 : (1, 1)
2020-06-09 00:34:40,533 INFO sqlalchemy.engine.base.Engine Thread-489 : BEGIN (implicit)
2020-06-09 00:34:40,536 INFO sqlalchemy.engine.base.Engine Thread-489 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:34:40,536 DEBUG sqlalchemy.engine.base.Engine Thread-488 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:34:40,537 INFO sqlalchemy.engine.base.Engine Thread-489 : (1, 1)
2020-06-09 00:34:40,538 DEBUG sqlalchemy.engine.base.Engine Thread-488 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:34:40,539 INFO sqlalchemy.engine.base.Engine Thread-490 : BEGIN (implicit)
2020-06-09 00:34:40,542 INFO sqlalchemy.engine.base.Engine Thread-488 : ROLLBACK
2020-06-09 00:34:40,543 INFO sqlalchemy.engine.base.Engine Thread-490 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:34:40,543 DEBUG sqlalchemy.engine.base.Engine Thread-489 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:34:40,544 INFO sqlalchemy.engine.base.Engine Thread-490 : (1, 1)
2020-06-09 00:34:40,545 DEBUG sqlalchemy.engine.base.Engine Thread-489 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:34:40,545 DEBUG sqlalchemy.engine.base.Engine Thread-490 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:34:40,546 DEBUG sqlalchemy.engine.base.Engine Thread-490 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:34:40,548 INFO sqlalchemy.engine.base.Engine Thread-489 : ROLLBACK
2020-06-09 00:34:40,550 INFO sqlalchemy.engine.base.Engine Thread-490 : ROLLBACK
2020-06-09 00:35:16,115 INFO sqlalchemy.engine.base.Engine Thread-491 : BEGIN (implicit)
2020-06-09 00:35:16,116 INFO sqlalchemy.engine.base.Engine Thread-491 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:16,116 INFO sqlalchemy.engine.base.Engine Thread-491 : (1, 1)
2020-06-09 00:35:16,117 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:16,117 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:16,122 INFO sqlalchemy.engine.base.Engine Thread-491 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:35:16,122 INFO sqlalchemy.engine.base.Engine Thread-491 : ()
2020-06-09 00:35:16,124 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:35:16,124 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,125 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,125 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:35:16,125 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,125 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,125 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,125 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,125 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,126 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,126 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:35:16,126 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:35:16,126 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:35:16,126 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,127 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:16,130 INFO sqlalchemy.engine.base.Engine Thread-491 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:35:16,130 INFO sqlalchemy.engine.base.Engine Thread-491 : ('philip',)
2020-06-09 00:35:16,131 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:35:16,131 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:35:16,131 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:35:16,132 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:35:16,132 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:35:16,132 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:35:16,132 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:35:16,132 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:35:16,161 INFO sqlalchemy.engine.base.Engine Thread-491 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:35:16,161 INFO sqlalchemy.engine.base.Engine Thread-491 : ('philip', 1, 1)
2020-06-09 00:35:16,162 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:16,162 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:16,165 INFO sqlalchemy.engine.base.Engine Thread-491 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:35:16,165 INFO sqlalchemy.engine.base.Engine Thread-491 : ('philip', 1, 1)
2020-06-09 00:35:16,166 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:16,166 DEBUG sqlalchemy.engine.base.Engine Thread-491 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:16,172 INFO sqlalchemy.engine.base.Engine Thread-491 : ROLLBACK
2020-06-09 00:35:16,411 INFO sqlalchemy.engine.base.Engine Thread-501 : BEGIN (implicit)
2020-06-09 00:35:16,413 INFO sqlalchemy.engine.base.Engine Thread-501 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:16,413 INFO sqlalchemy.engine.base.Engine Thread-501 : (1, 1)
2020-06-09 00:35:16,414 DEBUG sqlalchemy.engine.base.Engine Thread-501 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:16,417 DEBUG sqlalchemy.engine.base.Engine Thread-501 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:16,417 INFO sqlalchemy.engine.base.Engine Thread-502 : BEGIN (implicit)
2020-06-09 00:35:16,420 INFO sqlalchemy.engine.base.Engine Thread-501 : ROLLBACK
2020-06-09 00:35:16,421 INFO sqlalchemy.engine.base.Engine Thread-502 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:16,421 INFO sqlalchemy.engine.base.Engine Thread-502 : (1, 1)
2020-06-09 00:35:16,425 INFO sqlalchemy.engine.base.Engine Thread-503 : BEGIN (implicit)
2020-06-09 00:35:16,429 INFO sqlalchemy.engine.base.Engine Thread-503 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:16,429 INFO sqlalchemy.engine.base.Engine Thread-503 : (1, 1)
2020-06-09 00:35:16,430 DEBUG sqlalchemy.engine.base.Engine Thread-502 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:16,430 DEBUG sqlalchemy.engine.base.Engine Thread-502 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:16,433 INFO sqlalchemy.engine.base.Engine Thread-504 : BEGIN (implicit)
2020-06-09 00:35:16,435 INFO sqlalchemy.engine.base.Engine Thread-502 : ROLLBACK
2020-06-09 00:35:16,436 INFO sqlalchemy.engine.base.Engine Thread-504 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:16,437 DEBUG sqlalchemy.engine.base.Engine Thread-503 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:16,437 INFO sqlalchemy.engine.base.Engine Thread-504 : (1, 1)
2020-06-09 00:35:16,438 DEBUG sqlalchemy.engine.base.Engine Thread-503 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:16,440 DEBUG sqlalchemy.engine.base.Engine Thread-504 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:16,441 INFO sqlalchemy.engine.base.Engine Thread-503 : ROLLBACK
2020-06-09 00:35:16,441 DEBUG sqlalchemy.engine.base.Engine Thread-504 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:16,444 INFO sqlalchemy.engine.base.Engine Thread-504 : ROLLBACK
2020-06-09 00:35:16,473 INFO sqlalchemy.engine.base.Engine Thread-505 : BEGIN (implicit)
2020-06-09 00:35:16,474 INFO sqlalchemy.engine.base.Engine Thread-505 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:16,474 INFO sqlalchemy.engine.base.Engine Thread-505 : (1, 1)
2020-06-09 00:35:16,475 DEBUG sqlalchemy.engine.base.Engine Thread-505 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:16,475 DEBUG sqlalchemy.engine.base.Engine Thread-505 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:16,477 INFO sqlalchemy.engine.base.Engine Thread-505 : ROLLBACK
2020-06-09 00:35:38,945 INFO sqlalchemy.engine.base.Engine Thread-507 : BEGIN (implicit)
2020-06-09 00:35:38,946 INFO sqlalchemy.engine.base.Engine Thread-507 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:38,946 INFO sqlalchemy.engine.base.Engine Thread-507 : (1, 1)
2020-06-09 00:35:38,947 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:38,948 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:38,952 INFO sqlalchemy.engine.base.Engine Thread-507 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:35:38,952 INFO sqlalchemy.engine.base.Engine Thread-507 : ()
2020-06-09 00:35:38,954 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:35:38,955 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,955 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,955 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:35:38,955 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,955 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,955 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,955 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,955 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,956 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,956 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:35:38,956 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:35:38,956 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:35:38,956 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,956 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:35:38,960 INFO sqlalchemy.engine.base.Engine Thread-507 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:35:38,960 INFO sqlalchemy.engine.base.Engine Thread-507 : ('philip',)
2020-06-09 00:35:38,961 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:35:38,961 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:35:38,961 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:35:38,961 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:35:38,961 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:35:38,962 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:35:38,962 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:35:38,962 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:35:38,988 INFO sqlalchemy.engine.base.Engine Thread-507 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:35:38,988 INFO sqlalchemy.engine.base.Engine Thread-507 : ('philip', 1, 1)
2020-06-09 00:35:38,989 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:38,989 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:38,992 INFO sqlalchemy.engine.base.Engine Thread-507 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:35:38,992 INFO sqlalchemy.engine.base.Engine Thread-507 : ('philip', 1, 1)
2020-06-09 00:35:38,993 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:38,993 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:38,998 INFO sqlalchemy.engine.base.Engine Thread-507 : ROLLBACK
2020-06-09 00:35:39,269 INFO sqlalchemy.engine.base.Engine Thread-517 : BEGIN (implicit)
2020-06-09 00:35:39,270 INFO sqlalchemy.engine.base.Engine Thread-517 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:39,270 INFO sqlalchemy.engine.base.Engine Thread-517 : (1, 1)
2020-06-09 00:35:39,272 INFO sqlalchemy.engine.base.Engine Thread-518 : BEGIN (implicit)
2020-06-09 00:35:39,272 DEBUG sqlalchemy.engine.base.Engine Thread-517 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:39,273 INFO sqlalchemy.engine.base.Engine Thread-518 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:39,274 DEBUG sqlalchemy.engine.base.Engine Thread-517 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:39,277 INFO sqlalchemy.engine.base.Engine Thread-519 : BEGIN (implicit)
2020-06-09 00:35:39,277 INFO sqlalchemy.engine.base.Engine Thread-518 : (1, 1)
2020-06-09 00:35:39,281 INFO sqlalchemy.engine.base.Engine Thread-520 : BEGIN (implicit)
2020-06-09 00:35:39,282 INFO sqlalchemy.engine.base.Engine Thread-519 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:39,284 INFO sqlalchemy.engine.base.Engine Thread-519 : (1, 1)
2020-06-09 00:35:39,284 INFO sqlalchemy.engine.base.Engine Thread-520 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:39,283 INFO sqlalchemy.engine.base.Engine Thread-517 : ROLLBACK
2020-06-09 00:35:39,285 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:39,286 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:39,285 DEBUG sqlalchemy.engine.base.Engine Thread-519 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:39,289 DEBUG sqlalchemy.engine.base.Engine Thread-519 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:39,288 INFO sqlalchemy.engine.base.Engine Thread-518 : ROLLBACK
2020-06-09 00:35:39,285 INFO sqlalchemy.engine.base.Engine Thread-520 : (1, 1)
2020-06-09 00:35:39,291 INFO sqlalchemy.engine.base.Engine Thread-519 : ROLLBACK
2020-06-09 00:35:39,294 DEBUG sqlalchemy.engine.base.Engine Thread-520 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:39,294 DEBUG sqlalchemy.engine.base.Engine Thread-520 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:39,297 INFO sqlalchemy.engine.base.Engine Thread-520 : ROLLBACK
2020-06-09 00:35:39,330 INFO sqlalchemy.engine.base.Engine Thread-521 : BEGIN (implicit)
2020-06-09 00:35:39,331 INFO sqlalchemy.engine.base.Engine Thread-521 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:35:39,331 INFO sqlalchemy.engine.base.Engine Thread-521 : (1, 1)
2020-06-09 00:35:39,331 DEBUG sqlalchemy.engine.base.Engine Thread-521 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:35:39,331 DEBUG sqlalchemy.engine.base.Engine Thread-521 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:35:39,334 INFO sqlalchemy.engine.base.Engine Thread-521 : ROLLBACK
2020-06-09 00:36:27,146 INFO sqlalchemy.engine.base.Engine Thread-523 : BEGIN (implicit)
2020-06-09 00:36:27,147 INFO sqlalchemy.engine.base.Engine Thread-523 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:27,148 INFO sqlalchemy.engine.base.Engine Thread-523 : (1, 1)
2020-06-09 00:36:27,148 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:27,149 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:27,153 INFO sqlalchemy.engine.base.Engine Thread-523 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:36:27,153 INFO sqlalchemy.engine.base.Engine Thread-523 : ()
2020-06-09 00:36:27,155 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:36:27,156 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,156 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,156 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:36:27,156 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,156 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,156 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,157 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,157 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,157 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,157 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:36:27,157 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:36:27,157 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:36:27,158 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,158 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:27,161 INFO sqlalchemy.engine.base.Engine Thread-523 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:36:27,162 INFO sqlalchemy.engine.base.Engine Thread-523 : ('philip',)
2020-06-09 00:36:27,162 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:36:27,163 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:36:27,163 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:36:27,163 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:36:27,163 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:36:27,163 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:36:27,163 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:36:27,163 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:36:27,189 INFO sqlalchemy.engine.base.Engine Thread-523 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:36:27,189 INFO sqlalchemy.engine.base.Engine Thread-523 : ('philip', 1, 1)
2020-06-09 00:36:27,190 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:27,190 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:27,193 INFO sqlalchemy.engine.base.Engine Thread-523 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:36:27,193 INFO sqlalchemy.engine.base.Engine Thread-523 : ('philip', 1, 1)
2020-06-09 00:36:27,194 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:27,194 DEBUG sqlalchemy.engine.base.Engine Thread-523 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:27,199 INFO sqlalchemy.engine.base.Engine Thread-523 : ROLLBACK
2020-06-09 00:36:27,439 INFO sqlalchemy.engine.base.Engine Thread-533 : BEGIN (implicit)
2020-06-09 00:36:27,440 INFO sqlalchemy.engine.base.Engine Thread-533 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:27,440 INFO sqlalchemy.engine.base.Engine Thread-533 : (1, 1)
2020-06-09 00:36:27,441 DEBUG sqlalchemy.engine.base.Engine Thread-533 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:27,441 DEBUG sqlalchemy.engine.base.Engine Thread-533 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:27,443 INFO sqlalchemy.engine.base.Engine Thread-533 : ROLLBACK
2020-06-09 00:36:27,534 INFO sqlalchemy.engine.base.Engine Thread-534 : BEGIN (implicit)
2020-06-09 00:36:27,535 INFO sqlalchemy.engine.base.Engine Thread-534 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:27,535 INFO sqlalchemy.engine.base.Engine Thread-534 : (1, 1)
2020-06-09 00:36:27,536 DEBUG sqlalchemy.engine.base.Engine Thread-534 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:27,536 DEBUG sqlalchemy.engine.base.Engine Thread-534 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:27,540 INFO sqlalchemy.engine.base.Engine Thread-535 : BEGIN (implicit)
2020-06-09 00:36:27,541 INFO sqlalchemy.engine.base.Engine Thread-535 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:27,541 INFO sqlalchemy.engine.base.Engine Thread-535 : (1, 1)
2020-06-09 00:36:27,542 INFO sqlalchemy.engine.base.Engine Thread-534 : ROLLBACK
2020-06-09 00:36:27,543 DEBUG sqlalchemy.engine.base.Engine Thread-535 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:27,543 DEBUG sqlalchemy.engine.base.Engine Thread-535 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:27,546 INFO sqlalchemy.engine.base.Engine Thread-535 : ROLLBACK
2020-06-09 00:36:27,549 INFO sqlalchemy.engine.base.Engine Thread-536 : BEGIN (implicit)
2020-06-09 00:36:27,550 INFO sqlalchemy.engine.base.Engine Thread-536 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:27,550 INFO sqlalchemy.engine.base.Engine Thread-536 : (1, 1)
2020-06-09 00:36:27,553 INFO sqlalchemy.engine.base.Engine Thread-537 : BEGIN (implicit)
2020-06-09 00:36:27,554 INFO sqlalchemy.engine.base.Engine Thread-537 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:27,555 INFO sqlalchemy.engine.base.Engine Thread-537 : (1, 1)
2020-06-09 00:36:27,555 DEBUG sqlalchemy.engine.base.Engine Thread-536 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:27,555 DEBUG sqlalchemy.engine.base.Engine Thread-536 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:27,557 DEBUG sqlalchemy.engine.base.Engine Thread-537 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:27,557 DEBUG sqlalchemy.engine.base.Engine Thread-537 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:27,559 INFO sqlalchemy.engine.base.Engine Thread-537 : ROLLBACK
2020-06-09 00:36:27,561 INFO sqlalchemy.engine.base.Engine Thread-536 : ROLLBACK
2020-06-09 00:36:54,384 INFO sqlalchemy.engine.base.Engine Thread-539 : BEGIN (implicit)
2020-06-09 00:36:54,386 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:54,386 INFO sqlalchemy.engine.base.Engine Thread-539 : (1, 1)
2020-06-09 00:36:54,387 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:54,387 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:54,392 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:36:54,392 INFO sqlalchemy.engine.base.Engine Thread-539 : ()
2020-06-09 00:36:54,394 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:36:54,395 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,395 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,396 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:36:54,396 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,396 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,396 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,397 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,397 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,397 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,398 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:36:54,398 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:36:54,398 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:36:54,398 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,398 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:36:54,402 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:36:54,402 INFO sqlalchemy.engine.base.Engine Thread-539 : ('philip',)
2020-06-09 00:36:54,403 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:36:54,404 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:36:54,404 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:36:54,404 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:36:54,404 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:36:54,404 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:36:54,404 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:36:54,404 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:36:54,433 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:36:54,433 INFO sqlalchemy.engine.base.Engine Thread-539 : ('philip', 1, 1)
2020-06-09 00:36:54,434 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:54,434 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:54,437 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:36:54,437 INFO sqlalchemy.engine.base.Engine Thread-539 : ('philip', 1, 1)
2020-06-09 00:36:54,438 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:54,438 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:54,443 INFO sqlalchemy.engine.base.Engine Thread-539 : ROLLBACK
2020-06-09 00:36:54,683 INFO sqlalchemy.engine.base.Engine Thread-549 : BEGIN (implicit)
2020-06-09 00:36:54,684 INFO sqlalchemy.engine.base.Engine Thread-549 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:54,684 INFO sqlalchemy.engine.base.Engine Thread-549 : (1, 1)
2020-06-09 00:36:54,685 DEBUG sqlalchemy.engine.base.Engine Thread-549 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:54,685 DEBUG sqlalchemy.engine.base.Engine Thread-549 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:54,687 INFO sqlalchemy.engine.base.Engine Thread-549 : ROLLBACK
2020-06-09 00:36:54,763 INFO sqlalchemy.engine.base.Engine Thread-550 : BEGIN (implicit)
2020-06-09 00:36:54,765 INFO sqlalchemy.engine.base.Engine Thread-551 : BEGIN (implicit)
2020-06-09 00:36:54,766 INFO sqlalchemy.engine.base.Engine Thread-550 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:54,768 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:54,774 INFO sqlalchemy.engine.base.Engine Thread-551 : (1, 1)
2020-06-09 00:36:54,771 INFO sqlalchemy.engine.base.Engine Thread-552 : BEGIN (implicit)
2020-06-09 00:36:54,774 INFO sqlalchemy.engine.base.Engine Thread-550 : (1, 1)
2020-06-09 00:36:54,773 INFO sqlalchemy.engine.base.Engine Thread-553 : BEGIN (implicit)
2020-06-09 00:36:54,776 INFO sqlalchemy.engine.base.Engine Thread-553 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:54,775 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:54,777 INFO sqlalchemy.engine.base.Engine Thread-553 : (1, 1)
2020-06-09 00:36:54,775 INFO sqlalchemy.engine.base.Engine Thread-552 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:36:54,777 INFO sqlalchemy.engine.base.Engine Thread-552 : (1, 1)
2020-06-09 00:36:54,777 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:54,777 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:54,780 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:54,779 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:54,778 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:36:54,781 INFO sqlalchemy.engine.base.Engine Thread-551 : ROLLBACK
2020-06-09 00:36:54,783 INFO sqlalchemy.engine.base.Engine Thread-550 : ROLLBACK
2020-06-09 00:36:54,783 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:54,784 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:36:54,786 INFO sqlalchemy.engine.base.Engine Thread-552 : ROLLBACK
2020-06-09 00:36:54,789 INFO sqlalchemy.engine.base.Engine Thread-553 : ROLLBACK
2020-06-09 00:37:24,738 INFO sqlalchemy.engine.base.Engine Thread-555 : BEGIN (implicit)
2020-06-09 00:37:24,739 INFO sqlalchemy.engine.base.Engine Thread-555 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:24,739 INFO sqlalchemy.engine.base.Engine Thread-555 : (1, 1)
2020-06-09 00:37:24,740 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:24,740 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:24,745 INFO sqlalchemy.engine.base.Engine Thread-555 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:37:24,745 INFO sqlalchemy.engine.base.Engine Thread-555 : ()
2020-06-09 00:37:24,747 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:37:24,747 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,748 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,748 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:37:24,748 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,748 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,748 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,749 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,749 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,749 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,749 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:37:24,749 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:37:24,749 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:37:24,750 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,750 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:24,754 INFO sqlalchemy.engine.base.Engine Thread-555 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:37:24,754 INFO sqlalchemy.engine.base.Engine Thread-555 : ('philip',)
2020-06-09 00:37:24,755 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:37:24,755 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:37:24,755 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:37:24,755 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:37:24,756 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:37:24,756 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:37:24,756 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:37:24,756 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:37:24,785 INFO sqlalchemy.engine.base.Engine Thread-555 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:37:24,785 INFO sqlalchemy.engine.base.Engine Thread-555 : ('philip', 1, 1)
2020-06-09 00:37:24,786 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:24,786 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:24,789 INFO sqlalchemy.engine.base.Engine Thread-555 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:37:24,789 INFO sqlalchemy.engine.base.Engine Thread-555 : ('philip', 1, 1)
2020-06-09 00:37:24,790 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:24,790 DEBUG sqlalchemy.engine.base.Engine Thread-555 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:24,795 INFO sqlalchemy.engine.base.Engine Thread-555 : ROLLBACK
2020-06-09 00:37:25,086 INFO sqlalchemy.engine.base.Engine Thread-565 : BEGIN (implicit)
2020-06-09 00:37:25,087 INFO sqlalchemy.engine.base.Engine Thread-565 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:25,087 INFO sqlalchemy.engine.base.Engine Thread-565 : (1, 1)
2020-06-09 00:37:25,088 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:25,088 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:25,090 INFO sqlalchemy.engine.base.Engine Thread-565 : ROLLBACK
2020-06-09 00:37:25,192 INFO sqlalchemy.engine.base.Engine Thread-566 : BEGIN (implicit)
2020-06-09 00:37:25,193 INFO sqlalchemy.engine.base.Engine Thread-566 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:25,193 INFO sqlalchemy.engine.base.Engine Thread-566 : (1, 1)
2020-06-09 00:37:25,197 INFO sqlalchemy.engine.base.Engine Thread-567 : BEGIN (implicit)
2020-06-09 00:37:25,197 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:25,198 INFO sqlalchemy.engine.base.Engine Thread-567 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:25,201 INFO sqlalchemy.engine.base.Engine Thread-568 : BEGIN (implicit)
2020-06-09 00:37:25,201 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:25,204 INFO sqlalchemy.engine.base.Engine Thread-569 : BEGIN (implicit)
2020-06-09 00:37:25,204 INFO sqlalchemy.engine.base.Engine Thread-567 : (1, 1)
2020-06-09 00:37:25,205 INFO sqlalchemy.engine.base.Engine Thread-568 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:25,209 INFO sqlalchemy.engine.base.Engine Thread-568 : (1, 1)
2020-06-09 00:37:25,209 INFO sqlalchemy.engine.base.Engine Thread-566 : ROLLBACK
2020-06-09 00:37:25,207 INFO sqlalchemy.engine.base.Engine Thread-569 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:25,210 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:25,211 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:25,210 INFO sqlalchemy.engine.base.Engine Thread-569 : (1, 1)
2020-06-09 00:37:25,210 DEBUG sqlalchemy.engine.base.Engine Thread-568 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:25,212 DEBUG sqlalchemy.engine.base.Engine Thread-568 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:25,214 DEBUG sqlalchemy.engine.base.Engine Thread-569 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:25,216 INFO sqlalchemy.engine.base.Engine Thread-567 : ROLLBACK
2020-06-09 00:37:25,217 INFO sqlalchemy.engine.base.Engine Thread-568 : ROLLBACK
2020-06-09 00:37:25,217 DEBUG sqlalchemy.engine.base.Engine Thread-569 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:25,220 INFO sqlalchemy.engine.base.Engine Thread-569 : ROLLBACK
2020-06-09 00:37:50,496 INFO sqlalchemy.engine.base.Engine Thread-571 : BEGIN (implicit)
2020-06-09 00:37:50,497 INFO sqlalchemy.engine.base.Engine Thread-571 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:50,497 INFO sqlalchemy.engine.base.Engine Thread-571 : (1, 1)
2020-06-09 00:37:50,498 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:50,498 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:50,503 INFO sqlalchemy.engine.base.Engine Thread-571 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:37:50,503 INFO sqlalchemy.engine.base.Engine Thread-571 : ()
2020-06-09 00:37:50,505 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:37:50,506 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,506 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,506 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:37:50,506 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,506 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,506 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,507 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,507 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,507 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,507 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:37:50,507 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:37:50,507 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:37:50,507 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,508 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:37:50,511 INFO sqlalchemy.engine.base.Engine Thread-571 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:37:50,511 INFO sqlalchemy.engine.base.Engine Thread-571 : ('philip',)
2020-06-09 00:37:50,512 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:37:50,512 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:37:50,512 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:37:50,512 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:37:50,512 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:37:50,512 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:37:50,512 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:37:50,513 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:37:50,541 INFO sqlalchemy.engine.base.Engine Thread-571 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:37:50,541 INFO sqlalchemy.engine.base.Engine Thread-571 : ('philip', 1, 1)
2020-06-09 00:37:50,542 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:50,542 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:50,545 INFO sqlalchemy.engine.base.Engine Thread-571 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:37:50,545 INFO sqlalchemy.engine.base.Engine Thread-571 : ('philip', 1, 1)
2020-06-09 00:37:50,546 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:50,546 DEBUG sqlalchemy.engine.base.Engine Thread-571 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:50,551 INFO sqlalchemy.engine.base.Engine Thread-571 : ROLLBACK
2020-06-09 00:37:50,809 INFO sqlalchemy.engine.base.Engine Thread-581 : BEGIN (implicit)
2020-06-09 00:37:50,810 INFO sqlalchemy.engine.base.Engine Thread-581 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:50,810 INFO sqlalchemy.engine.base.Engine Thread-581 : (1, 1)
2020-06-09 00:37:50,811 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:50,812 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:50,814 INFO sqlalchemy.engine.base.Engine Thread-581 : ROLLBACK
2020-06-09 00:37:50,897 INFO sqlalchemy.engine.base.Engine Thread-583 : BEGIN (implicit)
2020-06-09 00:37:50,898 INFO sqlalchemy.engine.base.Engine Thread-583 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:50,899 INFO sqlalchemy.engine.base.Engine Thread-583 : (1, 1)
2020-06-09 00:37:50,901 INFO sqlalchemy.engine.base.Engine Thread-582 : BEGIN (implicit)
2020-06-09 00:37:50,903 INFO sqlalchemy.engine.base.Engine Thread-584 : BEGIN (implicit)
2020-06-09 00:37:50,904 INFO sqlalchemy.engine.base.Engine Thread-582 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:50,907 INFO sqlalchemy.engine.base.Engine Thread-584 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:50,908 INFO sqlalchemy.engine.base.Engine Thread-585 : BEGIN (implicit)
2020-06-09 00:37:50,910 INFO sqlalchemy.engine.base.Engine Thread-585 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:37:50,909 INFO sqlalchemy.engine.base.Engine Thread-584 : (1, 1)
2020-06-09 00:37:50,909 DEBUG sqlalchemy.engine.base.Engine Thread-583 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:50,911 DEBUG sqlalchemy.engine.base.Engine Thread-583 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:50,910 INFO sqlalchemy.engine.base.Engine Thread-585 : (1, 1)
2020-06-09 00:37:50,908 INFO sqlalchemy.engine.base.Engine Thread-582 : (1, 1)
2020-06-09 00:37:50,912 DEBUG sqlalchemy.engine.base.Engine Thread-584 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:50,912 DEBUG sqlalchemy.engine.base.Engine Thread-582 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:50,913 DEBUG sqlalchemy.engine.base.Engine Thread-584 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:50,914 DEBUG sqlalchemy.engine.base.Engine Thread-585 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:37:50,915 INFO sqlalchemy.engine.base.Engine Thread-583 : ROLLBACK
2020-06-09 00:37:50,915 DEBUG sqlalchemy.engine.base.Engine Thread-582 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:50,917 INFO sqlalchemy.engine.base.Engine Thread-584 : ROLLBACK
2020-06-09 00:37:50,918 DEBUG sqlalchemy.engine.base.Engine Thread-585 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:37:50,921 INFO sqlalchemy.engine.base.Engine Thread-582 : ROLLBACK
2020-06-09 00:37:50,924 INFO sqlalchemy.engine.base.Engine Thread-585 : ROLLBACK
2020-06-09 00:38:11,375 INFO sqlalchemy.engine.base.Engine Thread-587 : BEGIN (implicit)
2020-06-09 00:38:11,376 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:11,376 INFO sqlalchemy.engine.base.Engine Thread-587 : (1, 1)
2020-06-09 00:38:11,376 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:11,377 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:11,382 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:38:11,382 INFO sqlalchemy.engine.base.Engine Thread-587 : ()
2020-06-09 00:38:11,383 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:38:11,384 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,384 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,384 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:38:11,384 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,384 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,385 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,385 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,385 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,385 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,385 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:38:11,385 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:38:11,385 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:38:11,386 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,386 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:11,388 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:38:11,389 INFO sqlalchemy.engine.base.Engine Thread-587 : ('philip',)
2020-06-09 00:38:11,389 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:38:11,390 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:38:11,390 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:38:11,390 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:38:11,390 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:38:11,390 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:38:11,390 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:38:11,390 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:38:11,416 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:38:11,416 INFO sqlalchemy.engine.base.Engine Thread-587 : ('philip', 1, 1)
2020-06-09 00:38:11,416 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:11,417 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:11,419 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:38:11,420 INFO sqlalchemy.engine.base.Engine Thread-587 : ('philip', 1, 1)
2020-06-09 00:38:11,420 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:11,420 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:11,425 INFO sqlalchemy.engine.base.Engine Thread-587 : ROLLBACK
2020-06-09 00:38:20,451 INFO sqlalchemy.engine.base.Engine Thread-597 : BEGIN (implicit)
2020-06-09 00:38:20,452 INFO sqlalchemy.engine.base.Engine Thread-597 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:20,452 INFO sqlalchemy.engine.base.Engine Thread-597 : (1, 1)
2020-06-09 00:38:20,453 DEBUG sqlalchemy.engine.base.Engine Thread-597 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:20,456 DEBUG sqlalchemy.engine.base.Engine Thread-597 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:20,460 INFO sqlalchemy.engine.base.Engine Thread-598 : BEGIN (implicit)
2020-06-09 00:38:20,461 INFO sqlalchemy.engine.base.Engine Thread-598 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:20,461 INFO sqlalchemy.engine.base.Engine Thread-598 : (1, 1)
2020-06-09 00:38:20,463 INFO sqlalchemy.engine.base.Engine Thread-597 : ROLLBACK
2020-06-09 00:38:20,464 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:20,468 INFO sqlalchemy.engine.base.Engine Thread-599 : BEGIN (implicit)
2020-06-09 00:38:20,471 INFO sqlalchemy.engine.base.Engine Thread-600 : BEGIN (implicit)
2020-06-09 00:38:20,472 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:20,473 INFO sqlalchemy.engine.base.Engine Thread-599 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:20,476 INFO sqlalchemy.engine.base.Engine Thread-599 : (1, 1)
2020-06-09 00:38:20,476 INFO sqlalchemy.engine.base.Engine Thread-598 : ROLLBACK
2020-06-09 00:38:20,474 INFO sqlalchemy.engine.base.Engine Thread-600 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:20,477 INFO sqlalchemy.engine.base.Engine Thread-600 : (1, 1)
2020-06-09 00:38:20,478 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:20,478 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:20,481 INFO sqlalchemy.engine.base.Engine Thread-599 : ROLLBACK
2020-06-09 00:38:20,481 DEBUG sqlalchemy.engine.base.Engine Thread-600 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:20,482 DEBUG sqlalchemy.engine.base.Engine Thread-600 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:20,484 INFO sqlalchemy.engine.base.Engine Thread-600 : ROLLBACK
2020-06-09 00:38:21,213 INFO sqlalchemy.engine.base.Engine Thread-601 : BEGIN (implicit)
2020-06-09 00:38:21,214 INFO sqlalchemy.engine.base.Engine Thread-601 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:21,214 INFO sqlalchemy.engine.base.Engine Thread-601 : (1, 1)
2020-06-09 00:38:21,215 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:21,215 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:21,217 INFO sqlalchemy.engine.base.Engine Thread-601 : ROLLBACK
2020-06-09 00:38:44,788 INFO sqlalchemy.engine.base.Engine Thread-603 : BEGIN (implicit)
2020-06-09 00:38:44,789 INFO sqlalchemy.engine.base.Engine Thread-603 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:44,789 INFO sqlalchemy.engine.base.Engine Thread-603 : (1, 1)
2020-06-09 00:38:44,790 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:44,790 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:44,795 INFO sqlalchemy.engine.base.Engine Thread-603 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:38:44,795 INFO sqlalchemy.engine.base.Engine Thread-603 : ()
2020-06-09 00:38:44,797 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:38:44,798 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,798 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,798 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:38:44,798 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,798 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,798 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,798 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,798 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,799 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,799 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:38:44,799 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:38:44,799 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:38:44,799 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,799 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:38:44,802 INFO sqlalchemy.engine.base.Engine Thread-603 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:38:44,802 INFO sqlalchemy.engine.base.Engine Thread-603 : ('philip',)
2020-06-09 00:38:44,803 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:38:44,804 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:38:44,804 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:38:44,804 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:38:44,804 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:38:44,804 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:38:44,804 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:38:44,804 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:38:44,830 INFO sqlalchemy.engine.base.Engine Thread-603 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:38:44,831 INFO sqlalchemy.engine.base.Engine Thread-603 : ('philip', 1, 1)
2020-06-09 00:38:44,831 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:44,832 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:44,834 INFO sqlalchemy.engine.base.Engine Thread-603 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:38:44,834 INFO sqlalchemy.engine.base.Engine Thread-603 : ('philip', 1, 1)
2020-06-09 00:38:44,835 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:44,835 DEBUG sqlalchemy.engine.base.Engine Thread-603 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:44,840 INFO sqlalchemy.engine.base.Engine Thread-603 : ROLLBACK
2020-06-09 00:38:45,098 INFO sqlalchemy.engine.base.Engine Thread-613 : BEGIN (implicit)
2020-06-09 00:38:45,099 INFO sqlalchemy.engine.base.Engine Thread-613 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:45,099 INFO sqlalchemy.engine.base.Engine Thread-613 : (1, 1)
2020-06-09 00:38:45,100 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:45,100 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:45,102 INFO sqlalchemy.engine.base.Engine Thread-613 : ROLLBACK
2020-06-09 00:38:45,188 INFO sqlalchemy.engine.base.Engine Thread-614 : BEGIN (implicit)
2020-06-09 00:38:45,189 INFO sqlalchemy.engine.base.Engine Thread-614 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:45,189 INFO sqlalchemy.engine.base.Engine Thread-614 : (1, 1)
2020-06-09 00:38:45,191 INFO sqlalchemy.engine.base.Engine Thread-615 : BEGIN (implicit)
2020-06-09 00:38:45,192 INFO sqlalchemy.engine.base.Engine Thread-615 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:45,192 INFO sqlalchemy.engine.base.Engine Thread-615 : (1, 1)
2020-06-09 00:38:45,193 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:45,193 DEBUG sqlalchemy.engine.base.Engine Thread-615 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:45,193 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:45,194 DEBUG sqlalchemy.engine.base.Engine Thread-615 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:45,197 INFO sqlalchemy.engine.base.Engine Thread-616 : BEGIN (implicit)
2020-06-09 00:38:45,200 INFO sqlalchemy.engine.base.Engine Thread-614 : ROLLBACK
2020-06-09 00:38:45,202 INFO sqlalchemy.engine.base.Engine Thread-615 : ROLLBACK
2020-06-09 00:38:45,203 INFO sqlalchemy.engine.base.Engine Thread-616 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:45,205 INFO sqlalchemy.engine.base.Engine Thread-616 : (1, 1)
2020-06-09 00:38:45,205 INFO sqlalchemy.engine.base.Engine Thread-617 : BEGIN (implicit)
2020-06-09 00:38:45,206 INFO sqlalchemy.engine.base.Engine Thread-617 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:38:45,206 INFO sqlalchemy.engine.base.Engine Thread-617 : (1, 1)
2020-06-09 00:38:45,207 DEBUG sqlalchemy.engine.base.Engine Thread-616 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:45,208 DEBUG sqlalchemy.engine.base.Engine Thread-616 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:45,210 DEBUG sqlalchemy.engine.base.Engine Thread-617 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:38:45,211 DEBUG sqlalchemy.engine.base.Engine Thread-617 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:38:45,211 INFO sqlalchemy.engine.base.Engine Thread-616 : ROLLBACK
2020-06-09 00:38:45,213 INFO sqlalchemy.engine.base.Engine Thread-617 : ROLLBACK
2020-06-09 00:39:45,430 INFO sqlalchemy.engine.base.Engine Thread-619 : BEGIN (implicit)
2020-06-09 00:39:45,431 INFO sqlalchemy.engine.base.Engine Thread-619 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:39:45,431 INFO sqlalchemy.engine.base.Engine Thread-619 : (1, 1)
2020-06-09 00:39:45,432 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:39:45,432 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:39:45,437 INFO sqlalchemy.engine.base.Engine Thread-619 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:39:45,437 INFO sqlalchemy.engine.base.Engine Thread-619 : ()
2020-06-09 00:39:45,439 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:39:45,439 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,439 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,439 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:39:45,440 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,440 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,440 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,440 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,440 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,440 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,441 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:39:45,441 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:39:45,441 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:39:45,441 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,441 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:39:45,444 INFO sqlalchemy.engine.base.Engine Thread-619 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:39:45,444 INFO sqlalchemy.engine.base.Engine Thread-619 : ('philip',)
2020-06-09 00:39:45,445 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:39:45,446 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:39:45,446 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:39:45,446 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:39:45,447 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:39:45,447 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:39:45,447 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:39:45,447 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:39:45,472 INFO sqlalchemy.engine.base.Engine Thread-619 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:39:45,472 INFO sqlalchemy.engine.base.Engine Thread-619 : ('philip', 1, 1)
2020-06-09 00:39:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:39:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:39:45,476 INFO sqlalchemy.engine.base.Engine Thread-619 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:39:45,476 INFO sqlalchemy.engine.base.Engine Thread-619 : ('philip', 1, 1)
2020-06-09 00:39:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:39:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-619 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:39:45,482 INFO sqlalchemy.engine.base.Engine Thread-619 : ROLLBACK
2020-06-09 00:39:45,714 INFO sqlalchemy.engine.base.Engine Thread-629 : BEGIN (implicit)
2020-06-09 00:39:45,715 INFO sqlalchemy.engine.base.Engine Thread-629 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:39:45,716 INFO sqlalchemy.engine.base.Engine Thread-629 : (1, 1)
2020-06-09 00:39:45,716 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:39:45,717 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:39:45,719 INFO sqlalchemy.engine.base.Engine Thread-629 : ROLLBACK
2020-06-09 00:39:45,793 INFO sqlalchemy.engine.base.Engine Thread-630 : BEGIN (implicit)
2020-06-09 00:39:45,796 INFO sqlalchemy.engine.base.Engine Thread-631 : BEGIN (implicit)
2020-06-09 00:39:45,797 INFO sqlalchemy.engine.base.Engine Thread-630 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:39:45,805 INFO sqlalchemy.engine.base.Engine Thread-630 : (1, 1)
2020-06-09 00:39:45,803 INFO sqlalchemy.engine.base.Engine Thread-631 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:39:45,805 INFO sqlalchemy.engine.base.Engine Thread-631 : (1, 1)
2020-06-09 00:39:45,805 INFO sqlalchemy.engine.base.Engine Thread-633 : BEGIN (implicit)
2020-06-09 00:39:45,801 INFO sqlalchemy.engine.base.Engine Thread-632 : BEGIN (implicit)
2020-06-09 00:39:45,806 DEBUG sqlalchemy.engine.base.Engine Thread-630 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:39:45,806 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:39:45,807 INFO sqlalchemy.engine.base.Engine Thread-633 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:39:45,809 INFO sqlalchemy.engine.base.Engine Thread-632 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:39:45,809 DEBUG sqlalchemy.engine.base.Engine Thread-630 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:39:45,809 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:39:45,809 INFO sqlalchemy.engine.base.Engine Thread-633 : (1, 1)
2020-06-09 00:39:45,810 INFO sqlalchemy.engine.base.Engine Thread-632 : (1, 1)
2020-06-09 00:39:45,812 DEBUG sqlalchemy.engine.base.Engine Thread-632 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:39:45,812 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:39:45,816 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:39:45,814 DEBUG sqlalchemy.engine.base.Engine Thread-632 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:39:45,816 INFO sqlalchemy.engine.base.Engine Thread-631 : ROLLBACK
2020-06-09 00:39:45,813 INFO sqlalchemy.engine.base.Engine Thread-630 : ROLLBACK
2020-06-09 00:39:45,818 INFO sqlalchemy.engine.base.Engine Thread-633 : ROLLBACK
2020-06-09 00:39:45,820 INFO sqlalchemy.engine.base.Engine Thread-632 : ROLLBACK
2020-06-09 00:42:25,754 INFO sqlalchemy.engine.base.Engine Thread-635 : BEGIN (implicit)
2020-06-09 00:42:25,755 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:42:25,756 INFO sqlalchemy.engine.base.Engine Thread-635 : (1, 1)
2020-06-09 00:42:25,757 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:42:25,757 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:42:25,761 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:42:25,761 INFO sqlalchemy.engine.base.Engine Thread-635 : ()
2020-06-09 00:42:25,763 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:42:25,764 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,764 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,764 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:42:25,764 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,764 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,764 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,765 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,765 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,765 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,765 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:42:25,765 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:42:25,765 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:42:25,766 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,766 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:42:25,770 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:42:25,770 INFO sqlalchemy.engine.base.Engine Thread-635 : ('philip',)
2020-06-09 00:42:25,771 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:42:25,771 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:42:25,771 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:42:25,771 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:42:25,772 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:42:25,772 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:42:25,772 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:42:25,772 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:42:25,799 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:42:25,800 INFO sqlalchemy.engine.base.Engine Thread-635 : ('philip', 1, 1)
2020-06-09 00:42:25,800 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:42:25,801 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:42:25,804 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:42:25,804 INFO sqlalchemy.engine.base.Engine Thread-635 : ('philip', 1, 1)
2020-06-09 00:42:25,805 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:42:25,805 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:42:25,810 INFO sqlalchemy.engine.base.Engine Thread-635 : ROLLBACK
2020-06-09 00:42:26,059 INFO sqlalchemy.engine.base.Engine Thread-645 : BEGIN (implicit)
2020-06-09 00:42:26,060 INFO sqlalchemy.engine.base.Engine Thread-645 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:42:26,060 INFO sqlalchemy.engine.base.Engine Thread-645 : (1, 1)
2020-06-09 00:42:26,061 DEBUG sqlalchemy.engine.base.Engine Thread-645 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:42:26,061 DEBUG sqlalchemy.engine.base.Engine Thread-645 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:42:26,063 INFO sqlalchemy.engine.base.Engine Thread-645 : ROLLBACK
2020-06-09 00:42:26,153 INFO sqlalchemy.engine.base.Engine Thread-646 : BEGIN (implicit)
2020-06-09 00:42:26,154 INFO sqlalchemy.engine.base.Engine Thread-646 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:42:26,154 INFO sqlalchemy.engine.base.Engine Thread-646 : (1, 1)
2020-06-09 00:42:26,157 INFO sqlalchemy.engine.base.Engine Thread-647 : BEGIN (implicit)
2020-06-09 00:42:26,158 INFO sqlalchemy.engine.base.Engine Thread-647 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:42:26,158 INFO sqlalchemy.engine.base.Engine Thread-647 : (1, 1)
2020-06-09 00:42:26,158 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:42:26,159 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:42:26,159 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:42:26,160 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:42:26,163 INFO sqlalchemy.engine.base.Engine Thread-647 : ROLLBACK
2020-06-09 00:42:26,164 INFO sqlalchemy.engine.base.Engine Thread-646 : ROLLBACK
2020-06-09 00:42:26,169 INFO sqlalchemy.engine.base.Engine Thread-648 : BEGIN (implicit)
2020-06-09 00:42:26,170 INFO sqlalchemy.engine.base.Engine Thread-648 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:42:26,171 INFO sqlalchemy.engine.base.Engine Thread-648 : (1, 1)
2020-06-09 00:42:26,172 DEBUG sqlalchemy.engine.base.Engine Thread-648 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:42:26,174 INFO sqlalchemy.engine.base.Engine Thread-649 : BEGIN (implicit)
2020-06-09 00:42:26,174 DEBUG sqlalchemy.engine.base.Engine Thread-648 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:42:26,176 INFO sqlalchemy.engine.base.Engine Thread-649 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:42:26,176 INFO sqlalchemy.engine.base.Engine Thread-649 : (1, 1)
2020-06-09 00:42:26,178 INFO sqlalchemy.engine.base.Engine Thread-648 : ROLLBACK
2020-06-09 00:42:26,179 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:42:26,180 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:42:26,182 INFO sqlalchemy.engine.base.Engine Thread-649 : ROLLBACK
2020-06-09 00:43:27,558 INFO sqlalchemy.engine.base.Engine Thread-651 : BEGIN (implicit)
2020-06-09 00:43:27,560 INFO sqlalchemy.engine.base.Engine Thread-651 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:43:27,560 INFO sqlalchemy.engine.base.Engine Thread-651 : (1, 1)
2020-06-09 00:43:27,561 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:43:27,561 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:43:27,565 INFO sqlalchemy.engine.base.Engine Thread-651 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:43:27,566 INFO sqlalchemy.engine.base.Engine Thread-651 : ()
2020-06-09 00:43:27,568 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:43:27,568 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,568 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,569 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:43:27,569 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,569 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,569 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,569 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,570 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,570 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,570 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:43:27,570 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:43:27,570 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:43:27,570 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,570 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:43:27,574 INFO sqlalchemy.engine.base.Engine Thread-651 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:43:27,574 INFO sqlalchemy.engine.base.Engine Thread-651 : ('philip',)
2020-06-09 00:43:27,575 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:43:27,575 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:43:27,575 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:43:27,576 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:43:27,576 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:43:27,576 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:43:27,576 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:43:27,576 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:43:27,607 INFO sqlalchemy.engine.base.Engine Thread-651 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:43:27,607 INFO sqlalchemy.engine.base.Engine Thread-651 : ('philip', 1, 1)
2020-06-09 00:43:27,608 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:43:27,608 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:43:27,611 INFO sqlalchemy.engine.base.Engine Thread-651 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:43:27,611 INFO sqlalchemy.engine.base.Engine Thread-651 : ('philip', 1, 1)
2020-06-09 00:43:27,612 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:43:27,612 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:43:27,617 INFO sqlalchemy.engine.base.Engine Thread-651 : ROLLBACK
2020-06-09 00:43:27,880 INFO sqlalchemy.engine.base.Engine Thread-661 : BEGIN (implicit)
2020-06-09 00:43:27,881 INFO sqlalchemy.engine.base.Engine Thread-661 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:43:27,881 INFO sqlalchemy.engine.base.Engine Thread-661 : (1, 1)
2020-06-09 00:43:27,882 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:43:27,883 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:43:27,885 INFO sqlalchemy.engine.base.Engine Thread-661 : ROLLBACK
2020-06-09 00:43:27,979 INFO sqlalchemy.engine.base.Engine Thread-662 : BEGIN (implicit)
2020-06-09 00:43:27,980 INFO sqlalchemy.engine.base.Engine Thread-662 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:43:27,980 INFO sqlalchemy.engine.base.Engine Thread-662 : (1, 1)
2020-06-09 00:43:27,983 INFO sqlalchemy.engine.base.Engine Thread-663 : BEGIN (implicit)
2020-06-09 00:43:27,984 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:43:27,987 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:43:27,985 INFO sqlalchemy.engine.base.Engine Thread-663 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:43:27,989 INFO sqlalchemy.engine.base.Engine Thread-664 : BEGIN (implicit)
2020-06-09 00:43:27,993 INFO sqlalchemy.engine.base.Engine Thread-665 : BEGIN (implicit)
2020-06-09 00:43:27,996 INFO sqlalchemy.engine.base.Engine Thread-665 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:43:27,996 INFO sqlalchemy.engine.base.Engine Thread-665 : (1, 1)
2020-06-09 00:43:27,995 INFO sqlalchemy.engine.base.Engine Thread-664 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:43:27,994 INFO sqlalchemy.engine.base.Engine Thread-662 : ROLLBACK
2020-06-09 00:43:27,994 INFO sqlalchemy.engine.base.Engine Thread-663 : (1, 1)
2020-06-09 00:43:27,997 INFO sqlalchemy.engine.base.Engine Thread-664 : (1, 1)
2020-06-09 00:43:27,998 DEBUG sqlalchemy.engine.base.Engine Thread-665 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:43:27,998 DEBUG sqlalchemy.engine.base.Engine Thread-664 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:43:27,999 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:43:28,000 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:43:28,000 DEBUG sqlalchemy.engine.base.Engine Thread-664 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:43:27,999 DEBUG sqlalchemy.engine.base.Engine Thread-665 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:43:28,004 INFO sqlalchemy.engine.base.Engine Thread-664 : ROLLBACK
2020-06-09 00:43:28,005 INFO sqlalchemy.engine.base.Engine Thread-665 : ROLLBACK
2020-06-09 00:43:28,007 INFO sqlalchemy.engine.base.Engine Thread-663 : ROLLBACK
2020-06-09 00:44:02,268 INFO sqlalchemy.engine.base.Engine Thread-667 : BEGIN (implicit)
2020-06-09 00:44:02,270 INFO sqlalchemy.engine.base.Engine Thread-667 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:44:02,270 INFO sqlalchemy.engine.base.Engine Thread-667 : (1, 1)
2020-06-09 00:44:02,270 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:44:02,271 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:44:02,275 INFO sqlalchemy.engine.base.Engine Thread-667 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:44:02,275 INFO sqlalchemy.engine.base.Engine Thread-667 : ()
2020-06-09 00:44:02,277 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:44:02,277 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,277 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,277 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:44:02,277 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,278 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,278 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,278 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,278 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,278 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,278 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:44:02,278 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:44:02,279 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:44:02,279 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,279 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:44:02,282 INFO sqlalchemy.engine.base.Engine Thread-667 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:44:02,282 INFO sqlalchemy.engine.base.Engine Thread-667 : ('philip',)
2020-06-09 00:44:02,283 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:44:02,284 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:44:02,284 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:44:02,284 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:44:02,284 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:44:02,284 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:44:02,284 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:44:02,284 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:44:02,313 INFO sqlalchemy.engine.base.Engine Thread-667 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:44:02,313 INFO sqlalchemy.engine.base.Engine Thread-667 : ('philip', 1, 1)
2020-06-09 00:44:02,314 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:44:02,314 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:44:02,317 INFO sqlalchemy.engine.base.Engine Thread-667 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:44:02,317 INFO sqlalchemy.engine.base.Engine Thread-667 : ('philip', 1, 1)
2020-06-09 00:44:02,318 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:44:02,318 DEBUG sqlalchemy.engine.base.Engine Thread-667 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:44:02,323 INFO sqlalchemy.engine.base.Engine Thread-667 : ROLLBACK
2020-06-09 00:44:02,580 INFO sqlalchemy.engine.base.Engine Thread-677 : BEGIN (implicit)
2020-06-09 00:44:02,581 INFO sqlalchemy.engine.base.Engine Thread-677 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:44:02,581 INFO sqlalchemy.engine.base.Engine Thread-677 : (1, 1)
2020-06-09 00:44:02,581 DEBUG sqlalchemy.engine.base.Engine Thread-677 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:44:02,582 DEBUG sqlalchemy.engine.base.Engine Thread-677 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:44:02,584 INFO sqlalchemy.engine.base.Engine Thread-677 : ROLLBACK
2020-06-09 00:44:02,692 INFO sqlalchemy.engine.base.Engine Thread-678 : BEGIN (implicit)
2020-06-09 00:44:02,695 INFO sqlalchemy.engine.base.Engine Thread-679 : BEGIN (implicit)
2020-06-09 00:44:02,696 INFO sqlalchemy.engine.base.Engine Thread-678 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:44:02,697 INFO sqlalchemy.engine.base.Engine Thread-679 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:44:02,703 INFO sqlalchemy.engine.base.Engine Thread-679 : (1, 1)
2020-06-09 00:44:02,701 INFO sqlalchemy.engine.base.Engine Thread-678 : (1, 1)
2020-06-09 00:44:02,703 INFO sqlalchemy.engine.base.Engine Thread-681 : BEGIN (implicit)
2020-06-09 00:44:02,700 INFO sqlalchemy.engine.base.Engine Thread-680 : BEGIN (implicit)
2020-06-09 00:44:02,704 INFO sqlalchemy.engine.base.Engine Thread-681 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:44:02,706 INFO sqlalchemy.engine.base.Engine Thread-681 : (1, 1)
2020-06-09 00:44:02,706 DEBUG sqlalchemy.engine.base.Engine Thread-679 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:44:02,706 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:44:02,707 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:44:02,707 DEBUG sqlalchemy.engine.base.Engine Thread-679 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:44:02,705 INFO sqlalchemy.engine.base.Engine Thread-680 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:44:02,710 INFO sqlalchemy.engine.base.Engine Thread-678 : ROLLBACK
2020-06-09 00:44:02,712 INFO sqlalchemy.engine.base.Engine Thread-679 : ROLLBACK
2020-06-09 00:44:02,712 INFO sqlalchemy.engine.base.Engine Thread-680 : (1, 1)
2020-06-09 00:44:02,712 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:44:02,713 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:44:02,716 INFO sqlalchemy.engine.base.Engine Thread-681 : ROLLBACK
2020-06-09 00:44:02,717 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:44:02,717 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:44:02,720 INFO sqlalchemy.engine.base.Engine Thread-680 : ROLLBACK
2020-06-09 00:45:04,040 INFO sqlalchemy.engine.base.Engine Thread-683 : BEGIN (implicit)
2020-06-09 00:45:04,042 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:45:04,042 INFO sqlalchemy.engine.base.Engine Thread-683 : (1, 1)
2020-06-09 00:45:04,043 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:45:04,043 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:45:04,047 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-09 00:45:04,047 INFO sqlalchemy.engine.base.Engine Thread-683 : ()
2020-06-09 00:45:04,049 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-09 00:45:04,050 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,050 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,050 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:45:04,050 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,050 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,051 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,051 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,051 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,051 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,051 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:45:04,051 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:45:04,051 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-09 00:45:04,052 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,052 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-09 00:45:04,055 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-09 00:45:04,055 INFO sqlalchemy.engine.base.Engine Thread-683 : ('philip',)
2020-06-09 00:45:04,056 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-09 00:45:04,056 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-09 00:45:04,057 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-09 00:45:04,057 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-09 00:45:04,057 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-09 00:45:04,057 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-09 00:45:04,057 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-09 00:45:04,057 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-09 00:45:04,085 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:45:04,085 INFO sqlalchemy.engine.base.Engine Thread-683 : ('philip', 1, 1)
2020-06-09 00:45:04,086 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:45:04,086 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:45:04,089 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-09 00:45:04,089 INFO sqlalchemy.engine.base.Engine Thread-683 : ('philip', 1, 1)
2020-06-09 00:45:04,090 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:45:04,090 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:45:04,095 INFO sqlalchemy.engine.base.Engine Thread-683 : ROLLBACK
2020-06-09 00:45:04,329 INFO sqlalchemy.engine.base.Engine Thread-693 : BEGIN (implicit)
2020-06-09 00:45:04,331 INFO sqlalchemy.engine.base.Engine Thread-693 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:45:04,331 INFO sqlalchemy.engine.base.Engine Thread-693 : (1, 1)
2020-06-09 00:45:04,331 DEBUG sqlalchemy.engine.base.Engine Thread-693 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:45:04,332 DEBUG sqlalchemy.engine.base.Engine Thread-693 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:45:04,334 INFO sqlalchemy.engine.base.Engine Thread-693 : ROLLBACK
2020-06-09 00:45:04,408 INFO sqlalchemy.engine.base.Engine Thread-694 : BEGIN (implicit)
2020-06-09 00:45:04,409 INFO sqlalchemy.engine.base.Engine Thread-694 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:45:04,409 INFO sqlalchemy.engine.base.Engine Thread-694 : (1, 1)
2020-06-09 00:45:04,412 INFO sqlalchemy.engine.base.Engine Thread-695 : BEGIN (implicit)
2020-06-09 00:45:04,414 INFO sqlalchemy.engine.base.Engine Thread-695 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:45:04,414 INFO sqlalchemy.engine.base.Engine Thread-695 : (1, 1)
2020-06-09 00:45:04,415 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:45:04,415 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:45:04,420 INFO sqlalchemy.engine.base.Engine Thread-696 : BEGIN (implicit)
2020-06-09 00:45:04,421 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:45:04,422 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:45:04,423 INFO sqlalchemy.engine.base.Engine Thread-696 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:45:04,430 INFO sqlalchemy.engine.base.Engine Thread-696 : (1, 1)
2020-06-09 00:45:04,428 INFO sqlalchemy.engine.base.Engine Thread-694 : ROLLBACK
2020-06-09 00:45:04,431 INFO sqlalchemy.engine.base.Engine Thread-695 : ROLLBACK
2020-06-09 00:45:04,427 INFO sqlalchemy.engine.base.Engine Thread-697 : BEGIN (implicit)
2020-06-09 00:45:04,433 INFO sqlalchemy.engine.base.Engine Thread-697 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-09 00:45:04,433 INFO sqlalchemy.engine.base.Engine Thread-697 : (1, 1)
2020-06-09 00:45:04,434 DEBUG sqlalchemy.engine.base.Engine Thread-696 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:45:04,435 DEBUG sqlalchemy.engine.base.Engine Thread-696 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:45:04,437 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-09 00:45:04,438 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-09 00:45:04,440 INFO sqlalchemy.engine.base.Engine Thread-697 : ROLLBACK
2020-06-09 00:45:04,441 INFO sqlalchemy.engine.base.Engine Thread-696 : ROLLBACK
