2020-05-29 00:31:07,641 INFO sqlalchemy.engine.base.Engine Thread-268 : BEGIN (implicit)
2020-05-29 00:31:07,644 INFO sqlalchemy.engine.base.Engine Thread-268 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-29 00:31:07,644 INFO sqlalchemy.engine.base.Engine Thread-268 : (1, 1)
2020-05-29 00:31:07,645 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:07,646 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:07,648 INFO sqlalchemy.engine.base.Engine Thread-268 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-29 00:31:07,648 INFO sqlalchemy.engine.base.Engine Thread-268 : ('philip', 1, 1)
2020-05-29 00:31:07,649 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:07,649 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:07,666 INFO sqlalchemy.engine.base.Engine Thread-268 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-29 00:31:07,666 INFO sqlalchemy.engine.base.Engine Thread-268 : ('philip', 1, 1)
2020-05-29 00:31:07,666 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:07,667 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:07,669 INFO sqlalchemy.engine.base.Engine Thread-268 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.id ASC
2020-05-29 00:31:07,669 INFO sqlalchemy.engine.base.Engine Thread-268 : ()
2020-05-29 00:31:07,670 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-05-29 00:31:07,670 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-05-29 00:31:07,670 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-05-29 00:31:07,670 DEBUG sqlalchemy.engine.base.Engine Thread-268 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-05-29 00:31:07,671 INFO sqlalchemy.engine.base.Engine Thread-268 : ROLLBACK
2020-05-29 00:31:10,008 INFO sqlalchemy.engine.base.Engine Thread-278 : BEGIN (implicit)
2020-05-29 00:31:10,009 INFO sqlalchemy.engine.base.Engine Thread-278 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-29 00:31:10,009 INFO sqlalchemy.engine.base.Engine Thread-278 : (1, 1)
2020-05-29 00:31:10,010 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:10,010 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:10,013 INFO sqlalchemy.engine.base.Engine Thread-278 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-29 00:31:10,013 INFO sqlalchemy.engine.base.Engine Thread-278 : ('philip', 1, 1)
2020-05-29 00:31:10,014 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:10,014 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:10,024 INFO sqlalchemy.engine.base.Engine Thread-278 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-05-29 00:31:10,024 INFO sqlalchemy.engine.base.Engine Thread-278 : ()
2020-05-29 00:31:10,025 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-05-29 00:31:10,025 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-05-29 00:31:10,025 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-05-29 00:31:10,025 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-05-29 00:31:10,026 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-05-29 00:31:10,026 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-05-29 00:31:10,026 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-05-29 00:31:10,026 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (20, 'HAP Locked', 'GBR', datetime.datetime(2020, 5, 29, 0, 0), datetime.datetime(2020, 5, 29, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-05-29 00:31:10,026 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-05-29 00:31:10,026 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-05-29 00:31:10,026 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-05-29 00:31:10,026 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-05-29 00:31:10,031 INFO sqlalchemy.engine.base.Engine Thread-278 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-29 00:31:10,031 INFO sqlalchemy.engine.base.Engine Thread-278 : ('philip', 1, 1)
2020-05-29 00:31:10,032 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:10,032 DEBUG sqlalchemy.engine.base.Engine Thread-278 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:10,035 INFO sqlalchemy.engine.base.Engine Thread-278 : ROLLBACK
2020-05-29 00:31:12,010 INFO sqlalchemy.engine.base.Engine Thread-288 : BEGIN (implicit)
2020-05-29 00:31:12,011 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-29 00:31:12,011 INFO sqlalchemy.engine.base.Engine Thread-288 : (1, 1)
2020-05-29 00:31:12,012 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:12,013 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:12,015 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-29 00:31:12,015 INFO sqlalchemy.engine.base.Engine Thread-288 : ('philip', 1, 1)
2020-05-29 00:31:12,015 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:12,016 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:12,017 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-29 00:31:12,017 INFO sqlalchemy.engine.base.Engine Thread-288 : ('12', 1)
2020-05-29 00:31:12,018 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-29 00:31:12,018 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 130, '1', 106)
2020-05-29 00:31:12,020 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-29 00:31:12,020 INFO sqlalchemy.engine.base.Engine Thread-288 : (82,)
2020-05-29 00:31:12,021 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-29 00:31:12,021 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-29 00:31:12,021 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-29 00:31:12,021 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-29 00:31:12,022 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-29 00:31:12,023 INFO sqlalchemy.engine.base.Engine Thread-288 : (1,)
2020-05-29 00:31:12,023 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-29 00:31:12,023 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-29 00:31:12,023 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-29 00:31:12,024 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-29 00:31:12,025 INFO sqlalchemy.engine.base.Engine Thread-288 : ()
2020-05-29 00:31:12,025 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-29 00:31:12,025 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-29 00:31:12,025 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-29 00:31:12,027 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-29 00:31:12,027 INFO sqlalchemy.engine.base.Engine Thread-288 : (127,)
2020-05-29 00:31:12,027 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-29 00:31:12,027 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-05-29 00:31:12,027 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-05-29 00:31:12,028 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-05-29 00:31:12,028 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-05-29 00:31:12,029 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-29 00:31:12,029 INFO sqlalchemy.engine.base.Engine Thread-288 : (105,)
2020-05-29 00:31:12,029 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-29 00:31:12,030 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-29 00:31:12,030 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-29 00:31:12,034 INFO sqlalchemy.engine.base.Engine Thread-288 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-29 00:31:12,034 INFO sqlalchemy.engine.base.Engine Thread-288 : ('philip', 1, 1)
2020-05-29 00:31:12,035 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 00:31:12,035 DEBUG sqlalchemy.engine.base.Engine Thread-288 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 00:31:12,038 INFO sqlalchemy.engine.base.Engine Thread-288 : ROLLBACK
2020-05-29 15:10:47,517 INFO sqlalchemy.engine.base.Engine Thread-304 : BEGIN (implicit)
2020-05-29 15:10:47,520 INFO sqlalchemy.engine.base.Engine Thread-304 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-29 15:10:47,520 INFO sqlalchemy.engine.base.Engine Thread-304 : ()
2020-05-29 15:10:47,523 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-29 15:10:47,523 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-29 15:10:47,523 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-29 15:10:47,525 INFO sqlalchemy.engine.base.Engine Thread-304 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-29 15:10:47,525 INFO sqlalchemy.engine.base.Engine Thread-304 : (100,)
2020-05-29 15:10:47,526 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-29 15:10:47,526 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-29 15:10:47,526 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-29 15:10:47,526 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-29 15:10:47,526 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-29 15:10:47,526 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-29 15:10:47,529 INFO sqlalchemy.engine.base.Engine Thread-304 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-29 15:10:47,529 INFO sqlalchemy.engine.base.Engine Thread-304 : (1, 1)
2020-05-29 15:10:47,529 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 15:10:47,530 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 15:10:47,534 INFO sqlalchemy.engine.base.Engine Thread-304 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-29 15:10:47,534 INFO sqlalchemy.engine.base.Engine Thread-304 : ('philip', 1, 1)
2020-05-29 15:10:47,535 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-29 15:10:47,535 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-29 15:10:47,537 INFO sqlalchemy.engine.base.Engine Thread-304 : ROLLBACK
2020-05-29 15:10:47,847 INFO sqlalchemy.engine.base.Engine Thread-328 : BEGIN (implicit)
2020-05-29 15:10:47,848 INFO sqlalchemy.engine.base.Engine Thread-328 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-05-29 15:10:47,848 INFO sqlalchemy.engine.base.Engine Thread-328 : ('Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 15:10:47,849 DEBUG sqlalchemy.engine.base.Engine Thread-328 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-05-29 15:10:47,850 DEBUG sqlalchemy.engine.base.Engine Thread-328 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 15:10:47,850 DEBUG sqlalchemy.engine.base.Engine Thread-328 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-05-29 15:10:47,850 DEBUG sqlalchemy.engine.base.Engine Thread-328 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-05-29 15:10:47,850 DEBUG sqlalchemy.engine.base.Engine Thread-328 : Row (datetime.datetime(2020, 5, 29, 0, 0), datetime.datetime(2020, 5, 29, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 15:10:47,854 INFO sqlalchemy.engine.base.Engine Thread-328 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-29 15:10:47,855 INFO sqlalchemy.engine.base.Engine Thread-328 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 15:10:47,855 DEBUG sqlalchemy.engine.base.Engine Thread-328 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 15:10:47,860 INFO sqlalchemy.engine.base.Engine Thread-328 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-29 15:10:47,860 INFO sqlalchemy.engine.base.Engine Thread-328 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 15:10:47,861 DEBUG sqlalchemy.engine.base.Engine Thread-328 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 15:10:47,861 DEBUG sqlalchemy.engine.base.Engine Thread-328 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-29 15:10:47,862 INFO sqlalchemy.engine.base.Engine Thread-328 : ROLLBACK
2020-05-29 15:10:47,890 INFO sqlalchemy.engine.base.Engine Thread-329 : BEGIN (implicit)
2020-05-29 15:10:47,891 INFO sqlalchemy.engine.base.Engine Thread-329 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-05-29 15:10:47,892 INFO sqlalchemy.engine.base.Engine Thread-329 : ('Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 15:10:47,892 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-05-29 15:10:47,893 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 15:10:47,893 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-05-29 15:10:47,893 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-05-29 15:10:47,893 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Row (datetime.datetime(2020, 5, 29, 0, 0), datetime.datetime(2020, 5, 29, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 15:10:47,897 INFO sqlalchemy.engine.base.Engine Thread-329 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-29 15:10:47,897 INFO sqlalchemy.engine.base.Engine Thread-329 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 15:10:47,898 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 15:10:47,902 INFO sqlalchemy.engine.base.Engine Thread-329 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-29 15:10:47,902 INFO sqlalchemy.engine.base.Engine Thread-329 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 15:10:47,903 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 15:10:47,903 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-29 15:10:47,904 INFO sqlalchemy.engine.base.Engine Thread-329 : ROLLBACK
2020-05-29 16:36:52,574 INFO sqlalchemy.engine.base.Engine Thread-330 : BEGIN (implicit)
2020-05-29 16:36:52,576 INFO sqlalchemy.engine.base.Engine Thread-330 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-05-29 16:36:52,576 INFO sqlalchemy.engine.base.Engine Thread-330 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-05-29 16:36:52,578 DEBUG sqlalchemy.engine.base.Engine Thread-330 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-05-29 16:36:52,582 INFO sqlalchemy.engine.base.Engine Thread-330 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-29 16:36:52,582 INFO sqlalchemy.engine.base.Engine Thread-330 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-05-29 16:36:52,583 DEBUG sqlalchemy.engine.base.Engine Thread-330 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 16:36:52,589 INFO sqlalchemy.engine.base.Engine Thread-330 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-29 16:36:52,589 INFO sqlalchemy.engine.base.Engine Thread-330 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-05-29 16:36:52,590 DEBUG sqlalchemy.engine.base.Engine Thread-330 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 16:36:52,591 INFO sqlalchemy.engine.base.Engine Thread-330 : ROLLBACK
2020-05-29 16:36:53,104 INFO sqlalchemy.engine.base.Engine Thread-331 : BEGIN (implicit)
2020-05-29 16:36:53,106 INFO sqlalchemy.engine.base.Engine Thread-331 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-05-29 16:36:53,106 INFO sqlalchemy.engine.base.Engine Thread-331 : ('Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 16:36:53,107 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-05-29 16:36:53,107 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 16:36:53,107 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-05-29 16:36:53,108 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-05-29 16:36:53,108 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Row (datetime.datetime(2020, 5, 29, 0, 0), datetime.datetime(2020, 5, 29, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 16:36:53,112 INFO sqlalchemy.engine.base.Engine Thread-331 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-29 16:36:53,112 INFO sqlalchemy.engine.base.Engine Thread-331 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 16:36:53,112 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 16:36:53,120 INFO sqlalchemy.engine.base.Engine Thread-331 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-29 16:36:53,120 INFO sqlalchemy.engine.base.Engine Thread-331 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 16:36:53,121 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 16:36:53,121 DEBUG sqlalchemy.engine.base.Engine Thread-331 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-29 16:36:53,122 INFO sqlalchemy.engine.base.Engine Thread-331 : ROLLBACK
2020-05-29 16:36:53,542 INFO sqlalchemy.engine.base.Engine Thread-332 : BEGIN (implicit)
2020-05-29 16:36:53,544 INFO sqlalchemy.engine.base.Engine Thread-332 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-05-29 16:36:53,544 INFO sqlalchemy.engine.base.Engine Thread-332 : ('Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-29 16:36:53,545 DEBUG sqlalchemy.engine.base.Engine Thread-332 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-05-29 16:36:53,545 DEBUG sqlalchemy.engine.base.Engine Thread-332 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-05-29 16:36:53,545 DEBUG sqlalchemy.engine.base.Engine Thread-332 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 16:36:53,545 DEBUG sqlalchemy.engine.base.Engine Thread-332 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-05-29 16:36:53,549 INFO sqlalchemy.engine.base.Engine Thread-332 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-29 16:36:53,549 INFO sqlalchemy.engine.base.Engine Thread-332 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-29 16:36:53,550 DEBUG sqlalchemy.engine.base.Engine Thread-332 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 16:36:53,554 INFO sqlalchemy.engine.base.Engine Thread-332 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-29 16:36:53,554 INFO sqlalchemy.engine.base.Engine Thread-332 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-29 16:36:53,555 DEBUG sqlalchemy.engine.base.Engine Thread-332 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 16:36:53,556 INFO sqlalchemy.engine.base.Engine Thread-332 : ROLLBACK
2020-05-29 23:00:28,181 INFO sqlalchemy.engine.base.Engine Thread-337 : BEGIN (implicit)
2020-05-29 23:00:28,183 INFO sqlalchemy.engine.base.Engine Thread-337 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-05-29 23:00:28,183 INFO sqlalchemy.engine.base.Engine Thread-337 : ('Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 23:00:28,185 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-05-29 23:00:28,185 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 23:00:28,185 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-05-29 23:00:28,185 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-05-29 23:00:28,185 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (datetime.datetime(2020, 5, 29, 0, 0), datetime.datetime(2020, 5, 29, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-05-29 23:00:28,189 INFO sqlalchemy.engine.base.Engine Thread-337 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-29 23:00:28,190 INFO sqlalchemy.engine.base.Engine Thread-337 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 23:00:28,191 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 23:00:28,194 INFO sqlalchemy.engine.base.Engine Thread-337 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-29 23:00:28,194 INFO sqlalchemy.engine.base.Engine Thread-337 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-29 23:00:28,195 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-29 23:00:28,195 DEBUG sqlalchemy.engine.base.Engine Thread-337 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-29 23:00:28,197 INFO sqlalchemy.engine.base.Engine Thread-337 : ROLLBACK
