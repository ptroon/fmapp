2020-06-13 11:10:15,746 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 11:10:15,748 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 11:10:15,749 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 11:10:15,750 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 11:10:15,750 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 11:10:15,750 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 11:10:15,751 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 11:10:15,751 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 11:10:15,751 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 11:10:15,751 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 11:10:15,752 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 11:10:15,752 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 11:10:15,752 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 11:10:15,752 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 11:10:15,753 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 11:10:15,753 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 11:10:15,754 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 11:10:15,754 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 11:10:15,755 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 11:10:15,755 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 11:10:15,756 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 11:10:15,756 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 11:10:15,756 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 11:10:15,762 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 11:10:15,762 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 11:10:15,764 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 11:10:15,764 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 11:10:15,764 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 11:10:15,767 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 11:10:15,767 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 11:10:15,767 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 11:10:15,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 11:10:15,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 11:10:15,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 11:10:15,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 11:10:15,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 11:10:15,772 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 11:10:15,772 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 11:10:15,773 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 11:10:15,773 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 11:10:15,844 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 11:10:15,845 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 11:10:15,845 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 11:10:15,846 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 11:10:15,849 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 11:10:16,851 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-13 11:10:16,853 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 11:10:16,853 INFO sqlalchemy.engine.base.Engine Thread-26 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 11:10:16,854 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 11:10:16,855 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event')
2020-06-13 11:10:16,855 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event')
2020-06-13 11:10:16,855 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 11:10:16,855 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event')
2020-06-13 11:10:16,855 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 11:10:16,855 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 11:10:16,860 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 11:10:16,860 INFO sqlalchemy.engine.base.Engine Thread-26 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 11:10:16,861 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'style', 'textColor', 'eventType')
2020-06-13 11:10:16,866 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 11:10:16,866 INFO sqlalchemy.engine.base.Engine Thread-26 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 11:10:16,867 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'style', 'textColor', 'eventType')
2020-06-13 11:10:16,867 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 11:10:16,868 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-13 11:10:16,894 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-13 11:10:16,895 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 11:10:16,895 INFO sqlalchemy.engine.base.Engine Thread-27 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 11:10:16,896 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 11:10:16,896 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event')
2020-06-13 11:10:16,896 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event')
2020-06-13 11:10:16,896 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 11:10:16,896 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event')
2020-06-13 11:10:16,897 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 11:10:16,897 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 11:10:16,901 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 11:10:16,901 INFO sqlalchemy.engine.base.Engine Thread-27 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 11:10:16,902 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'style', 'textColor', 'eventType')
2020-06-13 11:10:16,906 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 11:10:16,906 INFO sqlalchemy.engine.base.Engine Thread-27 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 11:10:16,907 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'style', 'textColor', 'eventType')
2020-06-13 11:10:16,907 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 11:10:16,908 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-13 11:10:34,256 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-13 11:10:34,257 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 11:10:34,258 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-06-13 11:10:34,258 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 11:10:34,258 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 11:10:34,264 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 11:10:34,265 INFO sqlalchemy.engine.base.Engine Thread-28 : (datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59))
2020-06-13 11:10:34,265 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 11:10:34,285 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-13 11:10:36,657 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-13 11:10:36,658 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 11:10:36,658 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-13 11:10:36,659 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 11:10:36,659 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 11:10:36,663 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 11:10:36,663 INFO sqlalchemy.engine.base.Engine Thread-29 : (datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 6, 8, 23, 59), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 6, 8, 23, 59), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 6, 8, 23, 59))
2020-06-13 11:10:36,664 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 11:10:36,666 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-13 11:11:13,190 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-13 11:11:13,191 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 11:11:13,191 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-13 11:11:13,192 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 11:11:13,193 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 11:11:13,197 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 11:11:13,197 INFO sqlalchemy.engine.base.Engine Thread-30 : (datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59))
2020-06-13 11:11:13,198 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 11:11:13,200 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-13 15:10:28,431 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-06-13 15:10:28,433 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 15:10:28,433 INFO sqlalchemy.engine.base.Engine Thread-37 : ('Date Event', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:10:28,435 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 15:10:28,436 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event')
2020-06-13 15:10:28,437 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 15:10:28,437 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event')
2020-06-13 15:10:28,437 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 15:10:28,437 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event')
2020-06-13 15:10:28,441 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 15:10:28,441 INFO sqlalchemy.engine.base.Engine Thread-37 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:10:28,442 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'style', 'textColor', 'eventType')
2020-06-13 15:10:28,443 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:10:28,443 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:10:28,443 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:10:28,443 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:10:28,443 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:10:28,443 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:10:28,443 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:10:28,447 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 15:10:28,447 INFO sqlalchemy.engine.base.Engine Thread-37 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:10:28,448 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'style', 'textColor', 'eventType')
2020-06-13 15:10:28,448 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:10:28,448 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:10:28,448 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:10:28,449 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:10:28,449 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:10:28,449 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:10:28,449 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:10:28,451 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-06-13 15:10:28,521 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-06-13 15:10:28,522 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 15:10:28,523 INFO sqlalchemy.engine.base.Engine Thread-38 : (1, 1)
2020-06-13 15:10:28,523 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 15:10:28,524 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 15:10:28,526 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-06-13 15:12:50,243 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 15:12:50,243 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:12:50,244 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 15:12:50,245 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 15:12:50,245 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 15:12:50,245 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:12:50,246 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 15:12:50,246 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 15:12:50,246 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 15:12:50,246 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:12:50,246 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 15:12:50,247 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 15:12:50,247 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 15:12:50,247 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:12:50,248 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 15:12:50,248 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 15:12:50,249 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 15:12:50,249 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:12:50,249 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 15:12:50,249 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:12:50,250 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 15:12:50,250 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:12:50,251 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 15:12:50,253 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType`, anon_1.`BOOKING` AS `anon_1_BOOKING` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType`, %s AS `BOOKING` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 15:12:50,253 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Date Event', 'event', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:12:50,255 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType', 'anon_1_BOOKING')
2020-06-13 15:12:50,255 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'event')
2020-06-13 15:12:50,255 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'event')
2020-06-13 15:12:50,255 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'event')
2020-06-13 15:12:50,255 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'event')
2020-06-13 15:12:50,255 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'event')
2020-06-13 15:12:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'event')
2020-06-13 15:12:50,261 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`EVENT` AS `anon_1_EVENT`, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `EVENT` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 15:12:50,261 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', 'event', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:12:50,263 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_EVENT', 'style', 'textColor', 'eventType')
2020-06-13 15:12:50,263 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'event', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:12:50,263 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'event', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:12:50,263 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'event', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:12:50,263 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'event', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:12:50,263 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'event', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:12:50,263 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'event', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:12:50,263 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'event', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:12:50,268 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`EVENT` AS `anon_1_EVENT`, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `EVENT` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 15:12:50,268 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)', 'event', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:12:50,269 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_EVENT', 'style', 'textColor', 'eventType')
2020-06-13 15:12:50,270 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'event', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:12:50,270 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'event', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:12:50,270 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'event', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:12:50,270 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'event', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:12:50,270 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'event', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:12:50,270 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'event', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:12:50,270 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'event', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:12:50,273 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 15:12:50,383 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 15:12:50,386 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 15:12:50,386 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 15:12:50,387 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 15:12:50,388 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 15:12:50,407 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 15:13:39,264 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 15:13:39,264 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:13:39,265 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 15:13:39,266 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 15:13:39,266 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 15:13:39,266 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:13:39,267 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 15:13:39,267 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 15:13:39,267 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 15:13:39,267 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:13:39,268 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 15:13:39,268 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 15:13:39,268 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 15:13:39,268 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:13:39,269 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 15:13:39,269 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 15:13:39,270 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 15:13:39,270 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:13:39,270 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 15:13:39,270 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:13:39,271 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 15:13:39,271 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:13:39,271 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 15:13:39,274 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType`, anon_1.event AS anon_1_event 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType`, %s AS event 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 15:13:39,274 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Date Event', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:13:39,275 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType', 'anon_1_event')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,277 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,277 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,277 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,277 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:13:39,282 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 15:13:39,282 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', 'EVENT', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:13:39,283 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 15:13:39,284 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:13:39,284 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:13:39,284 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:13:39,284 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:13:39,284 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:13:39,284 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:13:39,284 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 15:13:39,289 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 15:13:39,289 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)', 'EVENT', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 15:13:39,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 15:13:39,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:13:39,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:13:39,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:13:39,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:13:39,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:13:39,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:13:39,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:13:39,292 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 15:13:39,383 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 15:13:39,385 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 15:13:39,386 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 15:13:39,386 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 15:13:39,387 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 15:13:39,406 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 15:14:43,627 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 15:14:43,627 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:14:43,628 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 15:14:43,629 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 15:14:43,629 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 15:14:43,629 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:14:43,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 15:14:43,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 15:14:43,630 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 15:14:43,630 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:14:43,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 15:14:43,631 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 15:14:43,631 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 15:14:43,631 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:14:43,632 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 15:14:43,632 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 15:14:43,633 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 15:14:43,633 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:14:43,633 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 15:14:43,633 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:14:43,634 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 15:14:43,634 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:14:43,635 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 15:14:43,641 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 15:14:43,641 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 15:14:43,642 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 15:14:43,643 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 15:14:43,643 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 15:14:43,646 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 15:14:43,646 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 15:14:43,646 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 15:14:43,646 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 15:14:43,647 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 15:14:43,647 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 15:14:43,647 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 15:14:43,647 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 15:14:43,651 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 15:14:43,651 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 15:14:43,652 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 15:14:43,652 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 15:14:43,725 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 15:14:43,726 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 15:14:43,726 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 15:14:43,727 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 15:14:43,730 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 15:14:44,761 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 15:14:44,764 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType`, anon_1.event AS anon_1_event 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType`, %s AS event 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 15:14:44,764 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Date Event', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 15:14:44,765 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType', 'anon_1_event')
2020-06-13 15:14:44,765 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,766 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,766 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,766 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,766 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,766 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,771 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 15:14:44,771 INFO sqlalchemy.engine.base.Engine Thread-12 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', 'EVENT', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 15:14:44,772 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 15:14:44,776 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 15:14:44,776 INFO sqlalchemy.engine.base.Engine Thread-12 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)', 'EVENT', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 15:14:44,777 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 15:14:44,777 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:14:44,778 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 15:14:44,808 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 15:14:44,810 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType`, anon_1.event AS anon_1_event 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType`, %s AS event 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 15:14:44,810 INFO sqlalchemy.engine.base.Engine Thread-13 : ('Date Event', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 15:14:44,811 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType', 'anon_1_event')
2020-06-13 15:14:44,811 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,811 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,811 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,811 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,811 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,812 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 15:14:44,816 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 15:14:44,816 INFO sqlalchemy.engine.base.Engine Thread-13 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', 'EVENT', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 15:14:44,817 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 15:14:44,822 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 15:14:44,822 INFO sqlalchemy.engine.base.Engine Thread-13 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)', 'EVENT', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 15:14:44,823 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 15:14:44,823 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Pending)')
2020-06-13 15:14:44,824 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 15:14:46,720 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 15:14:46,721 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 15:14:46,721 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 15:14:46,721 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 15:14:46,722 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 15:14:46,728 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 15:14:46,728 INFO sqlalchemy.engine.base.Engine Thread-15 : (datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59))
2020-06-13 15:14:46,729 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 15:14:46,750 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 19:57:00,867 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 19:57:00,867 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 19:57:00,868 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 19:57:00,869 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 19:57:00,870 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 19:57:00,870 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 19:57:00,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 19:57:00,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 19:57:00,871 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 19:57:00,871 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 19:57:00,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 19:57:00,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 19:57:00,872 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 19:57:00,872 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 19:57:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 19:57:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 19:57:00,874 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 19:57:00,874 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 19:57:00,875 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 19:57:00,875 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 19:57:00,876 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 19:57:00,876 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 19:57:00,876 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 19:57:00,879 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType`, anon_1.event AS anon_1_event 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType`, %s AS event 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 19:57:00,879 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Date Event', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 19:57:00,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType', 'anon_1_event')
2020-06-13 19:57:00,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 19:57:00,889 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 19:57:00,889 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', 'EVENT', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 19:57:00,890 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 19:57:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 19:57:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 19:57:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 19:57:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 19:57:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 19:57:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 19:57:00,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'EVENT', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 19:57:00,896 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 19:57:00,896 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)', 'EVENT', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 19:57:00,897 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 19:57:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 19:57:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 19:57:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 19:57:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 19:57:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 19:57:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 19:57:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'EVENT', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 19:57:00,901 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 19:57:01,016 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 19:57:01,018 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 19:57:01,019 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 19:57:01,020 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 19:57:01,020 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 19:57:01,040 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 21:03:19,344 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-13 21:03:19,346 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 21:03:19,346 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-13 21:03:19,348 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 21:03:19,349 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 21:03:19,356 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 21:03:19,356 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59))
2020-06-13 21:03:19,357 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 21:03:19,379 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-13 21:03:21,917 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-13 21:03:21,918 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 21:03:21,918 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-13 21:03:21,918 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 21:03:21,919 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 21:03:21,923 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 21:03:21,923 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-13 21:03:21,924 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 21:03:21,924 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-13 21:03:21,924 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (21, 'Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-13 21:03:21,924 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-13 21:03:21,926 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-13 21:08:47,638 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-13 21:08:47,641 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 21:08:47,641 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-13 21:08:47,643 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 21:08:47,643 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 21:08:47,648 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 21:08:47,648 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-13 21:08:47,649 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 21:08:47,649 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-13 21:08:47,649 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-13 21:08:47,649 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-13 21:08:47,649 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-13 21:08:47,652 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-13 21:13:09,089 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 21:13:09,089 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:13:09,090 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 21:13:09,091 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 21:13:09,091 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 21:13:09,091 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:13:09,092 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 21:13:09,092 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 21:13:09,093 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 21:13:09,093 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:13:09,093 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 21:13:09,093 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 21:13:09,093 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 21:13:09,093 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:13:09,094 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 21:13:09,094 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 21:13:09,095 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 21:13:09,095 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:13:09,096 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 21:13:09,096 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:13:09,096 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 21:13:09,097 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:13:09,097 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 21:13:09,100 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType`, anon_1.event AS anon_1_event 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType`, %s AS event 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 21:13:09,100 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Date Event', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:13:09,101 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType', 'anon_1_event')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,102 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,103 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,103 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,103 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,103 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,103 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'BOOKING')
2020-06-13 21:13:09,109 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 21:13:09,109 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', 'DATE', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:13:09,110 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 21:13:09,111 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'DATE', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:13:09,111 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'DATE', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:13:09,111 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'DATE', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:13:09,111 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'DATE', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:13:09,111 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'DATE', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:13:09,111 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'DATE', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:13:09,111 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'DATE', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:13:09,116 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 21:13:09,116 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)', 'DATE', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:13:09,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 21:13:09,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'DATE', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:13:09,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'DATE', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:13:09,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'DATE', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:13:09,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'DATE', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:13:09,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'DATE', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:13:09,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'DATE', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:13:09,118 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'DATE', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:13:09,120 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 21:13:09,242 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 21:13:09,244 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 21:13:09,245 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 21:13:09,245 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 21:13:09,246 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 21:13:09,264 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 21:14:17,601 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 21:14:17,601 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:14:17,603 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 21:14:17,603 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 21:14:17,604 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 21:14:17,604 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:14:17,605 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 21:14:17,605 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 21:14:17,605 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 21:14:17,605 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:14:17,605 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 21:14:17,606 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 21:14:17,606 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 21:14:17,606 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:14:17,607 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 21:14:17,607 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 21:14:17,608 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 21:14:17,608 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:14:17,609 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 21:14:17,609 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:14:17,609 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 21:14:17,609 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:14:17,610 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 21:14:17,613 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType`, anon_1.event AS anon_1_event 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType`, %s AS event 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 21:14:17,613 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Date Event', 'DATE', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:14:17,614 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType', 'anon_1_event')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'DATE')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'DATE')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'DATE')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'DATE')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'DATE')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'DATE')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'DATE')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'DATE')
2020-06-13 21:14:17,615 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'DATE')
2020-06-13 21:14:17,616 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'DATE')
2020-06-13 21:14:17,616 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'DATE')
2020-06-13 21:14:17,616 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'DATE')
2020-06-13 21:14:17,616 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'DATE')
2020-06-13 21:14:17,616 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'DATE')
2020-06-13 21:14:17,622 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 21:14:17,622 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:14:17,623 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 21:14:17,623 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:14:17,623 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:14:17,623 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:14:17,624 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:14:17,624 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:14:17,624 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:14:17,624 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Booking Event (Approved)')
2020-06-13 21:14:17,629 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 21:14:17,629 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:14:17,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 21:14:17,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:14:17,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:14:17,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:14:17,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:14:17,630 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:14:17,631 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:14:17,631 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Booking Event (Unapproved)')
2020-06-13 21:14:17,633 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 21:14:17,706 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 21:14:17,709 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 21:14:17,709 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 21:14:17,710 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 21:14:17,710 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 21:14:17,731 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 21:18:41,745 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 21:18:41,745 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:18:41,746 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 21:18:41,747 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 21:18:41,748 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 21:18:41,748 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:18:41,748 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 21:18:41,748 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 21:18:41,749 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 21:18:41,749 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:18:41,749 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 21:18:41,749 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 21:18:41,750 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 21:18:41,750 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:18:41,751 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 21:18:41,751 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 21:18:41,752 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 21:18:41,752 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:18:41,753 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 21:18:41,753 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:18:41,753 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 21:18:41,754 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:18:41,754 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 21:18:41,757 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType`, anon_1.event AS anon_1_event 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType`, %s AS event 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 21:18:41,757 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Date Event', 'DATE', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:18:41,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType', 'anon_1_event')
2020-06-13 21:18:41,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'DATE')
2020-06-13 21:18:41,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'DATE')
2020-06-13 21:18:41,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'DATE')
2020-06-13 21:18:41,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'DATE')
2020-06-13 21:18:41,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'DATE')
2020-06-13 21:18:41,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'DATE')
2020-06-13 21:18:41,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'DATE')
2020-06-13 21:18:41,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'Date Event', 'DATE')
2020-06-13 21:18:41,760 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'DATE')
2020-06-13 21:18:41,760 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'Date Event', 'DATE')
2020-06-13 21:18:41,760 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'DATE')
2020-06-13 21:18:41,760 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'Date Event', 'DATE')
2020-06-13 21:18:41,760 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'DATE')
2020-06-13 21:18:41,760 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'Date Event', 'DATE')
2020-06-13 21:18:41,766 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 21:18:41,766 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #DAFFB9; color: #000000;', 'black', 'Approved', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:18:41,767 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 21:18:41,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Approved')
2020-06-13 21:18:41,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Approved')
2020-06-13 21:18:41,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Approved')
2020-06-13 21:18:41,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Approved')
2020-06-13 21:18:41,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Approved')
2020-06-13 21:18:41,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Approved')
2020-06-13 21:18:41,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black', 'Approved')
2020-06-13 21:18:41,773 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 21:18:41,773 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #CCCCCC; color: #000000;', 'black', 'Unapproved', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:18:41,774 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor', 'eventType')
2020-06-13 21:18:41,774 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Unapproved')
2020-06-13 21:18:41,774 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Unapproved')
2020-06-13 21:18:41,774 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Unapproved')
2020-06-13 21:18:41,775 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Unapproved')
2020-06-13 21:18:41,775 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Unapproved')
2020-06-13 21:18:41,775 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Unapproved')
2020-06-13 21:18:41,775 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black', 'Unapproved')
2020-06-13 21:18:41,777 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 21:18:41,876 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 21:18:41,879 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 21:18:41,879 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 21:18:41,880 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 21:18:41,880 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 21:18:41,900 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 21:20:30,827 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 21:20:30,827 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:20:30,828 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 21:20:30,829 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 21:20:30,829 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 21:20:30,829 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:20:30,830 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 21:20:30,830 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 21:20:30,830 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 21:20:30,831 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:20:30,831 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 21:20:30,831 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 21:20:30,831 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 21:20:30,831 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:20:30,832 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 21:20:30,832 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 21:20:30,833 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 21:20:30,833 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:20:30,834 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 21:20:30,834 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:20:30,834 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 21:20:30,834 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 21:20:30,835 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 21:20:30,837 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.event AS anon_1_event 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS event 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 21:20:30,838 INFO sqlalchemy.engine.base.Engine Thread-2 : ('DATE', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:20:30,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_event')
2020-06-13 21:20:30,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 21:20:30,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 21:20:30,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 21:20:30,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 21:20:30,846 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 21:20:30,846 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:20:30,847 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor')
2020-06-13 21:20:30,848 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 21:20:30,848 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 21:20:30,848 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 21:20:30,848 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 21:20:30,848 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 21:20:30,848 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 21:20:30,848 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 21:20:30,853 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.event AS anon_1_event, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS event 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 21:20:30,853 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 21:20:30,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_event', 'style', 'textColor')
2020-06-13 21:20:30,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 21:20:30,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 21:20:30,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 21:20:30,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 21:20:30,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 21:20:30,856 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 21:20:30,856 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 21:20:30,858 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 21:20:30,980 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 21:20:30,983 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 21:20:30,983 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 21:20:30,984 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 21:20:30,984 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 21:20:31,006 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 22:25:08,988 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 22:25:08,989 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:25:08,990 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 22:25:08,991 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 22:25:08,991 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 22:25:08,991 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:25:08,992 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 22:25:08,992 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 22:25:08,992 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 22:25:08,993 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:25:08,993 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 22:25:08,993 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 22:25:08,993 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 22:25:08,993 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:25:08,994 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 22:25:08,994 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 22:25:08,995 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 22:25:08,995 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:25:08,996 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 22:25:08,996 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:25:08,997 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 22:25:08,997 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:25:08,997 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 22:25:09,003 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:25:09,003 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:25:09,005 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:25:09,006 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:25:09,006 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:25:09,008 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:25:09,008 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 22:25:09,009 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:25:09,009 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:25:09,009 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:25:09,009 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:25:09,009 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:25:09,010 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:25:09,014 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:25:09,014 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 22:25:09,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:25:09,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:25:09,087 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:25:09,087 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 22:25:09,088 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:25:09,088 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:25:09,091 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 22:25:10,395 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 22:25:10,398 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:25:10,398 INFO sqlalchemy.engine.base.Engine Thread-12 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:10,399 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:25:10,399 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:25:10,400 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:25:10,400 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:10,400 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:25:10,400 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:10,400 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:10,404 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:25:10,404 INFO sqlalchemy.engine.base.Engine Thread-12 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:10,405 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:25:10,410 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:25:10,410 INFO sqlalchemy.engine.base.Engine Thread-12 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:10,411 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:25:10,411 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:25:10,412 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 22:25:10,444 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 22:25:10,445 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:25:10,446 INFO sqlalchemy.engine.base.Engine Thread-13 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:10,447 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:25:10,447 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:25:10,447 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:25:10,447 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:10,447 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:25:10,447 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:10,447 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:10,452 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:25:10,452 INFO sqlalchemy.engine.base.Engine Thread-13 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:10,453 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:25:10,458 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:25:10,458 INFO sqlalchemy.engine.base.Engine Thread-13 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:10,458 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:25:10,459 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:25:10,460 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 22:25:12,082 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 22:25:12,084 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:25:12,084 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 22:25:12,084 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:25:12,085 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:25:12,097 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 22:25:47,407 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 22:25:47,410 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:25:47,411 INFO sqlalchemy.engine.base.Engine Thread-16 : ()
2020-06-13 22:25:47,412 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:25:47,412 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:25:47,413 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:25:47,414 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:25:47,414 INFO sqlalchemy.engine.base.Engine Thread-16 : (100,)
2020-06-13 22:25:47,415 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:25:47,415 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:25:47,415 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:25:47,416 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:25:47,416 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:25:47,416 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:25:47,418 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:25:47,418 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 22:25:47,418 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:25:47,419 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:25:47,423 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:25:47,423 INFO sqlalchemy.engine.base.Engine Thread-16 : ('philip', 1, 1)
2020-06-13 22:25:47,424 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:25:47,424 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:25:47,427 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 22:25:48,671 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-13 22:25:48,673 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:25:48,673 INFO sqlalchemy.engine.base.Engine Thread-26 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:48,674 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:25:48,675 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:25:48,675 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:25:48,675 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:48,675 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:25:48,675 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:48,675 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:48,680 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:25:48,680 INFO sqlalchemy.engine.base.Engine Thread-26 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:48,680 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:25:48,685 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:25:48,685 INFO sqlalchemy.engine.base.Engine Thread-26 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:48,686 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:25:48,686 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:25:48,687 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-13 22:25:48,721 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-13 22:25:48,723 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:25:48,724 INFO sqlalchemy.engine.base.Engine Thread-28 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:48,725 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:25:48,725 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:25:48,725 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:25:48,725 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:48,725 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:25:48,725 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:48,726 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:25:48,730 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:25:48,730 INFO sqlalchemy.engine.base.Engine Thread-28 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:48,731 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:25:48,736 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:25:48,736 INFO sqlalchemy.engine.base.Engine Thread-28 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:25:48,737 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:25:48,737 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:25:48,738 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-13 22:27:00,857 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 22:27:00,857 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:27:00,858 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 22:27:00,859 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 22:27:00,860 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 22:27:00,860 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:27:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 22:27:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 22:27:00,864 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 22:27:00,865 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:27:00,865 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 22:27:00,865 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 22:27:00,865 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 22:27:00,865 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:27:00,866 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 22:27:00,866 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 22:27:00,867 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 22:27:00,867 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:27:00,867 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 22:27:00,868 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:27:00,868 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 22:27:00,868 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:27:00,869 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 22:27:00,871 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:27:00,871 INFO sqlalchemy.engine.base.Engine Thread-2 : ('DATE', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 22:27:00,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:27:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (10, datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:00,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:00,874 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:00,874 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:00,874 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:00,874 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:00,874 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:00,874 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:00,880 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:27:00,881 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 22:27:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 22:27:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 22:27:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 22:27:00,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (21, datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 22:27:00,883 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 22:27:00,883 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (25, datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 22:27:00,883 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (29, datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'BOOKING', 'background-color: #DAFFB9; color: #000000;', 'black')
2020-06-13 22:27:00,890 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:27:00,890 INFO sqlalchemy.engine.base.Engine Thread-2 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 1, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-06-13 22:27:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (22, datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:00,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (26, datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:00,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (28, datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:00,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:00,894 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 22:27:00,977 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 22:27:00,980 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:27:00,980 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 22:27:00,981 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:00,981 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:00,999 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 22:27:30,473 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-13 22:27:30,480 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:27:30,480 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-13 22:27:30,482 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:27:30,482 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:27:30,483 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:27:30,485 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:27:30,485 INFO sqlalchemy.engine.base.Engine Thread-4 : (100,)
2020-06-13 22:27:30,486 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:27:30,486 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:27:30,486 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:27:30,486 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:27:30,487 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:27:30,487 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:27:30,489 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:27:30,489 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-13 22:27:30,490 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:30,490 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:30,553 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:27:30,554 INFO sqlalchemy.engine.base.Engine Thread-4 : ('philip', 1, 1)
2020-06-13 22:27:30,554 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:30,555 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:30,557 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-13 22:27:31,955 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 22:27:31,957 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:27:31,957 INFO sqlalchemy.engine.base.Engine Thread-14 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:31,958 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:27:31,958 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:31,958 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:31,958 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:31,959 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:31,959 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:31,959 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:31,963 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:27:31,963 INFO sqlalchemy.engine.base.Engine Thread-14 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:31,964 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:31,968 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:27:31,968 INFO sqlalchemy.engine.base.Engine Thread-14 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:31,969 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:31,970 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:31,971 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 22:27:32,056 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 22:27:32,058 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:27:32,058 INFO sqlalchemy.engine.base.Engine Thread-16 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:32,059 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:27:32,060 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:32,060 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:32,060 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:32,060 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:32,060 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:32,060 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:32,064 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:27:32,064 INFO sqlalchemy.engine.base.Engine Thread-16 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:32,065 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:32,070 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:27:32,070 INFO sqlalchemy.engine.base.Engine Thread-16 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:32,071 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:32,071 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:32,072 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 22:27:33,682 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 22:27:33,683 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:27:33,683 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-13 22:27:33,684 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:33,684 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:33,686 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 22:27:40,363 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-13 22:27:40,365 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:27:40,365 INFO sqlalchemy.engine.base.Engine Thread-18 : ()
2020-06-13 22:27:40,366 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:27:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:27:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:27:40,368 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:27:40,368 INFO sqlalchemy.engine.base.Engine Thread-18 : (100,)
2020-06-13 22:27:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:27:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:27:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:27:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:27:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:27:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:27:40,372 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:27:40,372 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-13 22:27:40,372 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:40,373 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:40,378 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:27:40,378 INFO sqlalchemy.engine.base.Engine Thread-18 : ('philip', 1, 1)
2020-06-13 22:27:40,378 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:40,379 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:40,381 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-13 22:27:41,555 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-13 22:27:41,557 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:27:41,557 INFO sqlalchemy.engine.base.Engine Thread-28 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:41,558 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:27:41,558 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:41,558 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:41,558 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:41,558 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:41,558 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:41,558 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:41,563 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:27:41,563 INFO sqlalchemy.engine.base.Engine Thread-28 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:41,564 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:41,569 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:27:41,569 INFO sqlalchemy.engine.base.Engine Thread-28 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:41,570 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:41,571 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:41,572 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-13 22:27:41,609 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-13 22:27:41,610 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:27:41,610 INFO sqlalchemy.engine.base.Engine Thread-30 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:41,611 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:27:41,612 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:41,612 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:41,612 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:41,612 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:41,612 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:41,612 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:41,617 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:27:41,617 INFO sqlalchemy.engine.base.Engine Thread-30 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:41,618 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:41,623 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:27:41,623 INFO sqlalchemy.engine.base.Engine Thread-30 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:41,624 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:41,624 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:41,625 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-13 22:27:43,372 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-13 22:27:43,373 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:27:43,374 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-13 22:27:43,374 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:43,375 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:43,378 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-13 22:27:47,251 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-13 22:27:47,253 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:27:47,253 INFO sqlalchemy.engine.base.Engine Thread-32 : ()
2020-06-13 22:27:47,255 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:27:47,255 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:27:47,255 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:27:47,257 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:27:47,257 INFO sqlalchemy.engine.base.Engine Thread-32 : (100,)
2020-06-13 22:27:47,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:27:47,258 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:27:47,258 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:27:47,258 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:27:47,258 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:27:47,258 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:27:47,260 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:27:47,260 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-13 22:27:47,261 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:47,261 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:47,265 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:27:47,265 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-13 22:27:47,266 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:27:47,266 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:27:47,269 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-13 22:27:48,599 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-06-13 22:27:48,603 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:27:48,603 INFO sqlalchemy.engine.base.Engine Thread-42 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:48,604 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:27:48,604 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:48,604 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:48,604 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:48,605 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:48,605 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:48,605 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:48,610 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:27:48,610 INFO sqlalchemy.engine.base.Engine Thread-42 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:48,611 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:48,616 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:27:48,616 INFO sqlalchemy.engine.base.Engine Thread-42 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:48,617 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:48,617 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:48,618 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-06-13 22:27:48,648 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-13 22:27:48,650 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:27:48,650 INFO sqlalchemy.engine.base.Engine Thread-44 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:48,651 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:27:48,651 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:27:48,651 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:27:48,651 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:48,651 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:27:48,651 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:48,652 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:27:48,656 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:27:48,656 INFO sqlalchemy.engine.base.Engine Thread-44 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:48,657 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:48,662 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:27:48,662 INFO sqlalchemy.engine.base.Engine Thread-44 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:27:48,663 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:27:48,663 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:27:48,664 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-13 22:28:41,800 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-13 22:28:41,802 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:28:41,802 INFO sqlalchemy.engine.base.Engine Thread-45 : ()
2020-06-13 22:28:41,803 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:28:41,804 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:28:41,804 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:28:41,806 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:28:41,806 INFO sqlalchemy.engine.base.Engine Thread-45 : (100,)
2020-06-13 22:28:41,807 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:28:41,807 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:28:41,807 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:28:41,807 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:28:41,808 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:28:41,808 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:28:41,810 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:28:41,810 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-13 22:28:41,811 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:28:41,811 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:28:41,815 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:28:41,815 INFO sqlalchemy.engine.base.Engine Thread-45 : ('philip', 1, 1)
2020-06-13 22:28:41,816 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:28:41,816 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:28:41,818 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-13 22:28:47,653 INFO sqlalchemy.engine.base.Engine Thread-55 : BEGIN (implicit)
2020-06-13 22:28:47,655 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:28:47,655 INFO sqlalchemy.engine.base.Engine Thread-55 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:28:47,656 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:28:47,657 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:28:47,657 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:28:47,657 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:28:47,657 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:28:47,657 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:28:47,657 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:28:47,662 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:28:47,662 INFO sqlalchemy.engine.base.Engine Thread-55 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:28:47,663 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:28:47,668 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:28:47,668 INFO sqlalchemy.engine.base.Engine Thread-55 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:28:47,669 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:28:47,669 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:28:47,670 INFO sqlalchemy.engine.base.Engine Thread-55 : ROLLBACK
2020-06-13 22:28:47,700 INFO sqlalchemy.engine.base.Engine Thread-56 : BEGIN (implicit)
2020-06-13 22:28:47,702 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:28:47,702 INFO sqlalchemy.engine.base.Engine Thread-56 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:28:47,704 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:28:47,704 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:28:47,705 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:28:47,705 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:28:47,705 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:28:47,706 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:28:47,706 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:28:47,711 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:28:47,711 INFO sqlalchemy.engine.base.Engine Thread-56 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:28:47,712 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:28:47,716 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:28:47,716 INFO sqlalchemy.engine.base.Engine Thread-56 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:28:47,717 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:28:47,717 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:28:47,718 INFO sqlalchemy.engine.base.Engine Thread-56 : ROLLBACK
2020-06-13 22:28:49,505 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-13 22:28:49,506 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:28:49,506 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-06-13 22:28:49,507 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:28:49,507 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:28:49,510 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-13 22:28:53,470 INFO sqlalchemy.engine.base.Engine Thread-59 : BEGIN (implicit)
2020-06-13 22:28:53,472 INFO sqlalchemy.engine.base.Engine Thread-59 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:28:53,472 INFO sqlalchemy.engine.base.Engine Thread-59 : (1, 1)
2020-06-13 22:28:53,475 DEBUG sqlalchemy.engine.base.Engine Thread-59 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:28:53,477 DEBUG sqlalchemy.engine.base.Engine Thread-59 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:28:53,481 INFO sqlalchemy.engine.base.Engine Thread-59 : ROLLBACK
2020-06-13 22:28:53,489 INFO sqlalchemy.engine.base.Engine Thread-60 : BEGIN (implicit)
2020-06-13 22:28:53,491 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:28:53,491 INFO sqlalchemy.engine.base.Engine Thread-60 : (1, 1)
2020-06-13 22:28:53,490 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-06-13 22:28:53,492 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-06-13 22:28:53,493 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:28:53,495 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-06-13 22:28:53,495 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:28:53,496 INFO sqlalchemy.engine.base.Engine Thread-61 : (1, 1)
2020-06-13 22:28:53,493 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-06-13 22:28:53,495 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:28:53,498 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:28:53,500 INFO sqlalchemy.engine.base.Engine Thread-60 : ROLLBACK
2020-06-13 22:28:53,498 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:28:53,497 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:28:53,501 INFO sqlalchemy.engine.base.Engine Thread-63 : (1, 1)
2020-06-13 22:28:53,500 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:28:53,496 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:28:53,503 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:28:53,505 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-06-13 22:28:53,506 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-06-13 22:28:53,506 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:28:53,507 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:28:53,510 INFO sqlalchemy.engine.base.Engine Thread-63 : ROLLBACK
2020-06-13 22:31:58,104 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-06-13 22:31:58,107 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:31:58,107 INFO sqlalchemy.engine.base.Engine Thread-64 : ()
2020-06-13 22:31:58,109 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:31:58,109 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:31:58,110 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:31:58,111 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:31:58,111 INFO sqlalchemy.engine.base.Engine Thread-64 : (100,)
2020-06-13 22:31:58,112 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:31:58,112 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:31:58,112 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:31:58,112 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:31:58,112 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:31:58,112 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:31:58,114 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:31:58,114 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-06-13 22:31:58,115 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:31:58,115 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:31:58,120 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:31:58,120 INFO sqlalchemy.engine.base.Engine Thread-64 : ('philip', 1, 1)
2020-06-13 22:31:58,120 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:31:58,120 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:31:58,123 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-06-13 22:31:58,414 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-06-13 22:31:58,416 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:31:58,422 INFO sqlalchemy.engine.base.Engine Thread-76 : (1, 1)
2020-06-13 22:31:58,421 INFO sqlalchemy.engine.base.Engine Thread-75 : BEGIN (implicit)
2020-06-13 22:31:58,423 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:31:58,424 INFO sqlalchemy.engine.base.Engine Thread-75 : (1, 1)
2020-06-13 22:31:58,424 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:31:58,426 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:31:58,425 INFO sqlalchemy.engine.base.Engine Thread-77 : BEGIN (implicit)
2020-06-13 22:31:58,426 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:31:58,418 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-06-13 22:31:58,428 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-06-13 22:31:58,430 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:31:58,431 INFO sqlalchemy.engine.base.Engine Thread-77 : (1, 1)
2020-06-13 22:31:58,431 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:31:58,432 INFO sqlalchemy.engine.base.Engine Thread-74 : (1, 1)
2020-06-13 22:31:58,430 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:31:58,432 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:31:58,434 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:31:58,436 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:31:58,436 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:31:58,435 INFO sqlalchemy.engine.base.Engine Thread-75 : ROLLBACK
2020-06-13 22:31:58,439 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-06-13 22:31:58,440 INFO sqlalchemy.engine.base.Engine Thread-77 : ROLLBACK
2020-06-13 22:31:58,471 INFO sqlalchemy.engine.base.Engine Thread-78 : BEGIN (implicit)
2020-06-13 22:31:58,472 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:31:58,473 INFO sqlalchemy.engine.base.Engine Thread-78 : (1, 1)
2020-06-13 22:31:58,473 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:31:58,473 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:31:58,475 INFO sqlalchemy.engine.base.Engine Thread-78 : ROLLBACK
2020-06-13 22:31:59,195 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-06-13 22:31:59,197 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:31:59,197 INFO sqlalchemy.engine.base.Engine Thread-79 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:31:59,198 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:31:59,198 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:31:59,198 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:31:59,198 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:31:59,198 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:31:59,198 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:31:59,199 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:31:59,203 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:31:59,203 INFO sqlalchemy.engine.base.Engine Thread-79 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:31:59,204 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:31:59,209 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:31:59,209 INFO sqlalchemy.engine.base.Engine Thread-79 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:31:59,210 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:31:59,210 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:31:59,211 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-06-13 22:31:59,237 INFO sqlalchemy.engine.base.Engine Thread-80 : BEGIN (implicit)
2020-06-13 22:31:59,239 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:31:59,239 INFO sqlalchemy.engine.base.Engine Thread-80 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:31:59,240 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:31:59,240 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:31:59,241 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:31:59,241 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:31:59,241 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:31:59,241 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:31:59,241 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:31:59,246 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:31:59,246 INFO sqlalchemy.engine.base.Engine Thread-80 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:31:59,247 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:31:59,252 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:31:59,252 INFO sqlalchemy.engine.base.Engine Thread-80 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:31:59,253 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:31:59,253 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:31:59,254 INFO sqlalchemy.engine.base.Engine Thread-80 : ROLLBACK
2020-06-13 22:32:01,500 INFO sqlalchemy.engine.base.Engine Thread-82 : BEGIN (implicit)
2020-06-13 22:32:01,501 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:32:01,501 INFO sqlalchemy.engine.base.Engine Thread-82 : (1, 1)
2020-06-13 22:32:01,502 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:32:01,502 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:33:11,878 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 22:33:11,878 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:33:11,879 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 22:33:11,880 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 22:33:11,880 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 22:33:11,880 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:33:11,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 22:33:11,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 22:33:11,882 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 22:33:11,882 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:33:11,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 22:33:11,882 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 22:33:11,882 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 22:33:11,882 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:33:11,883 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 22:33:11,883 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 22:33:11,884 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 22:33:11,884 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:33:11,885 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 22:33:11,885 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:33:11,885 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 22:33:11,885 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:33:11,886 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 22:33:11,892 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:33:11,892 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:33:11,894 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:33:11,895 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:33:11,895 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:33:11,898 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:33:11,898 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 22:33:11,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:33:11,899 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:33:11,899 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:33:11,899 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:33:11,899 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:33:11,899 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:33:11,903 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:33:11,903 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 22:33:11,904 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:33:11,904 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:33:11,975 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:33:11,976 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 22:33:11,976 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:33:11,977 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:33:11,979 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 22:33:12,257 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 22:33:12,258 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:33:12,258 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-13 22:33:12,259 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:33:12,259 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:33:12,273 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 22:33:12,322 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 22:33:12,323 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:33:12,324 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-13 22:33:12,324 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:33:12,325 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:33:12,328 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 22:33:12,333 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 22:33:12,334 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:33:12,334 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-13 22:33:12,335 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:33:12,338 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 22:33:12,340 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:33:12,342 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:33:12,342 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 22:33:12,344 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:33:12,345 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 22:33:12,346 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:33:12,346 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 22:33:12,349 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 22:33:12,350 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:33:12,351 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 22:33:12,352 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:33:12,352 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:33:12,354 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 22:33:13,030 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 22:33:13,033 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:33:13,033 INFO sqlalchemy.engine.base.Engine Thread-17 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:33:13,034 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:33:13,034 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:33:13,034 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:33:13,034 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:33:13,034 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:33:13,034 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:33:13,035 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:33:13,040 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:33:13,040 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:33:13,041 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:33:13,046 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:33:13,046 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:33:13,047 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:33:13,047 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:33:13,048 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 22:33:13,074 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-13 22:33:13,076 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:33:13,076 INFO sqlalchemy.engine.base.Engine Thread-18 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:33:13,078 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:33:13,079 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:33:13,079 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:33:13,079 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:33:13,079 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:33:13,079 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:33:13,080 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:33:13,084 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:33:13,084 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:33:13,085 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:33:13,090 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:33:13,091 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:33:13,091 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:33:13,092 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:33:13,093 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-13 22:33:14,320 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-13 22:33:14,321 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:33:14,321 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-13 22:33:14,322 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:33:14,323 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:06,326 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 22:34:06,326 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:34:06,327 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 22:34:06,328 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 22:34:06,328 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 22:34:06,328 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:34:06,329 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 22:34:06,329 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 22:34:06,329 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 22:34:06,329 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:34:06,329 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 22:34:06,330 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 22:34:06,330 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 22:34:06,330 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:34:06,331 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 22:34:06,331 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 22:34:06,331 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 22:34:06,331 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:34:06,332 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 22:34:06,332 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:34:06,333 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 22:34:06,333 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:34:06,333 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 22:34:06,339 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 22:34:06,339 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 22:34:06,340 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 22:34:06,341 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 22:34:06,341 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 22:34:06,343 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 22:34:06,343 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 22:34:06,344 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 22:34:06,344 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 22:34:06,344 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 22:34:06,344 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 22:34:06,344 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 22:34:06,345 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 22:34:06,348 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:06,348 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 22:34:06,349 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:06,349 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:06,418 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 22:34:06,418 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 22:34:06,420 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:06,420 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:06,423 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 22:34:06,677 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 22:34:06,679 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:06,679 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-13 22:34:06,680 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:06,680 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:06,693 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 22:34:06,762 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 22:34:06,764 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:06,764 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-13 22:34:06,767 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:06,768 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:06,769 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 22:34:06,771 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 22:34:06,775 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:06,778 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-13 22:34:06,779 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 22:34:06,779 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 22:34:06,780 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:06,782 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:06,783 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 22:34:06,783 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:06,784 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:06,786 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 22:34:06,784 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:06,783 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 22:34:06,787 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:06,790 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 22:34:06,790 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:06,791 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:06,793 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 22:34:07,535 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 22:34:07,538 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:34:07,538 INFO sqlalchemy.engine.base.Engine Thread-17 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:34:07,539 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:34:07,539 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:34:07,539 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:34:07,539 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:34:07,540 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:34:07,540 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:34:07,540 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:34:07,546 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:34:07,546 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:34:07,547 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:34:07,552 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:34:07,552 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:34:07,553 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:34:07,553 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:34:07,554 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 22:34:07,580 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-13 22:34:07,581 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 22:34:07,582 INFO sqlalchemy.engine.base.Engine Thread-18 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:34:07,582 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 22:34:07,583 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 22:34:07,583 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 22:34:07,583 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:34:07,583 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 22:34:07,583 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:34:07,583 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 22:34:07,588 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 22:34:07,588 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:34:07,590 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:34:07,595 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 22:34:07,595 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 22:34:07,596 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 22:34:07,597 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 22:34:07,598 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-13 22:34:10,441 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-13 22:34:10,442 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:10,442 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-13 22:34:10,442 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:10,443 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:10,446 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-13 22:34:23,962 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-13 22:34:23,964 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:23,964 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-13 22:34:23,964 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:23,965 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:23,967 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-13 22:34:26,145 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-13 22:34:26,146 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:26,146 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-13 22:34:26,147 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:26,147 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:26,149 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-13 22:34:31,969 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-13 22:34:31,970 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:31,970 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-13 22:34:31,971 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:31,971 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:31,977 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 22:34:31,977 INFO sqlalchemy.engine.base.Engine Thread-23 : (datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59))
2020-06-13 22:34:31,978 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 22:34:31,998 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-13 22:34:39,978 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-13 22:34:39,979 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 22:34:39,979 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-13 22:34:39,980 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 22:34:39,980 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 22:34:39,982 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-06-13 23:00:39,904 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:00:39,904 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:00:39,906 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:00:39,906 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:00:39,907 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:00:39,907 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:00:39,907 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:00:39,907 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:00:39,908 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:00:39,908 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:00:39,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:00:39,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:00:39,908 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:00:39,908 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:00:39,909 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:00:39,909 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:00:39,910 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:00:39,910 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:00:39,911 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:00:39,911 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:00:39,911 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:00:39,911 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:00:39,912 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:00:39,918 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:00:39,918 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:00:39,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:00:39,920 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:00:39,920 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:00:39,923 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 23:00:39,923 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 23:00:39,924 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 23:00:39,924 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 23:00:39,924 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 23:00:39,924 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 23:00:39,925 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 23:00:39,925 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 23:00:39,929 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:39,929 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:00:39,930 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:39,930 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:40,000 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 23:00:40,001 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 23:00:40,001 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:40,001 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:40,004 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:00:40,313 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 23:00:40,314 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:40,317 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-13 23:00:40,318 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 23:00:40,322 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 23:00:40,328 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:40,327 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:40,328 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-13 23:00:40,328 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-13 23:00:40,325 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 23:00:40,327 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:40,331 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:40,330 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:40,332 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 23:00:40,329 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:40,332 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:40,331 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:40,344 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:40,332 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:40,346 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 23:00:40,347 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 23:00:40,358 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:40,359 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 23:00:40,363 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 23:00:40,367 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 23:00:40,368 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:40,368 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 23:00:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:40,372 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 23:00:41,104 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 23:00:41,107 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:00:41,107 INFO sqlalchemy.engine.base.Engine Thread-17 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:00:41,108 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:00:41,108 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:00:41,108 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:00:41,108 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:00:41,108 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:00:41,109 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:00:41,109 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:00:41,114 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:00:41,114 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:00:41,115 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:00:41,119 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:00:41,119 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:00:41,120 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:00:41,120 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:00:41,121 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 23:00:41,144 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-13 23:00:41,145 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:00:41,145 INFO sqlalchemy.engine.base.Engine Thread-18 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:00:41,146 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:00:41,147 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:00:41,147 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:00:41,147 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:00:41,147 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:00:41,147 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:00:41,147 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:00:41,152 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:00:41,152 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:00:41,154 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:00:41,158 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:00:41,158 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:00:41,160 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:00:41,160 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:00:41,161 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-13 23:00:47,629 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-13 23:00:47,630 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:47,630 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-13 23:00:47,631 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:47,631 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:47,635 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:00:47,635 INFO sqlalchemy.engine.base.Engine Thread-20 : (23, 1)
2020-06-13 23:00:47,636 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:00:47,636 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:00:47,640 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-13 23:00:56,698 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-13 23:00:56,699 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:56,699 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-13 23:00:56,700 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:56,700 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:56,703 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:00:56,703 INFO sqlalchemy.engine.base.Engine Thread-21 : (19, 1)
2020-06-13 23:00:56,704 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:00:56,705 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:00:56,706 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-13 23:00:58,559 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-13 23:00:58,560 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:00:58,560 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-13 23:00:58,561 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:00:58,561 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:00:58,564 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:00:58,564 INFO sqlalchemy.engine.base.Engine Thread-22 : (15, 1)
2020-06-13 23:00:58,565 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:00:58,565 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:00:58,567 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-13 23:01:03,219 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-13 23:01:03,220 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:01:03,220 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-13 23:01:03,221 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:01:03,221 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:01:03,226 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:01:03,226 INFO sqlalchemy.engine.base.Engine Thread-23 : (21, 1)
2020-06-13 23:01:03,227 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:01:03,227 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:01:03,229 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-13 23:01:29,891 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-13 23:01:29,892 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:01:29,892 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-13 23:01:29,894 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:01:29,894 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:01:29,896 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-06-13 23:01:32,697 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-06-13 23:01:32,698 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:01:32,698 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-06-13 23:01:32,699 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:01:32,699 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:01:32,701 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:01:32,701 INFO sqlalchemy.engine.base.Engine Thread-25 : (23, 1)
2020-06-13 23:01:32,702 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:01:32,702 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:01:32,704 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-06-13 23:03:01,851 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:03:01,851 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:03:01,852 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:03:01,853 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:03:01,854 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:03:01,854 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:03:01,854 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:03:01,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:03:01,855 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:03:01,855 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:03:01,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:03:01,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:03:01,856 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:03:01,856 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:03:01,857 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:03:01,857 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:03:01,858 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:03:01,858 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:03:01,858 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:03:01,858 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:03:01,859 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:03:01,859 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:03:01,860 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:03:01,866 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:03:01,867 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:03:01,868 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:03:01,869 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:03:01,869 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:03:01,872 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 23:03:01,872 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 23:03:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 23:03:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 23:03:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 23:03:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 23:03:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 23:03:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 23:03:01,878 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:01,878 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:03:01,879 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:01,879 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:01,950 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 23:03:01,950 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 23:03:01,951 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:01,951 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:01,954 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:03:02,241 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 23:03:02,242 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:02,242 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-13 23:03:02,243 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:02,244 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:02,256 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 23:03:02,309 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 23:03:02,311 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:02,312 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-13 23:03:02,314 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:02,315 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:02,317 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 23:03:02,318 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 23:03:02,321 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:02,321 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-13 23:03:02,323 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 23:03:02,324 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:02,324 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 23:03:02,325 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:02,325 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:02,324 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:02,331 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 23:03:02,332 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:02,335 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 23:03:02,335 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 23:03:02,336 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:02,336 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 23:03:02,338 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:02,338 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:02,340 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 23:03:03,094 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 23:03:03,096 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:03:03,096 INFO sqlalchemy.engine.base.Engine Thread-17 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:03:03,097 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:03:03,098 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:03:03,098 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:03:03,098 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:03:03,098 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:03:03,098 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:03:03,098 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:03:03,103 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:03:03,103 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:03:03,104 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:03:03,109 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:03:03,109 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:03:03,109 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:03:03,110 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:03:03,111 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 23:03:03,135 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-13 23:03:03,137 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:03:03,137 INFO sqlalchemy.engine.base.Engine Thread-18 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:03:03,139 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:03:03,140 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:03:03,141 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:03:03,141 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:03:03,141 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:03:03,141 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:03:03,141 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:03:03,145 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:03:03,146 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:03:03,146 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:03:03,151 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:03:03,151 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:03:03,152 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:03:03,152 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:03:03,153 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-13 23:03:14,590 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-13 23:03:14,591 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:14,591 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-13 23:03:14,592 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:14,592 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:14,596 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:03:14,596 INFO sqlalchemy.engine.base.Engine Thread-20 : (20, 1)
2020-06-13 23:03:14,597 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:03:14,597 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:03:14,601 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-13 23:03:17,494 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-13 23:03:17,495 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:17,496 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-13 23:03:17,496 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:17,497 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:17,499 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-13 23:03:19,556 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-13 23:03:19,557 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:19,557 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-13 23:03:19,558 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:19,558 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:19,561 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:03:19,561 INFO sqlalchemy.engine.base.Engine Thread-22 : (15, 1)
2020-06-13 23:03:19,561 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:03:19,562 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:03:19,563 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-13 23:03:24,397 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-13 23:03:24,398 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:24,398 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-13 23:03:24,399 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:24,399 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:24,404 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:03:24,404 INFO sqlalchemy.engine.base.Engine Thread-23 : (15, 1)
2020-06-13 23:03:24,405 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:03:24,405 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:03:24,407 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-13 23:03:26,476 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-13 23:03:26,477 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:26,477 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-13 23:03:26,478 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:26,478 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:26,481 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:03:26,481 INFO sqlalchemy.engine.base.Engine Thread-24 : (19, 1)
2020-06-13 23:03:26,481 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:03:26,481 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:03:26,483 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-06-13 23:03:30,354 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-06-13 23:03:30,355 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:03:30,355 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-06-13 23:03:30,356 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:03:30,356 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:03:30,359 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:03:30,359 INFO sqlalchemy.engine.base.Engine Thread-25 : (20, 1)
2020-06-13 23:03:30,359 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:03:30,360 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:03:30,361 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-06-13 23:04:21,741 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:04:21,741 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:04:21,742 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:04:21,743 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:04:21,744 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:04:21,744 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:04:21,744 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:04:21,744 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:04:21,745 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:04:21,745 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:04:21,745 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:04:21,745 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:04:21,746 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:04:21,746 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:04:21,747 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:04:21,747 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:04:21,748 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:04:21,748 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:04:21,748 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:04:21,748 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:04:21,749 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:04:21,749 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:04:21,750 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:04:21,756 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:04:21,756 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:04:21,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:04:21,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:04:21,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:04:21,761 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 23:04:21,761 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 23:04:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 23:04:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 23:04:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 23:04:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 23:04:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 23:04:21,763 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 23:04:21,767 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:21,768 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:04:21,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:21,769 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:21,840 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 23:04:21,840 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 23:04:21,843 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:21,843 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:21,847 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:04:22,132 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 23:04:22,135 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:22,135 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-13 23:04:22,139 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 23:04:22,140 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:22,140 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-13 23:04:22,141 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 23:04:22,142 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:22,142 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:22,142 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-13 23:04:22,144 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:22,148 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:22,147 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 23:04:22,147 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:22,165 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 23:04:22,149 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:22,163 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 23:04:22,161 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:22,165 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:22,166 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 23:04:22,170 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 23:04:22,171 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:22,171 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:22,174 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 23:04:22,186 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 23:04:22,187 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:22,187 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 23:04:22,188 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:22,188 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:22,190 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 23:04:22,900 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 23:04:22,902 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:04:22,902 INFO sqlalchemy.engine.base.Engine Thread-17 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:04:22,903 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:04:22,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:04:22,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:04:22,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:04:22,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:04:22,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:04:22,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:04:22,909 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:04:22,909 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:04:22,910 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:04:22,914 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:04:22,914 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:04:22,915 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:04:22,915 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:04:22,916 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 23:04:22,942 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-13 23:04:22,944 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:04:22,944 INFO sqlalchemy.engine.base.Engine Thread-18 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:04:22,947 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:04:22,947 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:04:22,947 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:04:22,948 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:04:22,948 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:04:22,948 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:04:22,948 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:04:22,953 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:04:22,954 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:04:22,955 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:04:22,960 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:04:22,960 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:04:22,961 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:04:22,961 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:04:22,962 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-13 23:04:46,999 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-13 23:04:47,000 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:47,000 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-13 23:04:47,001 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:47,001 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:47,004 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:04:47,004 INFO sqlalchemy.engine.base.Engine Thread-20 : (23, 1)
2020-06-13 23:04:47,005 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:04:47,005 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:04:47,009 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-13 23:04:54,817 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-13 23:04:54,818 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:54,818 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-13 23:04:54,819 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:54,819 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:54,821 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-13 23:04:57,143 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-13 23:04:57,144 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:04:57,144 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-13 23:04:57,145 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:04:57,145 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:04:57,147 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:04:57,148 INFO sqlalchemy.engine.base.Engine Thread-22 : (20, 1)
2020-06-13 23:04:57,148 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:04:57,149 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:04:57,150 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-13 23:05:41,541 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:05:41,541 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:05:41,542 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:05:41,543 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:05:41,543 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:05:41,543 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:05:41,544 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:05:41,544 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:05:41,544 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:05:41,544 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:05:41,545 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:05:41,545 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:05:41,545 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:05:41,545 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:05:41,546 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:05:41,546 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:05:41,547 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:05:41,547 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:05:41,547 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:05:41,547 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:05:41,548 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:05:41,548 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:05:41,549 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:05:41,551 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:05:41,551 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:05:41,552 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:05:41,552 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:05:41,557 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:05:41,557 INFO sqlalchemy.engine.base.Engine Thread-2 : (23, 1)
2020-06-13 23:05:41,557 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:05:41,558 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:05:41,569 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:05:45,924 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 23:05:45,925 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:05:45,925 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 23:05:45,926 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:05:45,926 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:05:45,929 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:05:45,929 INFO sqlalchemy.engine.base.Engine Thread-3 : (20, 1)
2020-06-13 23:05:45,929 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:05:45,930 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:05:45,931 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 23:05:48,264 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-13 23:05:48,265 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:05:48,265 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-13 23:05:48,266 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:05:48,266 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:05:48,269 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:05:48,270 INFO sqlalchemy.engine.base.Engine Thread-4 : (15, 1)
2020-06-13 23:05:48,270 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:05:48,270 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:05:48,272 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-13 23:05:50,779 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-13 23:05:50,780 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:05:50,780 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-13 23:05:50,781 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:05:50,781 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:05:50,783 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-13 23:06:03,470 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-13 23:06:03,471 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:06:03,471 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-13 23:06:03,471 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:06:03,472 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:06:03,474 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:06:03,474 INFO sqlalchemy.engine.base.Engine Thread-6 : (20, 1)
2020-06-13 23:06:03,475 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:06:03,475 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:06:03,477 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-13 23:06:08,410 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-13 23:06:08,410 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:06:08,411 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-13 23:06:08,412 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:06:08,412 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:06:08,414 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:06:08,414 INFO sqlalchemy.engine.base.Engine Thread-7 : (15, 1)
2020-06-13 23:06:08,415 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:06:08,415 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:06:08,417 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-13 23:06:12,240 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-13 23:06:12,241 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:06:12,241 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-13 23:06:12,242 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:06:12,242 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:06:12,244 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-13 23:06:14,604 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-13 23:06:14,605 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:06:14,605 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-13 23:06:14,606 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:06:14,606 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:06:14,609 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:06:14,609 INFO sqlalchemy.engine.base.Engine Thread-9 : (19, 1)
2020-06-13 23:06:14,610 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:06:14,610 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:06:14,612 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-13 23:08:26,173 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:08:26,173 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:08:26,175 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:08:26,175 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:08:26,176 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:08:26,176 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:08:26,176 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:08:26,176 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:08:26,177 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:08:26,177 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:08:26,177 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:08:26,177 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:08:26,178 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:08:26,178 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:08:26,179 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:08:26,179 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:08:26,179 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:08:26,179 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:08:26,180 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:08:26,180 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:08:26,181 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:08:26,181 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:08:26,181 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:08:26,187 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:08:26,187 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:08:26,189 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:08:26,189 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:08:26,190 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:08:26,192 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 23:08:26,192 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 23:08:26,193 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 23:08:26,193 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 23:08:26,194 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 23:08:26,194 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 23:08:26,194 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 23:08:26,194 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 23:08:26,198 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:26,198 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:08:26,199 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:26,200 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:26,271 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 23:08:26,271 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 23:08:26,272 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:26,272 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:26,275 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:08:26,551 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 23:08:26,556 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:26,556 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-13 23:08:26,560 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:26,562 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:26,560 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 23:08:26,578 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:26,578 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-13 23:08:26,577 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 23:08:26,579 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:26,579 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 23:08:26,580 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:26,580 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 23:08:26,581 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:26,583 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:26,587 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 23:08:26,583 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-13 23:08:26,586 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 23:08:26,588 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:26,588 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:26,589 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:26,589 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:26,593 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 23:08:26,594 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 23:08:26,620 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 23:08:26,621 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:26,622 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 23:08:26,622 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:26,622 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:26,624 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 23:08:27,398 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 23:08:27,401 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:08:27,401 INFO sqlalchemy.engine.base.Engine Thread-17 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:08:27,402 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:08:27,402 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:08:27,402 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:08:27,402 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:08:27,403 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:08:27,403 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:08:27,403 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:08:27,408 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:08:27,408 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:08:27,409 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:08:27,414 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:08:27,414 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:08:27,414 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:08:27,415 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:08:27,416 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 23:08:27,443 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-13 23:08:27,445 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:08:27,445 INFO sqlalchemy.engine.base.Engine Thread-18 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:08:27,446 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:08:27,446 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:08:27,446 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:08:27,447 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:08:27,447 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:08:27,448 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:08:27,448 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:08:27,452 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:08:27,452 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:08:27,453 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:08:27,457 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:08:27,458 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:08:27,458 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:08:27,459 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:08:27,460 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-13 23:08:43,616 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-13 23:08:43,617 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:43,617 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-13 23:08:43,618 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:43,618 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:43,622 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:08:43,622 INFO sqlalchemy.engine.base.Engine Thread-20 : (23, 1)
2020-06-13 23:08:43,623 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:08:43,623 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:08:43,627 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-13 23:08:43,631 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-13 23:08:43,632 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:43,632 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-13 23:08:43,633 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:43,633 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:43,635 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-13 23:08:48,959 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-13 23:08:48,960 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:48,961 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-13 23:08:48,961 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:48,962 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:48,968 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 23:08:48,968 INFO sqlalchemy.engine.base.Engine Thread-22 : (datetime.datetime(2020, 6, 17, 0, 0), datetime.datetime(2020, 6, 17, 23, 59), datetime.datetime(2020, 6, 17, 0, 0), datetime.datetime(2020, 6, 17, 23, 59), datetime.datetime(2020, 6, 17, 0, 0), datetime.datetime(2020, 6, 17, 23, 59))
2020-06-13 23:08:48,969 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:08:48,990 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-13 23:08:50,231 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-13 23:08:50,232 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:50,232 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-13 23:08:50,233 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:50,233 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:50,239 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:08:50,239 INFO sqlalchemy.engine.base.Engine Thread-23 : (20, 1)
2020-06-13 23:08:50,239 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:08:50,240 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:08:50,242 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-13 23:08:52,426 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-13 23:08:52,427 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:52,428 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-13 23:08:52,428 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:52,429 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:52,431 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:08:52,432 INFO sqlalchemy.engine.base.Engine Thread-24 : (23, 1)
2020-06-13 23:08:52,432 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:08:52,432 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:08:52,434 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-06-13 23:08:54,084 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-06-13 23:08:54,086 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:54,086 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-06-13 23:08:54,086 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:54,087 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:54,089 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-06-13 23:08:56,844 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-13 23:08:56,845 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:56,845 INFO sqlalchemy.engine.base.Engine Thread-26 : (1, 1)
2020-06-13 23:08:56,846 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:56,846 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:56,849 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:08:56,849 INFO sqlalchemy.engine.base.Engine Thread-26 : (20, 1)
2020-06-13 23:08:56,850 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:08:56,850 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:08:56,853 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-13 23:08:59,727 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-13 23:08:59,729 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:08:59,729 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-13 23:08:59,729 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:08:59,730 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:08:59,731 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-13 23:11:39,455 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:11:39,455 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:11:39,457 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:11:39,457 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:11:39,458 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:11:39,458 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:11:39,458 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:11:39,458 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:11:39,459 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:11:39,459 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:11:39,459 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:11:39,459 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:11:39,460 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:11:39,460 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:11:39,460 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:11:39,461 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:11:39,461 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:11:39,461 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:11:39,462 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:11:39,462 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:11:39,463 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:11:39,463 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:11:39,463 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:11:39,470 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:11:39,470 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:11:39,471 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:11:39,472 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:11:39,472 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:11:39,475 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 23:11:39,475 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 23:11:39,475 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 23:11:39,475 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 23:11:39,476 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 23:11:39,476 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 23:11:39,476 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 23:11:39,476 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 23:11:39,480 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:39,480 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:11:39,481 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:39,481 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:39,550 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 23:11:39,550 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 23:11:39,551 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:39,551 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:39,554 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:11:39,832 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-13 23:11:39,833 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:39,833 INFO sqlalchemy.engine.base.Engine Thread-26 : (1, 1)
2020-06-13 23:11:39,833 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:39,834 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:39,846 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-13 23:11:39,890 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-13 23:11:39,891 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:39,894 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-13 23:11:39,895 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:39,895 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-13 23:11:39,896 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:39,897 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:39,897 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-06-13 23:11:39,902 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-13 23:11:39,903 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:39,906 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-13 23:11:39,907 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:39,910 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-13 23:11:39,908 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:39,907 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-13 23:11:39,910 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-13 23:11:39,912 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:39,912 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-13 23:11:39,913 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:39,914 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:39,914 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:39,914 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:39,917 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-13 23:11:39,918 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-13 23:11:40,667 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-13 23:11:40,669 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:11:40,670 INFO sqlalchemy.engine.base.Engine Thread-31 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:40,671 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:11:40,671 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:11:40,671 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:11:40,671 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:40,671 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:11:40,671 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:40,672 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:40,677 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:11:40,677 INFO sqlalchemy.engine.base.Engine Thread-31 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:40,677 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:11:40,682 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:11:40,682 INFO sqlalchemy.engine.base.Engine Thread-31 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:40,683 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:11:40,683 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:11:40,684 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-13 23:11:40,707 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-13 23:11:40,709 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:11:40,709 INFO sqlalchemy.engine.base.Engine Thread-32 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:40,710 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:11:40,710 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:11:40,710 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:11:40,710 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:40,710 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:11:40,710 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:40,710 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:40,715 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:11:40,715 INFO sqlalchemy.engine.base.Engine Thread-32 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:40,717 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:11:40,721 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:11:40,722 INFO sqlalchemy.engine.base.Engine Thread-32 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:40,723 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:11:40,723 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:11:40,724 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-13 23:11:49,578 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-06-13 23:11:49,580 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:11:49,580 INFO sqlalchemy.engine.base.Engine Thread-34 : ()
2020-06-13 23:11:49,581 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:11:49,582 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:11:49,582 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:11:49,583 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 23:11:49,583 INFO sqlalchemy.engine.base.Engine Thread-34 : (100,)
2020-06-13 23:11:49,584 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 23:11:49,584 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 23:11:49,584 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 23:11:49,584 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 23:11:49,584 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 23:11:49,584 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 23:11:49,586 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:49,586 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-06-13 23:11:49,587 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:49,587 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:49,591 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 23:11:49,592 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip', 1, 1)
2020-06-13 23:11:49,592 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:49,592 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:49,595 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-06-13 23:11:49,847 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-13 23:11:49,848 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:49,848 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-13 23:11:49,849 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:49,849 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:49,851 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-13 23:11:49,944 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-06-13 23:11:49,945 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:49,946 INFO sqlalchemy.engine.base.Engine Thread-46 : (1, 1)
2020-06-13 23:11:49,947 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-13 23:11:49,948 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:49,948 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-13 23:11:49,949 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:49,949 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:49,949 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:49,951 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:49,953 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-13 23:11:49,954 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:49,954 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-13 23:11:49,956 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-13 23:11:49,957 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:49,958 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-06-13 23:11:49,964 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-06-13 23:11:49,964 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:49,966 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:11:49,966 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-06-13 23:11:49,968 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-06-13 23:11:49,970 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:11:49,970 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:11:49,973 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-06-13 23:11:50,653 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-06-13 23:11:50,654 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:11:50,655 INFO sqlalchemy.engine.base.Engine Thread-49 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:50,656 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:11:50,656 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:11:50,656 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:11:50,656 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:50,656 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:11:50,656 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:50,656 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:50,661 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:11:50,661 INFO sqlalchemy.engine.base.Engine Thread-49 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:50,662 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:11:50,666 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:11:50,666 INFO sqlalchemy.engine.base.Engine Thread-49 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:50,667 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:11:50,667 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:11:50,668 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-06-13 23:11:50,693 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-06-13 23:11:50,694 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:11:50,694 INFO sqlalchemy.engine.base.Engine Thread-50 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:50,695 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:11:50,696 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:11:50,696 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:11:50,696 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:50,696 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:11:50,696 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:50,696 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:11:50,703 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:11:50,703 INFO sqlalchemy.engine.base.Engine Thread-50 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:50,704 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:11:50,709 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:11:50,709 INFO sqlalchemy.engine.base.Engine Thread-50 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:11:50,710 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:11:50,710 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:11:50,711 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
2020-06-13 23:12:10,823 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-06-13 23:12:10,824 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:12:10,824 INFO sqlalchemy.engine.base.Engine Thread-52 : (1, 1)
2020-06-13 23:12:10,825 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:12:10,825 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:12:10,830 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s 
 LIMIT %s
2020-06-13 23:12:10,830 INFO sqlalchemy.engine.base.Engine Thread-52 : (21, 1)
2020-06-13 23:12:10,830 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:12:10,831 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'Change Freeze (Critical)', 83, 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'GBR,IND', 128, None, 106)
2020-06-13 23:12:10,834 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-06-13 23:16:52,493 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:16:52,493 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:16:52,494 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:16:52,495 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:16:52,495 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:16:52,495 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:16:52,496 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:16:52,496 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:16:52,496 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:16:52,496 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:16:52,497 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:16:52,497 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:16:52,497 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:16:52,497 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:16:52,498 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:16:52,498 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:16:52,499 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:16:52,499 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:16:52,499 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:16:52,500 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:16:52,500 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:16:52,500 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:16:52,501 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:16:52,506 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:16:52,506 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:16:52,508 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:16:52,508 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:16:52,508 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:16:52,511 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 23:16:52,511 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 23:16:52,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 23:16:52,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 23:16:52,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 23:16:52,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 23:16:52,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 23:16:52,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 23:16:52,516 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:16:52,516 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:16:52,517 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:16:52,517 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:16:52,586 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 23:16:52,586 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 23:16:52,586 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:16:52,587 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:16:52,589 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:16:52,893 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 23:16:52,894 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:16:52,894 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-13 23:16:52,897 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 23:16:52,898 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:16:52,898 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-13 23:16:52,899 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:16:52,899 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:16:52,901 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:16:52,917 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:16:52,921 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 23:16:52,934 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 23:16:52,934 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 23:16:52,935 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:16:52,936 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-13 23:16:52,936 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:16:52,937 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:16:52,939 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 23:16:52,941 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 23:16:52,942 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:16:52,942 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 23:16:52,943 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:16:52,943 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:16:52,946 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 23:16:52,949 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 23:16:52,951 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:16:52,951 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 23:16:52,951 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:16:52,952 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:16:52,954 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 23:16:53,624 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 23:16:53,626 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:16:53,626 INFO sqlalchemy.engine.base.Engine Thread-17 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:16:53,628 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:16:53,628 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:16:53,628 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:16:53,628 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:16:53,628 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:16:53,628 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:16:53,628 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:16:53,633 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:16:53,633 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:16:53,634 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:16:53,639 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:16:53,639 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:16:53,639 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:16:53,640 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:16:53,641 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 23:16:53,666 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-13 23:16:53,667 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:16:53,667 INFO sqlalchemy.engine.base.Engine Thread-18 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:16:53,669 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:16:53,670 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:16:53,670 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:16:53,670 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:16:53,670 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:16:53,670 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:16:53,670 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:16:53,675 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:16:53,675 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:16:53,676 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:16:53,681 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:16:53,681 INFO sqlalchemy.engine.base.Engine Thread-18 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:16:53,682 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:16:53,682 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:16:53,683 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-13 23:16:59,829 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-13 23:16:59,830 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:16:59,830 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-13 23:16:59,831 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:16:59,831 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:16:59,834 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:16:59,834 INFO sqlalchemy.engine.base.Engine Thread-20 : (21, 1)
2020-06-13 23:16:59,835 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:16:59,835 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (21, 'Locked date', 83, 'Locked', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 130, '', 107)
2020-06-13 23:16:59,839 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-13 23:17:08,046 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-13 23:17:08,047 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:17:08,047 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-13 23:17:08,048 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:17:08,048 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:17:08,049 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:17:08,049 INFO sqlalchemy.engine.base.Engine Thread-21 : (23, 1)
2020-06-13 23:17:08,050 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:17:08,050 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:17:08,052 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-13 23:17:12,758 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-13 23:17:12,759 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:17:12,759 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-13 23:17:12,760 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:17:12,760 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:17:12,762 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:17:12,762 INFO sqlalchemy.engine.base.Engine Thread-22 : (19, 1)
2020-06-13 23:17:12,762 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:17:12,763 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (19, 'Change Freeze RED', 83, 'test locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 128, '', 106)
2020-06-13 23:17:12,765 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-13 23:17:15,797 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-13 23:17:15,798 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:17:15,798 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-13 23:17:15,800 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:17:15,800 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:17:15,802 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:17:15,802 INFO sqlalchemy.engine.base.Engine Thread-23 : (23, 1)
2020-06-13 23:17:15,803 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:17:15,803 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:17:15,805 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-13 23:17:17,331 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-13 23:17:17,332 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:17:17,332 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-13 23:17:17,333 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:17:17,333 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:17:17,335 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:17:17,335 INFO sqlalchemy.engine.base.Engine Thread-24 : (20, 1)
2020-06-13 23:17:17,336 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:17:17,336 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-13 23:17:17,338 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-06-13 23:18:15,171 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-06-13 23:18:15,172 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:18:15,172 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-06-13 23:18:15,173 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:18:15,173 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:18:15,174 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:18:15,175 INFO sqlalchemy.engine.base.Engine Thread-25 : (21, 1)
2020-06-13 23:18:15,175 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:18:15,176 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (21, 'Locked date', 83, 'Locked', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 130, '', 107)
2020-06-13 23:18:15,177 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-06-13 23:18:17,144 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-13 23:18:17,145 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:18:17,145 INFO sqlalchemy.engine.base.Engine Thread-26 : (1, 1)
2020-06-13 23:18:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:18:17,149 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:18:17,150 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:18:17,150 INFO sqlalchemy.engine.base.Engine Thread-26 : (22, 1)
2020-06-13 23:18:17,151 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:18:17,151 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:18:17,153 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-13 23:18:19,696 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-13 23:18:19,697 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:18:19,697 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-13 23:18:19,698 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:18:19,698 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:18:19,700 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:18:19,700 INFO sqlalchemy.engine.base.Engine Thread-27 : (20, 1)
2020-06-13 23:18:19,700 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:18:19,700 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-13 23:18:19,702 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-13 23:20:54,638 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:20:54,638 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:20:54,639 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:20:54,640 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:20:54,640 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:20:54,640 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:20:54,641 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:20:54,641 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:20:54,641 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:20:54,641 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:20:54,641 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:20:54,641 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:20:54,642 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:20:54,642 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:20:54,643 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:20:54,643 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:20:54,643 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:20:54,644 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:20:54,644 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:20:54,644 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:20:54,645 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:20:54,645 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:20:54,646 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:20:54,648 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:20:54,648 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:20:54,649 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:20:54,649 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:20:54,652 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:20:54,652 INFO sqlalchemy.engine.base.Engine Thread-2 : (23, 1)
2020-06-13 23:20:54,653 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:20:54,653 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:20:54,655 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:21:01,805 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-13 23:21:01,806 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:21:01,807 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-13 23:21:01,807 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:21:01,807 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:21:01,809 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:21:01,809 INFO sqlalchemy.engine.base.Engine Thread-3 : (19, 1)
2020-06-13 23:21:01,810 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:21:01,810 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (19, 'Change Freeze RED', 83, 'test locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 128, '', 106)
2020-06-13 23:21:01,819 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-13 23:21:04,565 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-13 23:21:04,566 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:21:04,566 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-13 23:21:04,567 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:21:04,567 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:21:04,569 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:21:04,569 INFO sqlalchemy.engine.base.Engine Thread-4 : (23, 1)
2020-06-13 23:21:04,569 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:21:04,570 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:21:04,571 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-13 23:21:07,546 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-13 23:21:07,547 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:21:07,547 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-13 23:21:07,548 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:21:07,548 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:21:07,549 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:21:07,550 INFO sqlalchemy.engine.base.Engine Thread-5 : (22, 1)
2020-06-13 23:21:07,550 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:21:07,550 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:21:07,552 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-13 23:21:12,688 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-13 23:21:12,689 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:21:12,689 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-13 23:21:12,690 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:21:12,690 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:21:12,692 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:21:12,692 INFO sqlalchemy.engine.base.Engine Thread-6 : (22, 1)
2020-06-13 23:21:12,693 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:21:12,693 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:21:12,695 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-13 23:21:28,126 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-13 23:21:28,127 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:21:28,127 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-13 23:21:28,128 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:21:28,128 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:21:28,129 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:21:28,129 INFO sqlalchemy.engine.base.Engine Thread-7 : (19, 1)
2020-06-13 23:21:28,130 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:21:28,130 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (19, 'Change Freeze RED', 83, 'test locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 128, '', 106)
2020-06-13 23:21:28,132 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-13 23:21:40,088 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-13 23:21:40,089 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:21:40,089 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-13 23:21:40,090 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:21:40,090 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:21:40,091 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:21:40,092 INFO sqlalchemy.engine.base.Engine Thread-8 : (23, 1)
2020-06-13 23:21:40,092 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:21:40,092 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:21:40,094 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-13 23:23:33,956 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-13 23:23:33,956 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:23:33,957 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:23:33,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-13 23:23:33,958 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-13 23:23:33,959 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:23:33,959 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-13 23:23:33,959 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-13 23:23:33,960 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-13 23:23:33,960 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:23:33,960 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-13 23:23:33,960 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-13 23:23:33,960 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-13 23:23:33,960 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:23:33,961 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-13 23:23:33,961 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-13 23:23:33,962 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-13 23:23:33,962 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:23:33,962 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-13 23:23:33,963 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:23:33,963 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-13 23:23:33,963 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:23:33,964 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-13 23:23:33,970 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:23:33,970 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-13 23:23:33,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:23:33,972 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:23:33,972 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:23:33,974 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-13 23:23:33,974 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-13 23:23:33,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-13 23:23:33,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-13 23:23:33,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-13 23:23:33,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-13 23:23:33,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-13 23:23:33,976 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-13 23:23:33,979 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:33,980 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-13 23:23:33,980 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:33,980 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:34,053 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-13 23:23:34,053 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-13 23:23:34,054 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:34,054 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:34,057 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-13 23:23:34,307 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-13 23:23:34,308 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:34,308 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-13 23:23:34,311 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:34,312 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:34,315 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-13 23:23:34,321 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:34,322 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-13 23:23:34,327 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:34,328 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:34,330 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-13 23:23:34,331 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-13 23:23:34,332 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-13 23:23:34,333 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:34,334 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-13 23:23:34,334 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:34,335 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:34,337 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-13 23:23:34,355 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-13 23:23:34,356 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:34,356 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-13 23:23:34,357 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:34,357 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:34,359 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-13 23:23:34,410 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-13 23:23:34,411 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:34,411 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-13 23:23:34,412 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:34,412 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:34,414 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-13 23:23:44,642 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-13 23:23:44,645 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:23:44,645 INFO sqlalchemy.engine.base.Engine Thread-17 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:23:44,647 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:23:44,648 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:23:44,648 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:23:44,648 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:23:44,648 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:23:44,648 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:23:44,648 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:23:44,654 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:23:44,654 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:23:44,656 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:23:44,660 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:23:44,660 INFO sqlalchemy.engine.base.Engine Thread-17 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:23:44,661 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:23:44,661 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:23:44,662 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-13 23:23:44,688 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-13 23:23:44,690 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.typeid AS anon_1_typeid, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.id AS id, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, parameters_1.id AS typeid, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-13 23:23:44,690 INFO sqlalchemy.engine.base.Engine Thread-19 : ('DATE', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:23:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_typeid', 'anon_1_eventType')
2020-06-13 23:23:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (15, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 129, 'DATE')
2020-06-13 23:23:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (19, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 128, 'DATE')
2020-06-13 23:23:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (20, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:23:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (21, datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 130, 'DATE')
2020-06-13 23:23:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (22, datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:23:44,692 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (23, datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 131, 'DATE')
2020-06-13 23:23:44,696 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-13 23:23:44,696 INFO sqlalchemy.engine.base.Engine Thread-19 : ('background-color: #DAFFB9; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:23:44,697 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:23:44,701 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.id AS anon_1_id, anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, anon_1.`eventType` AS `anon_1_eventType`, %s AS style, %s AS `textColor` 
FROM (SELECT bookings_1.id AS id, bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved, %s AS `eventType` 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-13 23:23:44,701 INFO sqlalchemy.engine.base.Engine Thread-19 : ('background-color: #CCCCCC; color: #000000;', 'black', 'BOOKING', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-13 23:23:44,702 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_id', 'anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'anon_1_eventType', 'style', 'textColor')
2020-06-13 23:23:44,702 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (30, datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', None, 'BOOKING', 'background-color: #CCCCCC; color: #000000;', 'black')
2020-06-13 23:23:44,703 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-06-13 23:23:50,283 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-13 23:23:50,284 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:50,284 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-13 23:23:50,285 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:50,285 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:50,287 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:23:50,288 INFO sqlalchemy.engine.base.Engine Thread-20 : (20, 1)
2020-06-13 23:23:50,288 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:23:50,288 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-13 23:23:50,291 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-13 23:23:50,745 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-13 23:23:50,746 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:50,746 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-13 23:23:50,746 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:50,747 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:50,750 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:23:50,750 INFO sqlalchemy.engine.base.Engine Thread-21 : (20,)
2020-06-13 23:23:50,753 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-13 23:23:50,753 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:23:50,754 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:50,755 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-13 23:23:50,755 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-13 23:23:50,761 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:23:50,761 INFO sqlalchemy.engine.base.Engine Thread-21 : (20,)
2020-06-13 23:23:50,762 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:50,762 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:23:50,762 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:50,765 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:23:50,765 INFO sqlalchemy.engine.base.Engine Thread-21 : ()
2020-06-13 23:23:50,767 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:23:50,767 INFO sqlalchemy.engine.base.Engine Thread-22 : (22, 1)
2020-06-13 23:23:50,767 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:23:50,768 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:23:50,768 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:23:50,768 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:23:50,768 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:23:50,771 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:23:50,773 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-13 23:23:50,773 INFO sqlalchemy.engine.base.Engine Thread-21 : ()
2020-06-13 23:23:50,775 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:23:50,775 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:23:50,775 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:23:50,778 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:23:50,778 INFO sqlalchemy.engine.base.Engine Thread-21 : (20,)
2020-06-13 23:23:50,778 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:23:50,779 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'Zone 2 Complexes')
2020-06-13 23:23:50,780 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:23:50,780 INFO sqlalchemy.engine.base.Engine Thread-21 : (1,)
2020-06-13 23:23:50,780 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('complexgroups_1_group_members',)
2020-06-13 23:23:50,780 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row ('1',)
2020-06-13 23:23:50,786 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-13 23:23:50,786 INFO sqlalchemy.engine.base.Engine Thread-21 : ('1',)
2020-06-13 23:23:50,786 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:23:50,786 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:23:50,801 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-13 23:23:50,802 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-13 23:23:50,803 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:50,803 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-13 23:23:50,804 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:50,804 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:50,808 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:23:50,808 INFO sqlalchemy.engine.base.Engine Thread-23 : (22,)
2020-06-13 23:23:50,808 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:23:50,808 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-13 23:23:50,812 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:23:50,812 INFO sqlalchemy.engine.base.Engine Thread-23 : (22,)
2020-06-13 23:23:50,813 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:23:50,814 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:23:50,814 INFO sqlalchemy.engine.base.Engine Thread-23 : ()
2020-06-13 23:23:50,815 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:23:50,815 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:23:50,815 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:23:50,818 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:23:50,818 INFO sqlalchemy.engine.base.Engine Thread-23 : ()
2020-06-13 23:23:50,819 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:23:50,819 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:23:50,819 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:23:50,822 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:23:50,822 INFO sqlalchemy.engine.base.Engine Thread-23 : (22,)
2020-06-13 23:23:50,822 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:23:50,823 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:23:50,824 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:23:50,824 INFO sqlalchemy.engine.base.Engine Thread-23 : (2,)
2020-06-13 23:23:50,824 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexgroups_1_group_members',)
2020-06-13 23:23:50,824 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row ('1,2',)
2020-06-13 23:23:50,829 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:23:50,829 INFO sqlalchemy.engine.base.Engine Thread-23 : ('1', '2')
2020-06-13 23:23:50,830 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:23:50,830 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:23:50,830 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'Made Up Fortigate')
2020-06-13 23:23:50,832 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-13 23:23:54,900 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-13 23:23:54,901 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:54,901 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-13 23:23:54,901 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:54,902 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:54,903 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:23:54,903 INFO sqlalchemy.engine.base.Engine Thread-24 : (23, 1)
2020-06-13 23:23:54,904 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:23:54,904 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:23:54,906 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-06-13 23:23:54,919 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-06-13 23:23:54,920 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:54,920 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-06-13 23:23:54,920 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:54,921 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:54,924 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:23:54,924 INFO sqlalchemy.engine.base.Engine Thread-25 : (23,)
2020-06-13 23:23:54,925 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:23:54,925 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-13 23:23:54,929 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:23:54,929 INFO sqlalchemy.engine.base.Engine Thread-25 : (23,)
2020-06-13 23:23:54,929 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:23:54,931 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:23:54,931 INFO sqlalchemy.engine.base.Engine Thread-25 : ()
2020-06-13 23:23:54,931 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:23:54,931 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:23:54,932 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:23:54,934 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:23:54,934 INFO sqlalchemy.engine.base.Engine Thread-25 : ()
2020-06-13 23:23:54,935 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:23:54,936 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:23:54,936 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:23:54,939 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:23:54,939 INFO sqlalchemy.engine.base.Engine Thread-25 : (23,)
2020-06-13 23:23:54,939 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:23:54,939 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:23:54,940 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:23:54,940 INFO sqlalchemy.engine.base.Engine Thread-25 : (2,)
2020-06-13 23:23:54,941 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('complexgroups_1_group_members',)
2020-06-13 23:23:54,941 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row ('1,2',)
2020-06-13 23:23:54,946 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:23:54,946 INFO sqlalchemy.engine.base.Engine Thread-25 : ('1', '2')
2020-06-13 23:23:54,946 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:23:54,946 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:23:54,947 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (2, 'Made Up Fortigate')
2020-06-13 23:23:54,949 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-06-13 23:23:58,567 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-13 23:23:58,568 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:58,568 INFO sqlalchemy.engine.base.Engine Thread-26 : (1, 1)
2020-06-13 23:23:58,569 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:58,569 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:58,571 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:23:58,571 INFO sqlalchemy.engine.base.Engine Thread-26 : (20, 1)
2020-06-13 23:23:58,571 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:23:58,572 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-13 23:23:58,574 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-13 23:23:58,595 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-13 23:23:58,596 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:23:58,596 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-13 23:23:58,597 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:23:58,597 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:23:58,600 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:23:58,601 INFO sqlalchemy.engine.base.Engine Thread-27 : (20,)
2020-06-13 23:23:58,601 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:23:58,601 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-13 23:23:58,605 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:23:58,605 INFO sqlalchemy.engine.base.Engine Thread-27 : (20,)
2020-06-13 23:23:58,606 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:23:58,607 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:23:58,607 INFO sqlalchemy.engine.base.Engine Thread-27 : ()
2020-06-13 23:23:58,608 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:23:58,608 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:23:58,608 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:23:58,611 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:23:58,611 INFO sqlalchemy.engine.base.Engine Thread-27 : ()
2020-06-13 23:23:58,612 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:23:58,612 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:23:58,612 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:23:58,614 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:23:58,615 INFO sqlalchemy.engine.base.Engine Thread-27 : (20,)
2020-06-13 23:23:58,615 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:23:58,615 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'Zone 2 Complexes')
2020-06-13 23:23:58,616 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:23:58,616 INFO sqlalchemy.engine.base.Engine Thread-27 : (1,)
2020-06-13 23:23:58,617 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('complexgroups_1_group_members',)
2020-06-13 23:23:58,617 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row ('1',)
2020-06-13 23:23:58,622 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-13 23:23:58,622 INFO sqlalchemy.engine.base.Engine Thread-27 : ('1',)
2020-06-13 23:23:58,623 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:23:58,623 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:23:58,625 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-13 23:24:11,153 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-13 23:24:11,154 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:24:11,154 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-06-13 23:24:11,155 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:24:11,155 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:24:11,157 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:24:11,157 INFO sqlalchemy.engine.base.Engine Thread-28 : (20, 1)
2020-06-13 23:24:11,157 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:24:11,158 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-13 23:24:11,160 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-13 23:24:11,174 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-13 23:24:11,175 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:24:11,175 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-13 23:24:11,176 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:24:11,176 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:24:11,180 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:24:11,180 INFO sqlalchemy.engine.base.Engine Thread-29 : (20,)
2020-06-13 23:24:11,180 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:24:11,180 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-13 23:24:11,184 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:24:11,184 INFO sqlalchemy.engine.base.Engine Thread-29 : (20,)
2020-06-13 23:24:11,185 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:24:11,186 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:24:11,186 INFO sqlalchemy.engine.base.Engine Thread-29 : ()
2020-06-13 23:24:11,187 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:24:11,187 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:24:11,187 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:24:11,190 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:24:11,190 INFO sqlalchemy.engine.base.Engine Thread-29 : ()
2020-06-13 23:24:11,191 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:24:11,191 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:24:11,191 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:24:11,194 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:24:11,194 INFO sqlalchemy.engine.base.Engine Thread-29 : (20,)
2020-06-13 23:24:11,195 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:24:11,195 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'Zone 2 Complexes')
2020-06-13 23:24:11,196 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:24:11,196 INFO sqlalchemy.engine.base.Engine Thread-29 : (1,)
2020-06-13 23:24:11,196 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('complexgroups_1_group_members',)
2020-06-13 23:24:11,196 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row ('1',)
2020-06-13 23:24:11,204 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-13 23:24:11,204 INFO sqlalchemy.engine.base.Engine Thread-29 : ('1',)
2020-06-13 23:24:11,204 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:24:11,204 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:24:11,206 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-13 23:24:16,507 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-13 23:24:16,508 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:24:16,508 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-13 23:24:16,509 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:24:16,509 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:24:16,511 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:24:16,511 INFO sqlalchemy.engine.base.Engine Thread-30 : (22, 1)
2020-06-13 23:24:16,512 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:24:16,512 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:24:16,514 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-13 23:24:16,528 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-13 23:24:16,529 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:24:16,529 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-13 23:24:16,530 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:24:16,530 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:24:16,534 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:24:16,534 INFO sqlalchemy.engine.base.Engine Thread-31 : (22,)
2020-06-13 23:24:16,534 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:24:16,534 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-13 23:24:16,538 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:24:16,538 INFO sqlalchemy.engine.base.Engine Thread-31 : (22,)
2020-06-13 23:24:16,539 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:24:16,540 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:24:16,541 INFO sqlalchemy.engine.base.Engine Thread-31 : ()
2020-06-13 23:24:16,541 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:24:16,541 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:24:16,541 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:24:16,544 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:24:16,544 INFO sqlalchemy.engine.base.Engine Thread-31 : ()
2020-06-13 23:24:16,545 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:24:16,545 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:24:16,545 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:24:16,548 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:24:16,548 INFO sqlalchemy.engine.base.Engine Thread-31 : (22,)
2020-06-13 23:24:16,549 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:24:16,549 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:24:16,550 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:24:16,550 INFO sqlalchemy.engine.base.Engine Thread-31 : (2,)
2020-06-13 23:24:16,550 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexgroups_1_group_members',)
2020-06-13 23:24:16,550 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row ('1,2',)
2020-06-13 23:24:16,556 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:24:16,556 INFO sqlalchemy.engine.base.Engine Thread-31 : ('1', '2')
2020-06-13 23:24:16,556 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:24:16,557 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:24:16,557 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (2, 'Made Up Fortigate')
2020-06-13 23:24:16,559 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-13 23:24:20,769 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-13 23:24:20,770 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:24:20,770 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-13 23:24:20,771 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:24:20,771 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:24:20,772 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:24:20,772 INFO sqlalchemy.engine.base.Engine Thread-32 : (15, 1)
2020-06-13 23:24:20,773 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:24:20,774 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (15, 'Summer Change Freeze', 83, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'GBR,IND', 129, '1', 106)
2020-06-13 23:24:20,778 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-13 23:24:23,408 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-06-13 23:24:23,409 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:24:23,409 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-06-13 23:24:23,410 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:24:23,410 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:24:23,416 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-13 23:24:23,416 INFO sqlalchemy.engine.base.Engine Thread-33 : (datetime.datetime(2020, 6, 14, 0, 0), datetime.datetime(2020, 6, 14, 23, 59), datetime.datetime(2020, 6, 14, 0, 0), datetime.datetime(2020, 6, 14, 23, 59), datetime.datetime(2020, 6, 14, 0, 0), datetime.datetime(2020, 6, 14, 23, 59))
2020-06-13 23:24:23,416 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:24:23,436 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-06-13 23:24:29,361 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-06-13 23:24:29,362 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:24:29,362 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-06-13 23:24:29,363 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:24:29,363 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:24:29,365 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:24:29,365 INFO sqlalchemy.engine.base.Engine Thread-34 : (23, 1)
2020-06-13 23:24:29,365 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:24:29,366 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:24:29,368 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-06-13 23:24:29,381 INFO sqlalchemy.engine.base.Engine Thread-35 : BEGIN (implicit)
2020-06-13 23:24:29,382 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:24:29,382 INFO sqlalchemy.engine.base.Engine Thread-35 : (1, 1)
2020-06-13 23:24:29,383 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:24:29,383 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:24:29,387 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:24:29,387 INFO sqlalchemy.engine.base.Engine Thread-35 : (23,)
2020-06-13 23:24:29,387 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:24:29,387 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-13 23:24:29,391 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:24:29,391 INFO sqlalchemy.engine.base.Engine Thread-35 : (23,)
2020-06-13 23:24:29,391 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:24:29,393 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:24:29,393 INFO sqlalchemy.engine.base.Engine Thread-35 : ()
2020-06-13 23:24:29,393 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:24:29,394 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:24:29,394 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:24:29,397 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:24:29,397 INFO sqlalchemy.engine.base.Engine Thread-35 : ()
2020-06-13 23:24:29,398 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:24:29,398 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:24:29,398 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:24:29,401 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:24:29,401 INFO sqlalchemy.engine.base.Engine Thread-35 : (23,)
2020-06-13 23:24:29,401 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:24:29,401 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:24:29,402 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:24:29,402 INFO sqlalchemy.engine.base.Engine Thread-35 : (2,)
2020-06-13 23:24:29,403 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('complexgroups_1_group_members',)
2020-06-13 23:24:29,403 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row ('1,2',)
2020-06-13 23:24:29,408 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:24:29,408 INFO sqlalchemy.engine.base.Engine Thread-35 : ('1', '2')
2020-06-13 23:24:29,409 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:24:29,409 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:24:29,409 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (2, 'Made Up Fortigate')
2020-06-13 23:24:29,411 INFO sqlalchemy.engine.base.Engine Thread-35 : ROLLBACK
2020-06-13 23:26:01,466 INFO sqlalchemy.engine.base.Engine Thread-36 : BEGIN (implicit)
2020-06-13 23:26:01,467 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:26:01,467 INFO sqlalchemy.engine.base.Engine Thread-36 : (1, 1)
2020-06-13 23:26:01,469 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:26:01,470 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:26:01,471 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:26:01,471 INFO sqlalchemy.engine.base.Engine Thread-36 : (21, 1)
2020-06-13 23:26:01,472 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:26:01,472 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (21, 'Locked date', 83, 'Locked', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 130, '', 107)
2020-06-13 23:26:01,474 INFO sqlalchemy.engine.base.Engine Thread-36 : ROLLBACK
2020-06-13 23:26:05,771 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-06-13 23:26:05,772 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:26:05,772 INFO sqlalchemy.engine.base.Engine Thread-37 : (1, 1)
2020-06-13 23:26:05,772 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:26:05,772 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:26:05,774 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:26:05,774 INFO sqlalchemy.engine.base.Engine Thread-37 : (23, 1)
2020-06-13 23:26:05,775 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:26:05,775 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:26:05,777 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-06-13 23:26:05,795 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-06-13 23:26:05,796 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:26:05,796 INFO sqlalchemy.engine.base.Engine Thread-38 : (1, 1)
2020-06-13 23:26:05,797 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:26:05,797 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:26:05,801 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:26:05,801 INFO sqlalchemy.engine.base.Engine Thread-38 : (23,)
2020-06-13 23:26:05,802 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:26:05,802 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-13 23:26:05,805 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:26:05,805 INFO sqlalchemy.engine.base.Engine Thread-38 : (23,)
2020-06-13 23:26:05,806 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:26:05,807 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:26:05,807 INFO sqlalchemy.engine.base.Engine Thread-38 : ()
2020-06-13 23:26:05,808 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:26:05,808 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:26:05,808 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:26:05,811 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:26:05,811 INFO sqlalchemy.engine.base.Engine Thread-38 : ()
2020-06-13 23:26:05,812 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:26:05,812 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:26:05,812 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:26:05,815 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:26:05,815 INFO sqlalchemy.engine.base.Engine Thread-38 : (23,)
2020-06-13 23:26:05,815 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:26:05,815 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:26:05,817 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:26:05,817 INFO sqlalchemy.engine.base.Engine Thread-38 : (2,)
2020-06-13 23:26:05,817 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('complexgroups_1_group_members',)
2020-06-13 23:26:05,817 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row ('1,2',)
2020-06-13 23:26:05,822 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:26:05,822 INFO sqlalchemy.engine.base.Engine Thread-38 : ('1', '2')
2020-06-13 23:26:05,823 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:26:05,823 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:26:05,823 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (2, 'Made Up Fortigate')
2020-06-13 23:26:05,825 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-06-13 23:26:47,812 INFO sqlalchemy.engine.base.Engine Thread-39 : BEGIN (implicit)
2020-06-13 23:26:47,813 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:26:47,813 INFO sqlalchemy.engine.base.Engine Thread-39 : (1, 1)
2020-06-13 23:26:47,814 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:26:47,814 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:26:47,816 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:26:47,816 INFO sqlalchemy.engine.base.Engine Thread-39 : (22, 1)
2020-06-13 23:26:47,816 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:26:47,816 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:26:47,819 INFO sqlalchemy.engine.base.Engine Thread-39 : ROLLBACK
2020-06-13 23:26:47,831 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-06-13 23:26:47,832 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:26:47,832 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-06-13 23:26:47,833 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:26:47,833 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:26:47,837 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:26:47,837 INFO sqlalchemy.engine.base.Engine Thread-40 : (22,)
2020-06-13 23:26:47,837 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:26:47,838 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-13 23:26:47,841 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:26:47,841 INFO sqlalchemy.engine.base.Engine Thread-40 : (22,)
2020-06-13 23:26:47,842 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:26:47,844 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:26:47,844 INFO sqlalchemy.engine.base.Engine Thread-40 : ()
2020-06-13 23:26:47,844 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:26:47,845 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:26:47,845 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:26:47,848 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:26:47,848 INFO sqlalchemy.engine.base.Engine Thread-40 : ()
2020-06-13 23:26:47,849 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:26:47,849 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:26:47,849 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:26:47,852 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:26:47,852 INFO sqlalchemy.engine.base.Engine Thread-40 : (22,)
2020-06-13 23:26:47,852 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:26:47,852 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:26:47,853 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:26:47,853 INFO sqlalchemy.engine.base.Engine Thread-40 : (2,)
2020-06-13 23:26:47,854 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexgroups_1_group_members',)
2020-06-13 23:26:47,854 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row ('1,2',)
2020-06-13 23:26:47,862 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:26:47,862 INFO sqlalchemy.engine.base.Engine Thread-40 : ('1', '2')
2020-06-13 23:26:47,862 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:26:47,862 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:26:47,862 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Made Up Fortigate')
2020-06-13 23:26:47,864 INFO sqlalchemy.engine.base.Engine Thread-40 : ROLLBACK
2020-06-13 23:26:51,587 INFO sqlalchemy.engine.base.Engine Thread-41 : BEGIN (implicit)
2020-06-13 23:26:51,588 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:26:51,588 INFO sqlalchemy.engine.base.Engine Thread-41 : (1, 1)
2020-06-13 23:26:51,589 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:26:51,589 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:26:51,591 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:26:51,591 INFO sqlalchemy.engine.base.Engine Thread-41 : (23, 1)
2020-06-13 23:26:51,592 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:26:51,592 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:26:51,594 INFO sqlalchemy.engine.base.Engine Thread-41 : ROLLBACK
2020-06-13 23:26:51,608 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-06-13 23:26:51,609 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:26:51,609 INFO sqlalchemy.engine.base.Engine Thread-42 : (1, 1)
2020-06-13 23:26:51,609 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:26:51,609 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:26:51,613 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:26:51,613 INFO sqlalchemy.engine.base.Engine Thread-42 : (23,)
2020-06-13 23:26:51,613 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:26:51,614 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-13 23:26:51,617 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:26:51,618 INFO sqlalchemy.engine.base.Engine Thread-42 : (23,)
2020-06-13 23:26:51,618 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:26:51,620 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:26:51,620 INFO sqlalchemy.engine.base.Engine Thread-42 : ()
2020-06-13 23:26:51,620 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:26:51,620 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:26:51,621 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:26:51,623 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:26:51,623 INFO sqlalchemy.engine.base.Engine Thread-42 : ()
2020-06-13 23:26:51,624 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:26:51,625 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:26:51,625 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:26:51,627 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:26:51,627 INFO sqlalchemy.engine.base.Engine Thread-42 : (23,)
2020-06-13 23:26:51,628 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:26:51,628 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:26:51,629 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:26:51,629 INFO sqlalchemy.engine.base.Engine Thread-42 : (2,)
2020-06-13 23:26:51,629 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('complexgroups_1_group_members',)
2020-06-13 23:26:51,629 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row ('1,2',)
2020-06-13 23:26:51,635 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:26:51,635 INFO sqlalchemy.engine.base.Engine Thread-42 : ('1', '2')
2020-06-13 23:26:51,635 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:26:51,636 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:26:51,636 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (2, 'Made Up Fortigate')
2020-06-13 23:26:51,638 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-06-13 23:27:48,647 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-06-13 23:27:48,648 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:27:48,648 INFO sqlalchemy.engine.base.Engine Thread-43 : (1, 1)
2020-06-13 23:27:48,649 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:27:48,650 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:27:48,651 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:27:48,651 INFO sqlalchemy.engine.base.Engine Thread-43 : (15, 1)
2020-06-13 23:27:48,652 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:27:48,652 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (15, 'Summer Change Freeze', 83, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'GBR,IND', 129, '1', 106)
2020-06-13 23:27:48,654 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-06-13 23:27:52,275 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-13 23:27:52,276 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:27:52,276 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-13 23:27:52,277 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:27:52,277 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:27:52,279 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:27:52,279 INFO sqlalchemy.engine.base.Engine Thread-44 : (15, 1)
2020-06-13 23:27:52,279 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:27:52,280 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (15, 'Summer Change Freeze', 83, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'GBR,IND', 129, '1', 106)
2020-06-13 23:27:52,281 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-13 23:28:05,727 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-13 23:28:05,728 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:28:05,728 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-13 23:28:05,729 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:28:05,729 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:28:05,731 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:28:05,731 INFO sqlalchemy.engine.base.Engine Thread-45 : (21, 1)
2020-06-13 23:28:05,731 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:28:05,732 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (21, 'Locked date', 83, 'Locked', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 130, '', 107)
2020-06-13 23:28:05,733 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-13 23:28:12,062 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-06-13 23:28:12,063 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:28:12,063 INFO sqlalchemy.engine.base.Engine Thread-46 : (1, 1)
2020-06-13 23:28:12,063 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:28:12,064 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:28:12,065 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:28:12,065 INFO sqlalchemy.engine.base.Engine Thread-46 : (22, 1)
2020-06-13 23:28:12,066 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:28:12,066 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:28:12,068 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-06-13 23:28:12,084 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-13 23:28:12,085 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:28:12,085 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-13 23:28:12,086 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:28:12,086 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:28:12,090 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:28:12,090 INFO sqlalchemy.engine.base.Engine Thread-47 : (22,)
2020-06-13 23:28:12,091 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:28:12,091 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-13 23:28:12,094 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:28:12,094 INFO sqlalchemy.engine.base.Engine Thread-47 : (22,)
2020-06-13 23:28:12,095 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:28:12,097 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:28:12,097 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-06-13 23:28:12,097 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:28:12,097 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:28:12,100 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:28:12,101 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-06-13 23:28:12,101 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:28:12,105 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:28:12,105 INFO sqlalchemy.engine.base.Engine Thread-47 : (22,)
2020-06-13 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:28:12,106 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:28:12,106 INFO sqlalchemy.engine.base.Engine Thread-47 : (2,)
2020-06-13 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_1_group_members',)
2020-06-13 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row ('1,2',)
2020-06-13 23:28:12,112 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:28:12,112 INFO sqlalchemy.engine.base.Engine Thread-47 : ('1', '2')
2020-06-13 23:28:12,113 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:28:12,113 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:28:12,113 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Made Up Fortigate')
2020-06-13 23:28:12,115 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-06-13 23:29:51,888 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-06-13 23:29:51,890 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:29:51,890 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-06-13 23:29:51,891 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:29:51,891 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:29:51,893 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:29:51,893 INFO sqlalchemy.engine.base.Engine Thread-48 : (15, 1)
2020-06-13 23:29:51,894 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:29:51,894 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (15, 'Summer Change Freeze', 83, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'GBR,IND', 129, '1', 106)
2020-06-13 23:29:51,896 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-06-13 23:30:08,197 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-06-13 23:30:08,198 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:30:08,198 INFO sqlalchemy.engine.base.Engine Thread-49 : (1, 1)
2020-06-13 23:30:08,198 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:30:08,199 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:30:08,200 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-13 23:30:08,201 INFO sqlalchemy.engine.base.Engine Thread-49 : (23, 1)
2020-06-13 23:30:08,201 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-13 23:30:08,201 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-13 23:30:08,203 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-06-13 23:30:08,217 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-06-13 23:30:08,218 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-13 23:30:08,218 INFO sqlalchemy.engine.base.Engine Thread-50 : (1, 1)
2020-06-13 23:30:08,219 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-13 23:30:08,219 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 6, 9, 17, 5, 46), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-13 23:30:08,223 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-13 23:30:08,223 INFO sqlalchemy.engine.base.Engine Thread-50 : (23,)
2020-06-13 23:30:08,223 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-13 23:30:08,223 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-13 23:30:08,227 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-13 23:30:08,227 INFO sqlalchemy.engine.base.Engine Thread-50 : (23,)
2020-06-13 23:30:08,228 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-13 23:30:08,230 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-13 23:30:08,230 INFO sqlalchemy.engine.base.Engine Thread-50 : ()
2020-06-13 23:30:08,230 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-13 23:30:08,230 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-13 23:30:08,231 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-13 23:30:08,233 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-13 23:30:08,234 INFO sqlalchemy.engine.base.Engine Thread-50 : ()
2020-06-13 23:30:08,234 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-13 23:30:08,235 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-13 23:30:08,235 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-13 23:30:08,237 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-13 23:30:08,237 INFO sqlalchemy.engine.base.Engine Thread-50 : (23,)
2020-06-13 23:30:08,238 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-13 23:30:08,238 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (2, 'Zone 5 Complexes')
2020-06-13 23:30:08,239 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-13 23:30:08,239 INFO sqlalchemy.engine.base.Engine Thread-50 : (2,)
2020-06-13 23:30:08,239 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('complexgroups_1_group_members',)
2020-06-13 23:30:08,240 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row ('1,2',)
2020-06-13 23:30:08,245 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-13 23:30:08,245 INFO sqlalchemy.engine.base.Engine Thread-50 : ('1', '2')
2020-06-13 23:30:08,246 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-13 23:30:08,246 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'Made Up CheckPoint')
2020-06-13 23:30:08,246 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (2, 'Made Up Fortigate')
2020-06-13 23:30:08,248 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
