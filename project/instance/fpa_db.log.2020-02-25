2020-02-25 11:16:12,108 INFO sqlalchemy.engine.base.Engine Thread-227 : BEGIN (implicit)
2020-02-25 11:16:12,111 INFO sqlalchemy.engine.base.Engine Thread-227 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 11:16:12,111 INFO sqlalchemy.engine.base.Engine Thread-227 : ()
2020-02-25 11:16:12,113 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 11:16:12,114 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 11:16:12,114 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 11:16:12,116 INFO sqlalchemy.engine.base.Engine Thread-227 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:16:12,116 INFO sqlalchemy.engine.base.Engine Thread-227 : (1, 1)
2020-02-25 11:16:12,117 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:16:12,117 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:16:12,123 INFO sqlalchemy.engine.base.Engine Thread-227 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 11:16:12,123 INFO sqlalchemy.engine.base.Engine Thread-227 : ('philip', 1, 1)
2020-02-25 11:16:12,124 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:16:12,124 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:16:12,126 INFO sqlalchemy.engine.base.Engine Thread-227 : ROLLBACK
2020-02-25 11:16:13,000 INFO sqlalchemy.engine.base.Engine Thread-251 : BEGIN (implicit)
2020-02-25 11:16:13,001 INFO sqlalchemy.engine.base.Engine Thread-252 : BEGIN (implicit)
2020-02-25 11:16:13,003 INFO sqlalchemy.engine.base.Engine Thread-251 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:16:13,007 INFO sqlalchemy.engine.base.Engine Thread-251 : (1, 1)
2020-02-25 11:16:13,006 INFO sqlalchemy.engine.base.Engine Thread-252 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:16:13,009 INFO sqlalchemy.engine.base.Engine Thread-254 : BEGIN (implicit)
2020-02-25 11:16:13,009 DEBUG sqlalchemy.engine.base.Engine Thread-251 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:16:13,011 DEBUG sqlalchemy.engine.base.Engine Thread-251 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:16:13,012 INFO sqlalchemy.engine.base.Engine Thread-251 : ROLLBACK
2020-02-25 11:16:13,011 INFO sqlalchemy.engine.base.Engine Thread-254 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:16:13,010 INFO sqlalchemy.engine.base.Engine Thread-253 : BEGIN (implicit)
2020-02-25 11:16:13,012 INFO sqlalchemy.engine.base.Engine Thread-254 : (1, 1)
2020-02-25 11:16:13,009 INFO sqlalchemy.engine.base.Engine Thread-252 : (1, 1)
2020-02-25 11:16:13,013 INFO sqlalchemy.engine.base.Engine Thread-253 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:16:13,014 INFO sqlalchemy.engine.base.Engine Thread-253 : (1, 1)
2020-02-25 11:16:13,015 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:16:13,015 DEBUG sqlalchemy.engine.base.Engine Thread-252 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:16:13,016 DEBUG sqlalchemy.engine.base.Engine Thread-253 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:16:13,016 DEBUG sqlalchemy.engine.base.Engine Thread-253 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:16:13,017 INFO sqlalchemy.engine.base.Engine Thread-252 : ROLLBACK
2020-02-25 11:16:13,018 DEBUG sqlalchemy.engine.base.Engine Thread-254 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:16:13,018 DEBUG sqlalchemy.engine.base.Engine Thread-254 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:16:13,019 INFO sqlalchemy.engine.base.Engine Thread-254 : ROLLBACK
2020-02-25 11:16:13,020 INFO sqlalchemy.engine.base.Engine Thread-253 : ROLLBACK
2020-02-25 11:16:13,281 INFO sqlalchemy.engine.base.Engine Thread-255 : BEGIN (implicit)
2020-02-25 11:16:13,282 INFO sqlalchemy.engine.base.Engine Thread-255 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:16:13,282 INFO sqlalchemy.engine.base.Engine Thread-255 : (1, 1)
2020-02-25 11:16:13,283 DEBUG sqlalchemy.engine.base.Engine Thread-255 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:16:13,283 DEBUG sqlalchemy.engine.base.Engine Thread-255 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:16:13,284 INFO sqlalchemy.engine.base.Engine Thread-255 : ROLLBACK
2020-02-25 11:16:13,332 INFO sqlalchemy.engine.base.Engine Thread-256 : BEGIN (implicit)
2020-02-25 11:16:13,334 INFO sqlalchemy.engine.base.Engine Thread-256 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:16:13,334 INFO sqlalchemy.engine.base.Engine Thread-256 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 11:16:13,335 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:16:13,335 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:16:13,338 INFO sqlalchemy.engine.base.Engine Thread-256 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:16:13,338 INFO sqlalchemy.engine.base.Engine Thread-256 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 11:16:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:16:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:16:13,343 INFO sqlalchemy.engine.base.Engine Thread-256 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 11:16:13,343 INFO sqlalchemy.engine.base.Engine Thread-256 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 11:16:13,344 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:16:13,344 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,344 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,344 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,344 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,344 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,344 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,344 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,348 INFO sqlalchemy.engine.base.Engine Thread-256 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 11:16:13,348 INFO sqlalchemy.engine.base.Engine Thread-256 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 11:16:13,349 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:16:13,349 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,349 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,349 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,349 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,350 DEBUG sqlalchemy.engine.base.Engine Thread-256 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,351 INFO sqlalchemy.engine.base.Engine Thread-256 : ROLLBACK
2020-02-25 11:16:13,385 INFO sqlalchemy.engine.base.Engine Thread-257 : BEGIN (implicit)
2020-02-25 11:16:13,386 INFO sqlalchemy.engine.base.Engine Thread-257 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:16:13,386 INFO sqlalchemy.engine.base.Engine Thread-257 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 11:16:13,387 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:16:13,388 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:16:13,391 INFO sqlalchemy.engine.base.Engine Thread-257 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:16:13,391 INFO sqlalchemy.engine.base.Engine Thread-257 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 11:16:13,392 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:16:13,392 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:16:13,396 INFO sqlalchemy.engine.base.Engine Thread-257 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 11:16:13,396 INFO sqlalchemy.engine.base.Engine Thread-257 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 11:16:13,397 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:16:13,397 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,397 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,397 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,397 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,397 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,397 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,397 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:16:13,400 INFO sqlalchemy.engine.base.Engine Thread-257 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 11:16:13,401 INFO sqlalchemy.engine.base.Engine Thread-257 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 11:16:13,401 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:16:13,402 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,402 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,402 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,402 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,402 DEBUG sqlalchemy.engine.base.Engine Thread-257 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:16:13,403 INFO sqlalchemy.engine.base.Engine Thread-257 : ROLLBACK
2020-02-25 11:18:52,292 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-25 11:18:52,292 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-25 11:18:52,293 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-25 11:18:52,294 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-25 11:18:52,295 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-25 11:18:52,295 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-25 11:18:52,295 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-25 11:18:52,296 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-25 11:18:52,296 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-25 11:18:52,296 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-25 11:18:52,296 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-25 11:18:52,297 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-25 11:18:52,297 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-25 11:18:52,297 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-25 11:18:52,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-25 11:18:52,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-25 11:18:52,299 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-25 11:18:52,299 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-25 11:18:52,300 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-25 11:18:52,300 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-25 11:18:52,300 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-25 11:18:52,300 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-25 11:18:52,301 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-25 11:18:52,303 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:18:52,303 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), 'YES')
2020-02-25 11:18:52,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:18:52,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:18:52,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:18:52,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:18:52,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:18:52,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:18:52,309 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:18:52,309 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), 'NO')
2020-02-25 11:18:52,310 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:18:52,310 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:18:52,310 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:18:52,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:18:52,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:18:52,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:18:52,316 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 11:18:52,317 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-02-25 11:18:52,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:18:52,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:18:52,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:18:52,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:18:52,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:18:52,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:18:52,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:18:52,319 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:18:52,322 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 11:18:52,323 INFO sqlalchemy.engine.base.Engine Thread-2 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 12, 31, 0, 0))
2020-02-25 11:18:52,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:18:52,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:18:52,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:18:52,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:18:52,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:18:52,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:18:52,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:18:52,327 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-25 11:18:52,730 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-02-25 11:18:52,733 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:18:52,733 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-02-25 11:18:52,734 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:18:52,735 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:18:52,753 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-02-25 11:20:29,542 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-02-25 11:20:29,548 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 11:20:29,548 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-02-25 11:20:29,552 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 11:20:29,552 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 11:20:29,553 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 11:20:29,555 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:20:29,555 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-02-25 11:20:29,556 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:20:29,556 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:20:29,625 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 11:20:29,625 INFO sqlalchemy.engine.base.Engine Thread-4 : ('philip', 1, 1)
2020-02-25 11:20:29,626 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:20:29,626 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:20:29,628 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-02-25 11:20:30,291 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-02-25 11:20:30,292 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:20:30,292 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-02-25 11:20:30,296 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:20:30,296 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:20:30,297 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-02-25 11:20:30,302 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-02-25 11:20:30,304 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:20:30,304 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-02-25 11:20:30,305 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:20:30,305 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-02-25 11:20:30,306 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:20:30,307 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:20:30,308 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-02-25 11:20:30,308 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-02-25 11:20:30,308 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-02-25 11:20:30,309 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:20:30,310 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-02-25 11:20:30,311 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:20:30,311 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:20:30,311 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:20:30,312 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:20:30,313 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-02-25 11:20:30,314 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-02-25 11:20:30,438 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-02-25 11:20:30,439 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:20:30,440 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-02-25 11:20:30,440 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:20:30,441 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:20:30,442 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-02-25 11:20:30,507 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-02-25 11:20:30,508 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:20:30,508 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 11:20:30,509 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:20:30,509 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:20:30,512 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:20:30,512 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 11:20:30,513 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:20:30,513 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:20:30,517 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 11:20:30,517 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 11:20:30,518 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:20:30,518 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,518 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,518 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,518 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,518 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,518 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,519 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,523 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 11:20:30,523 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 11:20:30,524 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:20:30,524 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,524 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,524 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,524 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,524 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,526 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-02-25 11:20:30,554 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-02-25 11:20:30,555 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:20:30,555 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 11:20:30,556 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:20:30,556 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 11:20:30,560 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 11:20:30,560 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 11:20:30,561 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:20:30,561 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 11:20:30,565 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 11:20:30,565 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 11:20:30,566 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:20:30,566 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,567 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,567 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,567 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,567 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,567 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,567 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 11:20:30,571 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 11:20:30,571 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 11:20:30,572 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 11:20:30,572 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,572 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,572 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,572 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,572 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 11:20:30,574 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-02-25 11:25:55,726 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-02-25 11:25:55,729 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 11:25:55,729 INFO sqlalchemy.engine.base.Engine Thread-21 : ()
2020-02-25 11:25:55,731 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 11:25:55,732 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 11:25:55,732 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 11:25:55,734 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:25:55,734 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-02-25 11:25:55,735 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:25:55,735 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:25:55,740 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 11:25:55,740 INFO sqlalchemy.engine.base.Engine Thread-21 : ('philip', 1, 1)
2020-02-25 11:25:55,741 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:25:55,741 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:25:55,743 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-02-25 11:25:56,376 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-02-25 11:25:56,379 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:25:56,379 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-02-25 11:25:56,381 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-02-25 11:25:56,382 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:25:56,388 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-02-25 11:25:56,385 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:25:56,385 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-02-25 11:25:56,392 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:25:56,391 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-02-25 11:25:56,392 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-02-25 11:25:56,388 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:25:56,393 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:25:56,402 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:25:56,401 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-02-25 11:25:56,401 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:25:56,409 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:25:56,393 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:25:56,410 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-02-25 11:25:56,402 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-02-25 11:25:56,411 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-02-25 11:25:56,414 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:25:56,414 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:25:56,416 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-02-25 11:25:56,456 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-02-25 11:25:56,457 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 11:25:56,457 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-02-25 11:25:56,457 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 11:25:56,458 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 11:25:56,459 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-02-25 23:11:31,668 INFO sqlalchemy.engine.base.Engine Thread-3 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-25 23:11:31,669 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-02-25 23:11:31,670 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('Variable_name', 'Value')
2020-02-25 23:11:31,670 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('sql_mode', '')
2020-02-25 23:11:31,671 INFO sqlalchemy.engine.base.Engine Thread-3 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-25 23:11:31,671 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-02-25 23:11:31,672 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('Variable_name', 'Value')
2020-02-25 23:11:31,672 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('lower_case_table_names', '0')
2020-02-25 23:11:31,672 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT DATABASE()
2020-02-25 23:11:31,672 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-02-25 23:11:31,672 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('DATABASE()',)
2020-02-25 23:11:31,673 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('fmapp',)
2020-02-25 23:11:31,673 INFO sqlalchemy.engine.base.Engine Thread-3 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-25 23:11:31,673 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-02-25 23:11:31,674 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-25 23:11:31,674 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-25 23:11:31,674 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-25 23:11:31,674 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-02-25 23:11:31,675 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-25 23:11:31,675 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-02-25 23:11:31,676 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-25 23:11:31,676 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-02-25 23:11:31,676 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-02-25 23:11:31,677 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-25 23:11:31,677 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-02-25 23:11:31,678 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-25 23:11:31,678 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-25 23:11:31,679 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-25 23:11:31,679 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-25 23:11:31,681 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-25 23:11:31,681 INFO sqlalchemy.engine.base.Engine Thread-3 : (63,)
2020-02-25 23:11:31,682 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-25 23:11:31,682 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-25 23:11:31,682 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-25 23:11:31,682 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-25 23:11:31,684 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-25 23:11:31,684 INFO sqlalchemy.engine.base.Engine Thread-3 : (124, 1)
2020-02-25 23:11:31,684 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-25 23:11:31,685 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-25 23:11:31,705 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-02-25 23:11:36,935 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-02-25 23:11:36,936 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-25 23:11:36,936 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-02-25 23:11:36,936 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-25 23:11:36,937 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-25 23:11:36,937 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-25 23:11:36,937 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-25 23:11:36,938 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-25 23:11:36,938 INFO sqlalchemy.engine.base.Engine Thread-5 : (63,)
2020-02-25 23:11:36,939 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-25 23:11:36,939 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-25 23:11:36,939 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-25 23:11:36,939 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-25 23:11:36,941 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-25 23:11:36,941 INFO sqlalchemy.engine.base.Engine Thread-5 : (124, 1)
2020-02-25 23:11:36,941 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-25 23:11:36,942 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-25 23:11:36,945 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-25 23:11:36,946 INFO sqlalchemy.engine.base.Engine Thread-5 : ('philip', 1)
2020-02-25 23:11:36,946 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:36,947 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 21, 9, 56, 57), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:36,948 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles 
WHERE roles.id = %s 
 LIMIT %s
2020-02-25 23:11:36,948 INFO sqlalchemy.engine.base.Engine Thread-5 : (2, 1)
2020-02-25 23:11:36,949 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-25 23:11:36,949 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-25 23:11:37,259 INFO sqlalchemy.engine.base.Engine Thread-5 : UPDATE users SET last_login=%s WHERE users.id = %s
2020-02-25 23:11:37,260 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 2, 25, 23, 11, 37, 258534), 1)
2020-02-25 23:11:37,261 INFO sqlalchemy.engine.base.Engine Thread-5 : COMMIT
2020-02-25 23:11:37,263 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-02-25 23:11:37,264 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s
2020-02-25 23:11:37,264 INFO sqlalchemy.engine.base.Engine Thread-5 : (1,)
2020-02-25 23:11:37,265 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:37,265 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:37,268 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-02-25 23:11:37,283 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-02-25 23:11:37,284 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:37,285 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-02-25 23:11:37,285 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:37,285 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:37,289 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-25 23:11:37,290 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-02-25 23:11:37,291 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-25 23:11:37,291 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-25 23:11:37,292 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-25 23:11:37,292 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-25 23:11:37,292 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-25 23:11:37,292 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-25 23:11:37,292 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-25 23:11:37,292 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (21, 0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-02-25 23:11:37,292 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (22, 0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-02-25 23:11:37,292 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (23, 0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-02-25 23:11:37,293 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (25, 0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-02-25 23:11:37,293 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (26, 0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-02-25 23:11:37,293 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (28, 0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-02-25 23:11:37,293 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (29, 0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18))
2020-02-25 23:11:37,296 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-25 23:11:37,296 INFO sqlalchemy.engine.base.Engine Thread-6 : ('philip',)
2020-02-25 23:11:37,297 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-25 23:11:37,297 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (21, 0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-02-25 23:11:37,297 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (22, 0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-02-25 23:11:37,297 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (23, 0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-02-25 23:11:37,297 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (25, 0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-02-25 23:11:37,297 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (26, 0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-02-25 23:11:37,297 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (28, 0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-02-25 23:11:37,369 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:11:37,370 INFO sqlalchemy.engine.base.Engine Thread-6 : ('philip', 1, 1)
2020-02-25 23:11:37,370 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:37,371 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:37,373 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:11:37,373 INFO sqlalchemy.engine.base.Engine Thread-6 : ('philip', 1, 1)
2020-02-25 23:11:37,374 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:37,374 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:37,378 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-02-25 23:11:39,406 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-02-25 23:11:39,413 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:11:39,413 INFO sqlalchemy.engine.base.Engine Thread-33 : ()
2020-02-25 23:11:39,414 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:11:39,415 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:11:39,415 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:11:39,417 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:39,417 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-02-25 23:11:39,417 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:39,418 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:39,429 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:11:39,430 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-02-25 23:11:39,430 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:39,431 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:39,432 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-02-25 23:11:43,655 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-02-25 23:11:43,657 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:11:43,657 INFO sqlalchemy.engine.base.Engine Thread-42 : ()
2020-02-25 23:11:43,658 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:11:43,658 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:11:43,658 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:11:43,660 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:43,660 INFO sqlalchemy.engine.base.Engine Thread-42 : (1, 1)
2020-02-25 23:11:43,661 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:43,661 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:43,665 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:11:43,665 INFO sqlalchemy.engine.base.Engine Thread-42 : ('philip', 1, 1)
2020-02-25 23:11:43,666 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:43,666 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:43,667 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-02-25 23:11:44,615 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-02-25 23:11:44,617 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:11:44,617 INFO sqlalchemy.engine.base.Engine Thread-52 : ()
2020-02-25 23:11:44,618 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:11:44,619 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:11:44,619 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:11:44,621 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:44,621 INFO sqlalchemy.engine.base.Engine Thread-52 : (1, 1)
2020-02-25 23:11:44,622 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:44,622 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:44,626 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:11:44,626 INFO sqlalchemy.engine.base.Engine Thread-52 : ('philip', 1, 1)
2020-02-25 23:11:44,627 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:44,627 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:44,629 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-02-25 23:11:55,399 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-02-25 23:11:55,402 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:55,404 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-02-25 23:11:55,407 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:55,407 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:55,411 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-02-25 23:11:55,412 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:55,412 INFO sqlalchemy.engine.base.Engine Thread-63 : (1, 1)
2020-02-25 23:11:55,415 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:55,415 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:55,416 INFO sqlalchemy.engine.base.Engine Thread-63 : ROLLBACK
2020-02-25 23:11:55,417 INFO sqlalchemy.engine.base.Engine Thread-65 : BEGIN (implicit)
2020-02-25 23:11:55,417 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-02-25 23:11:55,419 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:55,419 INFO sqlalchemy.engine.base.Engine Thread-66 : BEGIN (implicit)
2020-02-25 23:11:55,422 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:55,422 INFO sqlalchemy.engine.base.Engine Thread-66 : (1, 1)
2020-02-25 23:11:55,421 INFO sqlalchemy.engine.base.Engine Thread-65 : (1, 1)
2020-02-25 23:11:55,420 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:11:55,422 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-02-25 23:11:55,421 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-02-25 23:11:55,423 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:55,424 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:55,424 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:55,423 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:11:55,425 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:55,426 INFO sqlalchemy.engine.base.Engine Thread-66 : ROLLBACK
2020-02-25 23:11:55,426 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:11:55,427 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-02-25 23:11:55,429 INFO sqlalchemy.engine.base.Engine Thread-65 : ROLLBACK
2020-02-25 23:12:56,447 INFO sqlalchemy.engine.base.Engine Thread-67 : BEGIN (implicit)
2020-02-25 23:12:56,449 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:12:56,449 INFO sqlalchemy.engine.base.Engine Thread-67 : ()
2020-02-25 23:12:56,451 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:12:56,452 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:12:56,452 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:12:56,454 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:12:56,454 INFO sqlalchemy.engine.base.Engine Thread-67 : (1, 1)
2020-02-25 23:12:56,455 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:12:56,455 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:12:56,460 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:12:56,460 INFO sqlalchemy.engine.base.Engine Thread-67 : ('philip', 1, 1)
2020-02-25 23:12:56,460 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:12:56,461 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:12:56,462 INFO sqlalchemy.engine.base.Engine Thread-67 : ROLLBACK
2020-02-25 23:12:56,712 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-02-25 23:12:56,714 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:12:56,714 INFO sqlalchemy.engine.base.Engine Thread-76 : (1, 1)
2020-02-25 23:12:56,716 INFO sqlalchemy.engine.base.Engine Thread-77 : BEGIN (implicit)
2020-02-25 23:12:56,717 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:12:56,717 INFO sqlalchemy.engine.base.Engine Thread-77 : (1, 1)
2020-02-25 23:12:56,718 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:12:56,718 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:12:56,719 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:12:56,720 INFO sqlalchemy.engine.base.Engine Thread-77 : ROLLBACK
2020-02-25 23:12:56,720 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:12:56,721 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-02-25 23:12:56,725 INFO sqlalchemy.engine.base.Engine Thread-78 : BEGIN (implicit)
2020-02-25 23:12:56,726 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:12:56,726 INFO sqlalchemy.engine.base.Engine Thread-78 : (1, 1)
2020-02-25 23:12:56,727 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:12:56,727 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:12:56,730 INFO sqlalchemy.engine.base.Engine Thread-78 : ROLLBACK
2020-02-25 23:12:56,732 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-02-25 23:12:56,734 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:12:56,734 INFO sqlalchemy.engine.base.Engine Thread-79 : (1, 1)
2020-02-25 23:12:56,734 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:12:56,735 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:12:56,736 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-02-25 23:12:56,744 INFO sqlalchemy.engine.base.Engine Thread-80 : BEGIN (implicit)
2020-02-25 23:12:56,745 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:12:56,745 INFO sqlalchemy.engine.base.Engine Thread-80 : (1, 1)
2020-02-25 23:12:56,746 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:12:56,746 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:12:56,747 INFO sqlalchemy.engine.base.Engine Thread-80 : ROLLBACK
2020-02-25 23:12:56,779 INFO sqlalchemy.engine.base.Engine Thread-81 : BEGIN (implicit)
2020-02-25 23:12:56,781 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:12:56,781 INFO sqlalchemy.engine.base.Engine Thread-81 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:12:56,782 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:12:56,782 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:12:56,785 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:12:56,785 INFO sqlalchemy.engine.base.Engine Thread-81 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:12:56,786 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:12:56,786 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:12:56,790 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:12:56,790 INFO sqlalchemy.engine.base.Engine Thread-81 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:12:56,791 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:12:56,791 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,791 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,791 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,791 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,792 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,792 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,792 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,796 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:12:56,796 INFO sqlalchemy.engine.base.Engine Thread-81 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:12:56,797 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:12:56,797 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,797 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,797 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,797 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,797 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,799 INFO sqlalchemy.engine.base.Engine Thread-81 : ROLLBACK
2020-02-25 23:12:56,821 INFO sqlalchemy.engine.base.Engine Thread-82 : BEGIN (implicit)
2020-02-25 23:12:56,822 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:12:56,822 INFO sqlalchemy.engine.base.Engine Thread-82 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:12:56,823 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:12:56,823 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:12:56,827 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:12:56,827 INFO sqlalchemy.engine.base.Engine Thread-82 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:12:56,828 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:12:56,828 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:12:56,832 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:12:56,832 INFO sqlalchemy.engine.base.Engine Thread-82 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:12:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:12:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:12:56,838 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:12:56,838 INFO sqlalchemy.engine.base.Engine Thread-82 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:12:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:12:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:12:56,841 INFO sqlalchemy.engine.base.Engine Thread-82 : ROLLBACK
2020-02-25 23:25:26,719 INFO sqlalchemy.engine.base.Engine Thread-84 : BEGIN (implicit)
2020-02-25 23:25:26,722 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:25:26,722 INFO sqlalchemy.engine.base.Engine Thread-84 : ()
2020-02-25 23:25:26,725 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:25:26,726 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:25:26,726 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:25:26,728 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:25:26,728 INFO sqlalchemy.engine.base.Engine Thread-84 : (1, 1)
2020-02-25 23:25:26,729 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:25:26,730 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:25:26,734 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:25:26,734 INFO sqlalchemy.engine.base.Engine Thread-84 : ('philip', 1, 1)
2020-02-25 23:25:26,735 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:25:26,735 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:25:26,737 INFO sqlalchemy.engine.base.Engine Thread-84 : ROLLBACK
2020-02-25 23:25:27,015 INFO sqlalchemy.engine.base.Engine Thread-93 : BEGIN (implicit)
2020-02-25 23:25:27,017 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:25:27,017 INFO sqlalchemy.engine.base.Engine Thread-93 : (1, 1)
2020-02-25 23:25:27,019 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:25:27,021 INFO sqlalchemy.engine.base.Engine Thread-94 : BEGIN (implicit)
2020-02-25 23:25:27,021 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:25:27,024 INFO sqlalchemy.engine.base.Engine Thread-95 : BEGIN (implicit)
2020-02-25 23:25:27,026 INFO sqlalchemy.engine.base.Engine Thread-96 : BEGIN (implicit)
2020-02-25 23:25:27,027 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:25:27,029 INFO sqlalchemy.engine.base.Engine Thread-93 : ROLLBACK
2020-02-25 23:25:27,030 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:25:27,031 INFO sqlalchemy.engine.base.Engine Thread-95 : (1, 1)
2020-02-25 23:25:27,031 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:25:27,033 INFO sqlalchemy.engine.base.Engine Thread-96 : (1, 1)
2020-02-25 23:25:27,032 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:25:27,033 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:25:27,034 INFO sqlalchemy.engine.base.Engine Thread-95 : ROLLBACK
2020-02-25 23:25:27,031 INFO sqlalchemy.engine.base.Engine Thread-94 : (1, 1)
2020-02-25 23:25:27,035 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:25:27,036 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:25:27,036 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:25:27,037 INFO sqlalchemy.engine.base.Engine Thread-96 : ROLLBACK
2020-02-25 23:25:27,037 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:25:27,039 INFO sqlalchemy.engine.base.Engine Thread-94 : ROLLBACK
2020-02-25 23:25:27,047 INFO sqlalchemy.engine.base.Engine Thread-97 : BEGIN (implicit)
2020-02-25 23:25:27,048 INFO sqlalchemy.engine.base.Engine Thread-97 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:25:27,049 INFO sqlalchemy.engine.base.Engine Thread-97 : (1, 1)
2020-02-25 23:25:27,049 DEBUG sqlalchemy.engine.base.Engine Thread-97 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:25:27,049 DEBUG sqlalchemy.engine.base.Engine Thread-97 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:25:27,050 INFO sqlalchemy.engine.base.Engine Thread-97 : ROLLBACK
2020-02-25 23:25:27,067 INFO sqlalchemy.engine.base.Engine Thread-98 : BEGIN (implicit)
2020-02-25 23:25:27,069 INFO sqlalchemy.engine.base.Engine Thread-98 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:25:27,069 INFO sqlalchemy.engine.base.Engine Thread-98 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:25:27,070 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:25:27,070 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:25:27,073 INFO sqlalchemy.engine.base.Engine Thread-98 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:25:27,073 INFO sqlalchemy.engine.base.Engine Thread-98 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:25:27,074 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:25:27,074 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:25:27,077 INFO sqlalchemy.engine.base.Engine Thread-98 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:25:27,077 INFO sqlalchemy.engine.base.Engine Thread-98 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:25:27,078 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:25:27,078 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,078 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,079 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,079 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,079 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,079 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,079 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,082 INFO sqlalchemy.engine.base.Engine Thread-98 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:25:27,082 INFO sqlalchemy.engine.base.Engine Thread-98 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:25:27,083 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:25:27,083 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,083 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,084 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,084 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,084 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,085 INFO sqlalchemy.engine.base.Engine Thread-98 : ROLLBACK
2020-02-25 23:25:27,114 INFO sqlalchemy.engine.base.Engine Thread-99 : BEGIN (implicit)
2020-02-25 23:25:27,116 INFO sqlalchemy.engine.base.Engine Thread-99 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:25:27,116 INFO sqlalchemy.engine.base.Engine Thread-99 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:25:27,117 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:25:27,117 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:25:27,120 INFO sqlalchemy.engine.base.Engine Thread-99 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:25:27,120 INFO sqlalchemy.engine.base.Engine Thread-99 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:25:27,122 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:25:27,123 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:25:27,127 INFO sqlalchemy.engine.base.Engine Thread-99 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:25:27,127 INFO sqlalchemy.engine.base.Engine Thread-99 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:25:27,128 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:25:27,128 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,128 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,129 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,129 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,129 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,129 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,129 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:25:27,133 INFO sqlalchemy.engine.base.Engine Thread-99 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:25:27,133 INFO sqlalchemy.engine.base.Engine Thread-99 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:25:27,134 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:25:27,134 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,134 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,134 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,134 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,135 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:25:27,136 INFO sqlalchemy.engine.base.Engine Thread-99 : ROLLBACK
2020-02-25 23:28:40,850 INFO sqlalchemy.engine.base.Engine Thread-101 : BEGIN (implicit)
2020-02-25 23:28:40,852 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:28:40,852 INFO sqlalchemy.engine.base.Engine Thread-101 : ()
2020-02-25 23:28:40,853 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:28:40,854 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:28:40,854 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:28:40,856 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:28:40,856 INFO sqlalchemy.engine.base.Engine Thread-101 : (1, 1)
2020-02-25 23:28:40,857 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:28:40,857 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:28:40,862 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:28:40,862 INFO sqlalchemy.engine.base.Engine Thread-101 : ('philip', 1, 1)
2020-02-25 23:28:40,862 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:28:40,863 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:28:40,864 INFO sqlalchemy.engine.base.Engine Thread-101 : ROLLBACK
2020-02-25 23:28:41,119 INFO sqlalchemy.engine.base.Engine Thread-111 : BEGIN (implicit)
2020-02-25 23:28:41,120 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:28:41,120 INFO sqlalchemy.engine.base.Engine Thread-111 : (1, 1)
2020-02-25 23:28:41,122 INFO sqlalchemy.engine.base.Engine Thread-110 : BEGIN (implicit)
2020-02-25 23:28:41,123 INFO sqlalchemy.engine.base.Engine Thread-110 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:28:41,123 INFO sqlalchemy.engine.base.Engine Thread-110 : (1, 1)
2020-02-25 23:28:41,123 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:28:41,125 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:28:41,128 INFO sqlalchemy.engine.base.Engine Thread-111 : ROLLBACK
2020-02-25 23:28:41,127 INFO sqlalchemy.engine.base.Engine Thread-112 : BEGIN (implicit)
2020-02-25 23:28:41,124 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:28:41,130 INFO sqlalchemy.engine.base.Engine Thread-113 : BEGIN (implicit)
2020-02-25 23:28:41,131 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:28:41,133 INFO sqlalchemy.engine.base.Engine Thread-112 : (1, 1)
2020-02-25 23:28:41,133 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:28:41,131 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:28:41,133 INFO sqlalchemy.engine.base.Engine Thread-113 : (1, 1)
2020-02-25 23:28:41,134 INFO sqlalchemy.engine.base.Engine Thread-110 : ROLLBACK
2020-02-25 23:28:41,135 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:28:41,135 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:28:41,136 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:28:41,137 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:28:41,138 INFO sqlalchemy.engine.base.Engine Thread-113 : ROLLBACK
2020-02-25 23:28:41,137 INFO sqlalchemy.engine.base.Engine Thread-112 : ROLLBACK
2020-02-25 23:28:41,152 INFO sqlalchemy.engine.base.Engine Thread-114 : BEGIN (implicit)
2020-02-25 23:28:41,153 INFO sqlalchemy.engine.base.Engine Thread-114 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:28:41,153 INFO sqlalchemy.engine.base.Engine Thread-114 : (1, 1)
2020-02-25 23:28:41,154 DEBUG sqlalchemy.engine.base.Engine Thread-114 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:28:41,154 DEBUG sqlalchemy.engine.base.Engine Thread-114 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:28:41,155 INFO sqlalchemy.engine.base.Engine Thread-114 : ROLLBACK
2020-02-25 23:28:41,170 INFO sqlalchemy.engine.base.Engine Thread-115 : BEGIN (implicit)
2020-02-25 23:28:41,171 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:28:41,171 INFO sqlalchemy.engine.base.Engine Thread-115 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:28:41,172 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:28:41,172 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:28:41,176 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:28:41,176 INFO sqlalchemy.engine.base.Engine Thread-115 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:28:41,177 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:28:41,177 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:28:41,180 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:28:41,180 INFO sqlalchemy.engine.base.Engine Thread-115 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:28:41,181 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:28:41,181 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,181 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,181 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,181 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,181 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,182 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,182 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,185 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:28:41,185 INFO sqlalchemy.engine.base.Engine Thread-115 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:28:41,186 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:28:41,186 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,186 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,186 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,186 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,187 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,188 INFO sqlalchemy.engine.base.Engine Thread-115 : ROLLBACK
2020-02-25 23:28:41,207 INFO sqlalchemy.engine.base.Engine Thread-116 : BEGIN (implicit)
2020-02-25 23:28:41,208 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:28:41,208 INFO sqlalchemy.engine.base.Engine Thread-116 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:28:41,209 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:28:41,209 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:28:41,214 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:28:41,215 INFO sqlalchemy.engine.base.Engine Thread-116 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:28:41,215 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:28:41,216 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:28:41,219 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:28:41,219 INFO sqlalchemy.engine.base.Engine Thread-116 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:28:41,221 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:28:41,222 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,222 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,222 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,222 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,222 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,222 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,223 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:28:41,226 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:28:41,226 INFO sqlalchemy.engine.base.Engine Thread-116 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:28:41,227 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:28:41,228 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,228 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,228 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,228 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,229 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:28:41,230 INFO sqlalchemy.engine.base.Engine Thread-116 : ROLLBACK
2020-02-25 23:29:22,915 INFO sqlalchemy.engine.base.Engine Thread-118 : BEGIN (implicit)
2020-02-25 23:29:22,917 INFO sqlalchemy.engine.base.Engine Thread-118 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:29:22,917 INFO sqlalchemy.engine.base.Engine Thread-118 : ()
2020-02-25 23:29:22,919 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:29:22,919 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:29:22,920 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:29:22,922 INFO sqlalchemy.engine.base.Engine Thread-118 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:29:22,922 INFO sqlalchemy.engine.base.Engine Thread-118 : (1, 1)
2020-02-25 23:29:22,922 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:29:22,923 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:29:22,926 INFO sqlalchemy.engine.base.Engine Thread-118 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:29:22,927 INFO sqlalchemy.engine.base.Engine Thread-118 : ('philip', 1, 1)
2020-02-25 23:29:22,927 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:29:22,928 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:29:22,930 INFO sqlalchemy.engine.base.Engine Thread-118 : ROLLBACK
2020-02-25 23:29:23,199 INFO sqlalchemy.engine.base.Engine Thread-127 : BEGIN (implicit)
2020-02-25 23:29:23,201 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:29:23,202 INFO sqlalchemy.engine.base.Engine Thread-127 : (1, 1)
2020-02-25 23:29:23,204 INFO sqlalchemy.engine.base.Engine Thread-128 : BEGIN (implicit)
2020-02-25 23:29:23,206 INFO sqlalchemy.engine.base.Engine Thread-129 : BEGIN (implicit)
2020-02-25 23:29:23,209 INFO sqlalchemy.engine.base.Engine Thread-130 : BEGIN (implicit)
2020-02-25 23:29:23,210 INFO sqlalchemy.engine.base.Engine Thread-128 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:29:23,213 INFO sqlalchemy.engine.base.Engine Thread-128 : (1, 1)
2020-02-25 23:29:23,212 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:29:23,213 INFO sqlalchemy.engine.base.Engine Thread-129 : (1, 1)
2020-02-25 23:29:23,211 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:29:23,213 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:29:23,214 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:29:23,216 INFO sqlalchemy.engine.base.Engine Thread-127 : ROLLBACK
2020-02-25 23:29:23,214 INFO sqlalchemy.engine.base.Engine Thread-130 : (1, 1)
2020-02-25 23:29:23,215 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:29:23,216 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:29:23,217 INFO sqlalchemy.engine.base.Engine Thread-128 : ROLLBACK
2020-02-25 23:29:23,214 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:29:23,218 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:29:23,219 INFO sqlalchemy.engine.base.Engine Thread-129 : ROLLBACK
2020-02-25 23:29:23,221 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:29:23,221 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:29:23,222 INFO sqlalchemy.engine.base.Engine Thread-130 : ROLLBACK
2020-02-25 23:29:23,242 INFO sqlalchemy.engine.base.Engine Thread-131 : BEGIN (implicit)
2020-02-25 23:29:23,249 INFO sqlalchemy.engine.base.Engine Thread-131 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:29:23,250 INFO sqlalchemy.engine.base.Engine Thread-131 : (1, 1)
2020-02-25 23:29:23,254 INFO sqlalchemy.engine.base.Engine Thread-132 : BEGIN (implicit)
2020-02-25 23:29:23,255 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:29:23,255 INFO sqlalchemy.engine.base.Engine Thread-132 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:29:23,256 DEBUG sqlalchemy.engine.base.Engine Thread-131 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:29:23,257 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:29:23,257 DEBUG sqlalchemy.engine.base.Engine Thread-131 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:29:23,257 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:29:23,261 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:29:23,261 INFO sqlalchemy.engine.base.Engine Thread-132 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:29:23,262 INFO sqlalchemy.engine.base.Engine Thread-131 : ROLLBACK
2020-02-25 23:29:23,262 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:29:23,262 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:29:23,267 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:29:23,267 INFO sqlalchemy.engine.base.Engine Thread-132 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:29:23,268 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:29:23,268 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,268 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,268 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,268 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,268 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,268 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,268 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,272 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:29:23,272 INFO sqlalchemy.engine.base.Engine Thread-132 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:29:23,273 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:29:23,273 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,274 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,274 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,274 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,274 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,275 INFO sqlalchemy.engine.base.Engine Thread-132 : ROLLBACK
2020-02-25 23:29:23,301 INFO sqlalchemy.engine.base.Engine Thread-133 : BEGIN (implicit)
2020-02-25 23:29:23,302 INFO sqlalchemy.engine.base.Engine Thread-133 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:29:23,302 INFO sqlalchemy.engine.base.Engine Thread-133 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:29:23,304 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:29:23,305 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:29:23,308 INFO sqlalchemy.engine.base.Engine Thread-133 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:29:23,309 INFO sqlalchemy.engine.base.Engine Thread-133 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:29:23,310 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:29:23,310 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:29:23,314 INFO sqlalchemy.engine.base.Engine Thread-133 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:29:23,314 INFO sqlalchemy.engine.base.Engine Thread-133 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:29:23,315 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:29:23,315 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,315 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,315 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,316 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,316 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,316 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,316 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:29:23,320 INFO sqlalchemy.engine.base.Engine Thread-133 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:29:23,320 INFO sqlalchemy.engine.base.Engine Thread-133 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:29:23,320 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:29:23,321 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,321 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,321 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,321 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,321 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:29:23,322 INFO sqlalchemy.engine.base.Engine Thread-133 : ROLLBACK
2020-02-25 23:30:03,762 INFO sqlalchemy.engine.base.Engine Thread-135 : BEGIN (implicit)
2020-02-25 23:30:03,764 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:30:03,764 INFO sqlalchemy.engine.base.Engine Thread-135 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-02-25 23:30:03,766 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:30:03,767 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:30:03,770 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:30:03,771 INFO sqlalchemy.engine.base.Engine Thread-135 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-02-25 23:30:03,771 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:30:03,772 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:30:03,775 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:30:03,775 INFO sqlalchemy.engine.base.Engine Thread-135 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-25 23:30:03,776 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:30:03,776 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:30:03,776 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:30:03,776 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:30:03,776 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:30:03,776 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:30:03,779 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:30:03,780 INFO sqlalchemy.engine.base.Engine Thread-135 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-25 23:30:03,780 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:30:03,781 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:30:03,781 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:30:03,781 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:30:03,781 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:30:03,781 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:30:03,782 INFO sqlalchemy.engine.base.Engine Thread-135 : ROLLBACK
2020-02-25 23:32:56,281 INFO sqlalchemy.engine.base.Engine Thread-136 : BEGIN (implicit)
2020-02-25 23:32:56,284 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:32:56,284 INFO sqlalchemy.engine.base.Engine Thread-136 : ()
2020-02-25 23:32:56,286 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:32:56,286 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:32:56,286 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:32:56,289 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:32:56,289 INFO sqlalchemy.engine.base.Engine Thread-136 : (1, 1)
2020-02-25 23:32:56,289 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:32:56,290 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:32:56,294 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:32:56,295 INFO sqlalchemy.engine.base.Engine Thread-136 : ('philip', 1, 1)
2020-02-25 23:32:56,295 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:32:56,295 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:32:56,297 INFO sqlalchemy.engine.base.Engine Thread-136 : ROLLBACK
2020-02-25 23:32:56,531 INFO sqlalchemy.engine.base.Engine Thread-146 : BEGIN (implicit)
2020-02-25 23:32:56,533 INFO sqlalchemy.engine.base.Engine Thread-145 : BEGIN (implicit)
2020-02-25 23:32:56,534 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:32:56,541 INFO sqlalchemy.engine.base.Engine Thread-146 : (1, 1)
2020-02-25 23:32:56,537 INFO sqlalchemy.engine.base.Engine Thread-147 : BEGIN (implicit)
2020-02-25 23:32:56,540 INFO sqlalchemy.engine.base.Engine Thread-145 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:32:56,542 INFO sqlalchemy.engine.base.Engine Thread-145 : (1, 1)
2020-02-25 23:32:56,542 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:32:56,542 INFO sqlalchemy.engine.base.Engine Thread-147 : (1, 1)
2020-02-25 23:32:56,540 INFO sqlalchemy.engine.base.Engine Thread-148 : BEGIN (implicit)
2020-02-25 23:32:56,544 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:32:56,543 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:32:56,544 INFO sqlalchemy.engine.base.Engine Thread-148 : (1, 1)
2020-02-25 23:32:56,543 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:32:56,545 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:32:56,545 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:32:56,544 DEBUG sqlalchemy.engine.base.Engine Thread-145 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:32:56,546 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:32:56,546 INFO sqlalchemy.engine.base.Engine Thread-146 : ROLLBACK
2020-02-25 23:32:56,547 INFO sqlalchemy.engine.base.Engine Thread-147 : ROLLBACK
2020-02-25 23:32:56,548 DEBUG sqlalchemy.engine.base.Engine Thread-145 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:32:56,550 INFO sqlalchemy.engine.base.Engine Thread-145 : ROLLBACK
2020-02-25 23:32:56,548 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:32:56,551 INFO sqlalchemy.engine.base.Engine Thread-148 : ROLLBACK
2020-02-25 23:32:56,560 INFO sqlalchemy.engine.base.Engine Thread-149 : BEGIN (implicit)
2020-02-25 23:32:56,561 INFO sqlalchemy.engine.base.Engine Thread-149 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:32:56,561 INFO sqlalchemy.engine.base.Engine Thread-149 : (1, 1)
2020-02-25 23:32:56,562 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:32:56,562 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:32:56,563 INFO sqlalchemy.engine.base.Engine Thread-149 : ROLLBACK
2020-02-25 23:32:56,579 INFO sqlalchemy.engine.base.Engine Thread-150 : BEGIN (implicit)
2020-02-25 23:32:56,581 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:32:56,581 INFO sqlalchemy.engine.base.Engine Thread-150 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:32:56,582 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:32:56,582 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:32:56,586 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:32:56,586 INFO sqlalchemy.engine.base.Engine Thread-150 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:32:56,587 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:32:56,587 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:32:56,593 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:32:56,593 INFO sqlalchemy.engine.base.Engine Thread-150 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:32:56,594 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:32:56,594 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,594 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,594 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,594 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,594 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,594 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,594 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,598 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:32:56,598 INFO sqlalchemy.engine.base.Engine Thread-150 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:32:56,599 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:32:56,599 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,599 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,599 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,599 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,599 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,600 INFO sqlalchemy.engine.base.Engine Thread-150 : ROLLBACK
2020-02-25 23:32:56,620 INFO sqlalchemy.engine.base.Engine Thread-151 : BEGIN (implicit)
2020-02-25 23:32:56,621 INFO sqlalchemy.engine.base.Engine Thread-151 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:32:56,621 INFO sqlalchemy.engine.base.Engine Thread-151 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:32:56,623 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:32:56,624 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:32:56,627 INFO sqlalchemy.engine.base.Engine Thread-151 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:32:56,627 INFO sqlalchemy.engine.base.Engine Thread-151 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:32:56,628 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:32:56,629 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:32:56,632 INFO sqlalchemy.engine.base.Engine Thread-151 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:32:56,633 INFO sqlalchemy.engine.base.Engine Thread-151 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:32:56,634 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:32:56,634 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,634 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,634 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,634 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,634 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,634 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,634 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:32:56,638 INFO sqlalchemy.engine.base.Engine Thread-151 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:32:56,638 INFO sqlalchemy.engine.base.Engine Thread-151 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:32:56,639 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:32:56,639 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,639 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,639 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,639 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,639 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:32:56,641 INFO sqlalchemy.engine.base.Engine Thread-151 : ROLLBACK
2020-02-25 23:34:14,405 INFO sqlalchemy.engine.base.Engine Thread-153 : BEGIN (implicit)
2020-02-25 23:34:14,407 INFO sqlalchemy.engine.base.Engine Thread-153 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:34:14,407 INFO sqlalchemy.engine.base.Engine Thread-153 : ()
2020-02-25 23:34:14,408 DEBUG sqlalchemy.engine.base.Engine Thread-153 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:34:14,409 DEBUG sqlalchemy.engine.base.Engine Thread-153 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:34:14,409 DEBUG sqlalchemy.engine.base.Engine Thread-153 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:34:14,411 INFO sqlalchemy.engine.base.Engine Thread-153 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:34:14,411 INFO sqlalchemy.engine.base.Engine Thread-153 : (1, 1)
2020-02-25 23:34:14,412 DEBUG sqlalchemy.engine.base.Engine Thread-153 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:34:14,412 DEBUG sqlalchemy.engine.base.Engine Thread-153 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:34:14,417 INFO sqlalchemy.engine.base.Engine Thread-153 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:34:14,417 INFO sqlalchemy.engine.base.Engine Thread-153 : ('philip', 1, 1)
2020-02-25 23:34:14,417 DEBUG sqlalchemy.engine.base.Engine Thread-153 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:34:14,418 DEBUG sqlalchemy.engine.base.Engine Thread-153 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:34:14,419 INFO sqlalchemy.engine.base.Engine Thread-153 : ROLLBACK
2020-02-25 23:34:14,660 INFO sqlalchemy.engine.base.Engine Thread-162 : BEGIN (implicit)
2020-02-25 23:34:14,662 INFO sqlalchemy.engine.base.Engine Thread-163 : BEGIN (implicit)
2020-02-25 23:34:14,663 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:34:14,664 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:34:14,665 INFO sqlalchemy.engine.base.Engine Thread-162 : (1, 1)
2020-02-25 23:34:14,665 INFO sqlalchemy.engine.base.Engine Thread-163 : (1, 1)
2020-02-25 23:34:14,668 INFO sqlalchemy.engine.base.Engine Thread-164 : BEGIN (implicit)
2020-02-25 23:34:14,668 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:34:14,669 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:34:14,672 INFO sqlalchemy.engine.base.Engine Thread-164 : (1, 1)
2020-02-25 23:34:14,672 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:34:14,673 INFO sqlalchemy.engine.base.Engine Thread-162 : ROLLBACK
2020-02-25 23:34:14,671 INFO sqlalchemy.engine.base.Engine Thread-165 : BEGIN (implicit)
2020-02-25 23:34:14,672 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:34:14,676 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:34:14,675 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:34:14,677 INFO sqlalchemy.engine.base.Engine Thread-163 : ROLLBACK
2020-02-25 23:34:14,674 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:34:14,677 INFO sqlalchemy.engine.base.Engine Thread-165 : (1, 1)
2020-02-25 23:34:14,678 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:34:14,680 INFO sqlalchemy.engine.base.Engine Thread-164 : ROLLBACK
2020-02-25 23:34:14,680 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:34:14,681 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:34:14,682 INFO sqlalchemy.engine.base.Engine Thread-165 : ROLLBACK
2020-02-25 23:34:14,692 INFO sqlalchemy.engine.base.Engine Thread-166 : BEGIN (implicit)
2020-02-25 23:34:14,693 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:34:14,693 INFO sqlalchemy.engine.base.Engine Thread-166 : (1, 1)
2020-02-25 23:34:14,694 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:34:14,694 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:34:14,695 INFO sqlalchemy.engine.base.Engine Thread-166 : ROLLBACK
2020-02-25 23:34:14,706 INFO sqlalchemy.engine.base.Engine Thread-167 : BEGIN (implicit)
2020-02-25 23:34:14,707 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:34:14,707 INFO sqlalchemy.engine.base.Engine Thread-167 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:34:14,708 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:34:14,708 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:34:14,711 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:34:14,712 INFO sqlalchemy.engine.base.Engine Thread-167 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:34:14,712 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:34:14,713 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:34:14,716 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:34:14,716 INFO sqlalchemy.engine.base.Engine Thread-167 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:34:14,717 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:34:14,717 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,717 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,717 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,717 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,718 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,718 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,718 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,721 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:34:14,721 INFO sqlalchemy.engine.base.Engine Thread-167 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:34:14,722 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:34:14,722 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,722 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,722 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,722 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,722 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,724 INFO sqlalchemy.engine.base.Engine Thread-167 : ROLLBACK
2020-02-25 23:34:14,742 INFO sqlalchemy.engine.base.Engine Thread-168 : BEGIN (implicit)
2020-02-25 23:34:14,744 INFO sqlalchemy.engine.base.Engine Thread-168 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:34:14,744 INFO sqlalchemy.engine.base.Engine Thread-168 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:34:14,744 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:34:14,745 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:34:14,748 INFO sqlalchemy.engine.base.Engine Thread-168 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:34:14,748 INFO sqlalchemy.engine.base.Engine Thread-168 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:34:14,749 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:34:14,749 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:34:14,752 INFO sqlalchemy.engine.base.Engine Thread-168 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:34:14,752 INFO sqlalchemy.engine.base.Engine Thread-168 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:34:14,753 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:34:14,753 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,754 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,754 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,754 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,754 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,754 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,754 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:34:14,757 INFO sqlalchemy.engine.base.Engine Thread-168 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:34:14,758 INFO sqlalchemy.engine.base.Engine Thread-168 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:34:14,759 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:34:14,760 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,760 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,760 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,760 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,760 DEBUG sqlalchemy.engine.base.Engine Thread-168 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:34:14,761 INFO sqlalchemy.engine.base.Engine Thread-168 : ROLLBACK
2020-02-25 23:42:56,310 INFO sqlalchemy.engine.base.Engine Thread-170 : BEGIN (implicit)
2020-02-25 23:42:56,312 INFO sqlalchemy.engine.base.Engine Thread-170 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:42:56,313 INFO sqlalchemy.engine.base.Engine Thread-170 : ()
2020-02-25 23:42:56,315 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:42:56,315 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:42:56,316 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:42:56,318 INFO sqlalchemy.engine.base.Engine Thread-170 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:42:56,318 INFO sqlalchemy.engine.base.Engine Thread-170 : (1, 1)
2020-02-25 23:42:56,319 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:42:56,320 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:42:56,325 INFO sqlalchemy.engine.base.Engine Thread-170 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:42:56,325 INFO sqlalchemy.engine.base.Engine Thread-170 : ('philip', 1, 1)
2020-02-25 23:42:56,325 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:42:56,326 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:42:56,327 INFO sqlalchemy.engine.base.Engine Thread-170 : ROLLBACK
2020-02-25 23:42:56,615 INFO sqlalchemy.engine.base.Engine Thread-180 : BEGIN (implicit)
2020-02-25 23:42:56,617 INFO sqlalchemy.engine.base.Engine Thread-179 : BEGIN (implicit)
2020-02-25 23:42:56,618 INFO sqlalchemy.engine.base.Engine Thread-180 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:42:56,624 INFO sqlalchemy.engine.base.Engine Thread-180 : (1, 1)
2020-02-25 23:42:56,623 INFO sqlalchemy.engine.base.Engine Thread-182 : BEGIN (implicit)
2020-02-25 23:42:56,625 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:42:56,620 INFO sqlalchemy.engine.base.Engine Thread-181 : BEGIN (implicit)
2020-02-25 23:42:56,626 INFO sqlalchemy.engine.base.Engine Thread-182 : (1, 1)
2020-02-25 23:42:56,624 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:42:56,627 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:42:56,627 INFO sqlalchemy.engine.base.Engine Thread-181 : (1, 1)
2020-02-25 23:42:56,627 INFO sqlalchemy.engine.base.Engine Thread-179 : (1, 1)
2020-02-25 23:42:56,627 DEBUG sqlalchemy.engine.base.Engine Thread-180 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:42:56,628 DEBUG sqlalchemy.engine.base.Engine Thread-180 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:42:56,629 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:42:56,629 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:42:56,631 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:42:56,630 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:42:56,631 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:42:56,630 INFO sqlalchemy.engine.base.Engine Thread-180 : ROLLBACK
2020-02-25 23:42:56,632 INFO sqlalchemy.engine.base.Engine Thread-182 : ROLLBACK
2020-02-25 23:42:56,633 INFO sqlalchemy.engine.base.Engine Thread-181 : ROLLBACK
2020-02-25 23:42:56,633 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:42:56,636 INFO sqlalchemy.engine.base.Engine Thread-179 : ROLLBACK
2020-02-25 23:42:56,646 INFO sqlalchemy.engine.base.Engine Thread-183 : BEGIN (implicit)
2020-02-25 23:42:56,647 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:42:56,648 INFO sqlalchemy.engine.base.Engine Thread-183 : (1, 1)
2020-02-25 23:42:56,648 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:42:56,648 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:42:56,649 INFO sqlalchemy.engine.base.Engine Thread-183 : ROLLBACK
2020-02-25 23:42:56,664 INFO sqlalchemy.engine.base.Engine Thread-184 : BEGIN (implicit)
2020-02-25 23:42:56,665 INFO sqlalchemy.engine.base.Engine Thread-184 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:42:56,665 INFO sqlalchemy.engine.base.Engine Thread-184 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:42:56,666 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:42:56,666 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:42:56,669 INFO sqlalchemy.engine.base.Engine Thread-184 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:42:56,669 INFO sqlalchemy.engine.base.Engine Thread-184 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:42:56,670 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:42:56,670 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:42:56,674 INFO sqlalchemy.engine.base.Engine Thread-184 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:42:56,674 INFO sqlalchemy.engine.base.Engine Thread-184 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:42:56,675 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:42:56,675 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,675 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,675 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,675 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,676 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,676 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,676 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,679 INFO sqlalchemy.engine.base.Engine Thread-184 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:42:56,679 INFO sqlalchemy.engine.base.Engine Thread-184 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:42:56,680 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:42:56,680 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,680 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,680 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,680 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,680 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,682 INFO sqlalchemy.engine.base.Engine Thread-184 : ROLLBACK
2020-02-25 23:42:56,703 INFO sqlalchemy.engine.base.Engine Thread-185 : BEGIN (implicit)
2020-02-25 23:42:56,705 INFO sqlalchemy.engine.base.Engine Thread-185 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:42:56,705 INFO sqlalchemy.engine.base.Engine Thread-185 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:42:56,706 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:42:56,706 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:42:56,709 INFO sqlalchemy.engine.base.Engine Thread-185 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:42:56,709 INFO sqlalchemy.engine.base.Engine Thread-185 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:42:56,710 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:42:56,710 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:42:56,713 INFO sqlalchemy.engine.base.Engine Thread-185 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:42:56,713 INFO sqlalchemy.engine.base.Engine Thread-185 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:42:56,714 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:42:56,715 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,715 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,715 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,715 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,715 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,715 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,715 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:42:56,718 INFO sqlalchemy.engine.base.Engine Thread-185 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:42:56,719 INFO sqlalchemy.engine.base.Engine Thread-185 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:42:56,720 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:42:56,721 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,721 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,721 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,721 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,721 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:42:56,722 INFO sqlalchemy.engine.base.Engine Thread-185 : ROLLBACK
2020-02-25 23:53:50,701 INFO sqlalchemy.engine.base.Engine Thread-187 : BEGIN (implicit)
2020-02-25 23:53:50,704 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:53:50,704 INFO sqlalchemy.engine.base.Engine Thread-187 : ()
2020-02-25 23:53:50,706 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:53:50,707 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:53:50,707 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:53:50,710 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:53:50,710 INFO sqlalchemy.engine.base.Engine Thread-187 : (1, 1)
2020-02-25 23:53:50,711 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:53:50,711 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:53:50,716 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:53:50,716 INFO sqlalchemy.engine.base.Engine Thread-187 : ('philip', 1, 1)
2020-02-25 23:53:50,717 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:53:50,717 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:53:50,719 INFO sqlalchemy.engine.base.Engine Thread-187 : ROLLBACK
2020-02-25 23:53:50,998 INFO sqlalchemy.engine.base.Engine Thread-196 : BEGIN (implicit)
2020-02-25 23:53:51,000 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:53:51,000 INFO sqlalchemy.engine.base.Engine Thread-196 : (1, 1)
2020-02-25 23:53:51,001 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:53:51,002 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:53:51,005 INFO sqlalchemy.engine.base.Engine Thread-196 : ROLLBACK
2020-02-25 23:53:51,007 INFO sqlalchemy.engine.base.Engine Thread-197 : BEGIN (implicit)
2020-02-25 23:53:51,008 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:53:51,010 INFO sqlalchemy.engine.base.Engine Thread-198 : BEGIN (implicit)
2020-02-25 23:53:51,011 INFO sqlalchemy.engine.base.Engine Thread-197 : (1, 1)
2020-02-25 23:53:51,013 INFO sqlalchemy.engine.base.Engine Thread-199 : BEGIN (implicit)
2020-02-25 23:53:51,015 INFO sqlalchemy.engine.base.Engine Thread-198 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:53:51,016 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:53:51,017 INFO sqlalchemy.engine.base.Engine Thread-198 : (1, 1)
2020-02-25 23:53:51,018 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:53:51,017 INFO sqlalchemy.engine.base.Engine Thread-199 : (1, 1)
2020-02-25 23:53:51,018 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:53:51,017 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:53:51,020 INFO sqlalchemy.engine.base.Engine Thread-198 : ROLLBACK
2020-02-25 23:53:51,020 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:53:51,021 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:53:51,022 INFO sqlalchemy.engine.base.Engine Thread-199 : ROLLBACK
2020-02-25 23:53:51,021 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:53:51,026 INFO sqlalchemy.engine.base.Engine Thread-200 : BEGIN (implicit)
2020-02-25 23:53:51,028 INFO sqlalchemy.engine.base.Engine Thread-197 : ROLLBACK
2020-02-25 23:53:51,029 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:53:51,029 INFO sqlalchemy.engine.base.Engine Thread-200 : (1, 1)
2020-02-25 23:53:51,031 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:53:51,031 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:53:51,032 INFO sqlalchemy.engine.base.Engine Thread-200 : ROLLBACK
2020-02-25 23:53:51,045 INFO sqlalchemy.engine.base.Engine Thread-201 : BEGIN (implicit)
2020-02-25 23:53:51,047 INFO sqlalchemy.engine.base.Engine Thread-201 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:53:51,047 INFO sqlalchemy.engine.base.Engine Thread-201 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:53:51,048 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:53:51,048 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:53:51,052 INFO sqlalchemy.engine.base.Engine Thread-201 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:53:51,052 INFO sqlalchemy.engine.base.Engine Thread-201 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:53:51,053 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:53:51,053 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:53:51,057 INFO sqlalchemy.engine.base.Engine Thread-201 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:53:51,057 INFO sqlalchemy.engine.base.Engine Thread-201 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:53:51,058 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:53:51,058 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,058 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,058 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,058 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,058 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,058 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,059 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,062 INFO sqlalchemy.engine.base.Engine Thread-201 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:53:51,062 INFO sqlalchemy.engine.base.Engine Thread-201 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:53:51,063 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:53:51,064 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,064 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,064 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,064 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,064 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,065 INFO sqlalchemy.engine.base.Engine Thread-201 : ROLLBACK
2020-02-25 23:53:51,094 INFO sqlalchemy.engine.base.Engine Thread-202 : BEGIN (implicit)
2020-02-25 23:53:51,096 INFO sqlalchemy.engine.base.Engine Thread-202 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:53:51,096 INFO sqlalchemy.engine.base.Engine Thread-202 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:53:51,097 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:53:51,097 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:53:51,101 INFO sqlalchemy.engine.base.Engine Thread-202 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:53:51,101 INFO sqlalchemy.engine.base.Engine Thread-202 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:53:51,102 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:53:51,102 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:53:51,106 INFO sqlalchemy.engine.base.Engine Thread-202 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:53:51,107 INFO sqlalchemy.engine.base.Engine Thread-202 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:53:51,109 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:53:51,110 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,110 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,110 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,110 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,110 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,110 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,110 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:53:51,114 INFO sqlalchemy.engine.base.Engine Thread-202 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:53:51,114 INFO sqlalchemy.engine.base.Engine Thread-202 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:53:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:53:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-202 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:53:51,117 INFO sqlalchemy.engine.base.Engine Thread-202 : ROLLBACK
2020-02-25 23:54:07,714 INFO sqlalchemy.engine.base.Engine Thread-204 : BEGIN (implicit)
2020-02-25 23:54:07,716 INFO sqlalchemy.engine.base.Engine Thread-204 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-25 23:54:07,716 INFO sqlalchemy.engine.base.Engine Thread-204 : ()
2020-02-25 23:54:07,717 DEBUG sqlalchemy.engine.base.Engine Thread-204 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-25 23:54:07,718 DEBUG sqlalchemy.engine.base.Engine Thread-204 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 20, 15, 3, 59), 1)
2020-02-25 23:54:07,718 DEBUG sqlalchemy.engine.base.Engine Thread-204 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 21, 0, 7, 33), 1)
2020-02-25 23:54:07,720 INFO sqlalchemy.engine.base.Engine Thread-204 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:54:07,720 INFO sqlalchemy.engine.base.Engine Thread-204 : (1, 1)
2020-02-25 23:54:07,721 DEBUG sqlalchemy.engine.base.Engine Thread-204 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:54:07,721 DEBUG sqlalchemy.engine.base.Engine Thread-204 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:54:07,725 INFO sqlalchemy.engine.base.Engine Thread-204 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-25 23:54:07,725 INFO sqlalchemy.engine.base.Engine Thread-204 : ('philip', 1, 1)
2020-02-25 23:54:07,726 DEBUG sqlalchemy.engine.base.Engine Thread-204 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:54:07,726 DEBUG sqlalchemy.engine.base.Engine Thread-204 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:54:07,728 INFO sqlalchemy.engine.base.Engine Thread-204 : ROLLBACK
2020-02-25 23:54:07,976 INFO sqlalchemy.engine.base.Engine Thread-213 : BEGIN (implicit)
2020-02-25 23:54:07,977 INFO sqlalchemy.engine.base.Engine Thread-213 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:54:07,977 INFO sqlalchemy.engine.base.Engine Thread-213 : (1, 1)
2020-02-25 23:54:07,979 DEBUG sqlalchemy.engine.base.Engine Thread-213 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:54:07,981 INFO sqlalchemy.engine.base.Engine Thread-214 : BEGIN (implicit)
2020-02-25 23:54:07,983 INFO sqlalchemy.engine.base.Engine Thread-215 : BEGIN (implicit)
2020-02-25 23:54:07,987 INFO sqlalchemy.engine.base.Engine Thread-216 : BEGIN (implicit)
2020-02-25 23:54:07,987 DEBUG sqlalchemy.engine.base.Engine Thread-213 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:54:07,988 INFO sqlalchemy.engine.base.Engine Thread-214 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:54:07,990 INFO sqlalchemy.engine.base.Engine Thread-215 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:54:07,991 INFO sqlalchemy.engine.base.Engine Thread-216 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:54:07,993 INFO sqlalchemy.engine.base.Engine Thread-216 : (1, 1)
2020-02-25 23:54:07,992 INFO sqlalchemy.engine.base.Engine Thread-215 : (1, 1)
2020-02-25 23:54:07,993 INFO sqlalchemy.engine.base.Engine Thread-213 : ROLLBACK
2020-02-25 23:54:07,991 INFO sqlalchemy.engine.base.Engine Thread-214 : (1, 1)
2020-02-25 23:54:07,994 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:54:07,994 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:54:07,995 INFO sqlalchemy.engine.base.Engine Thread-216 : ROLLBACK
2020-02-25 23:54:07,995 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:54:07,996 DEBUG sqlalchemy.engine.base.Engine Thread-214 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:54:07,998 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:54:07,998 DEBUG sqlalchemy.engine.base.Engine Thread-214 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:54:08,000 INFO sqlalchemy.engine.base.Engine Thread-215 : ROLLBACK
2020-02-25 23:54:08,001 INFO sqlalchemy.engine.base.Engine Thread-214 : ROLLBACK
2020-02-25 23:54:08,006 INFO sqlalchemy.engine.base.Engine Thread-217 : BEGIN (implicit)
2020-02-25 23:54:08,007 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-25 23:54:08,007 INFO sqlalchemy.engine.base.Engine Thread-217 : (1, 1)
2020-02-25 23:54:08,008 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-25 23:54:08,008 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 2, 25, 23, 11, 37), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-02-25 23:54:08,010 INFO sqlalchemy.engine.base.Engine Thread-217 : ROLLBACK
2020-02-25 23:54:08,024 INFO sqlalchemy.engine.base.Engine Thread-218 : BEGIN (implicit)
2020-02-25 23:54:08,026 INFO sqlalchemy.engine.base.Engine Thread-218 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:54:08,026 INFO sqlalchemy.engine.base.Engine Thread-218 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:54:08,027 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:54:08,027 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:54:08,031 INFO sqlalchemy.engine.base.Engine Thread-218 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:54:08,031 INFO sqlalchemy.engine.base.Engine Thread-218 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:54:08,032 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:54:08,032 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:54:08,036 INFO sqlalchemy.engine.base.Engine Thread-218 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:54:08,036 INFO sqlalchemy.engine.base.Engine Thread-218 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:54:08,037 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:54:08,037 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,037 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,038 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,038 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,038 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,038 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,038 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,043 INFO sqlalchemy.engine.base.Engine Thread-218 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:54:08,043 INFO sqlalchemy.engine.base.Engine Thread-218 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:54:08,044 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:54:08,044 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,044 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,044 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,044 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,045 DEBUG sqlalchemy.engine.base.Engine Thread-218 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,046 INFO sqlalchemy.engine.base.Engine Thread-218 : ROLLBACK
2020-02-25 23:54:08,065 INFO sqlalchemy.engine.base.Engine Thread-219 : BEGIN (implicit)
2020-02-25 23:54:08,067 INFO sqlalchemy.engine.base.Engine Thread-219 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:54:08,067 INFO sqlalchemy.engine.base.Engine Thread-219 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-25 23:54:08,068 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:54:08,068 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-25 23:54:08,072 INFO sqlalchemy.engine.base.Engine Thread-219 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-25 23:54:08,074 INFO sqlalchemy.engine.base.Engine Thread-219 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-25 23:54:08,075 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:54:08,076 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-25 23:54:08,082 INFO sqlalchemy.engine.base.Engine Thread-219 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-25 23:54:08,082 INFO sqlalchemy.engine.base.Engine Thread-219 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:54:08,083 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:54:08,083 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,083 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,083 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,083 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,084 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,084 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,084 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-25 23:54:08,087 INFO sqlalchemy.engine.base.Engine Thread-219 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-25 23:54:08,088 INFO sqlalchemy.engine.base.Engine Thread-219 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-25 23:54:08,089 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-25 23:54:08,089 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,089 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,089 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,089 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,089 DEBUG sqlalchemy.engine.base.Engine Thread-219 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-25 23:54:08,090 INFO sqlalchemy.engine.base.Engine Thread-219 : ROLLBACK
