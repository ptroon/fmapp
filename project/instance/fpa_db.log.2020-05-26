2020-05-26 15:19:00,937 INFO sqlalchemy.engine.base.Engine Thread-527 : BEGIN (implicit)
2020-05-26 15:19:00,940 INFO sqlalchemy.engine.base.Engine Thread-527 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 15:19:00,941 INFO sqlalchemy.engine.base.Engine Thread-527 : ()
2020-05-26 15:19:00,943 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 15:19:00,943 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 15:19:00,943 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 15:19:00,945 INFO sqlalchemy.engine.base.Engine Thread-527 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 15:19:00,945 INFO sqlalchemy.engine.base.Engine Thread-527 : (100,)
2020-05-26 15:19:00,946 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 15:19:00,946 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 15:19:00,947 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 15:19:00,947 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 15:19:00,947 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 15:19:00,947 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 15:19:00,950 INFO sqlalchemy.engine.base.Engine Thread-527 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 15:19:00,950 INFO sqlalchemy.engine.base.Engine Thread-527 : (1, 1)
2020-05-26 15:19:00,950 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:19:00,950 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:19:00,966 INFO sqlalchemy.engine.base.Engine Thread-527 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 15:19:00,966 INFO sqlalchemy.engine.base.Engine Thread-527 : ('philip', 1, 1)
2020-05-26 15:19:00,967 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:19:00,967 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:19:00,969 INFO sqlalchemy.engine.base.Engine Thread-527 : ROLLBACK
2020-05-26 15:19:01,276 INFO sqlalchemy.engine.base.Engine Thread-551 : BEGIN (implicit)
2020-05-26 15:19:01,278 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:19:01,278 INFO sqlalchemy.engine.base.Engine Thread-551 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:19:01,279 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:19:01,280 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:19:01,280 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:19:01,283 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:19:01,283 INFO sqlalchemy.engine.base.Engine Thread-551 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:19:01,284 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:19:01,284 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:19:01,288 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:19:01,289 INFO sqlalchemy.engine.base.Engine Thread-551 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:19:01,289 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:19:01,293 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:19:01,294 INFO sqlalchemy.engine.base.Engine Thread-551 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:19:01,294 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:19:01,294 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:19:01,296 INFO sqlalchemy.engine.base.Engine Thread-551 : ROLLBACK
2020-05-26 15:19:01,321 INFO sqlalchemy.engine.base.Engine Thread-552 : BEGIN (implicit)
2020-05-26 15:19:01,323 INFO sqlalchemy.engine.base.Engine Thread-552 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:19:01,323 INFO sqlalchemy.engine.base.Engine Thread-552 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:19:01,324 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:19:01,325 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:19:01,325 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:19:01,328 INFO sqlalchemy.engine.base.Engine Thread-552 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:19:01,328 INFO sqlalchemy.engine.base.Engine Thread-552 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:19:01,329 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:19:01,329 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:19:01,333 INFO sqlalchemy.engine.base.Engine Thread-552 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:19:01,333 INFO sqlalchemy.engine.base.Engine Thread-552 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:19:01,334 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:19:01,338 INFO sqlalchemy.engine.base.Engine Thread-552 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:19:01,338 INFO sqlalchemy.engine.base.Engine Thread-552 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:19:01,339 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:19:01,339 DEBUG sqlalchemy.engine.base.Engine Thread-552 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:19:01,340 INFO sqlalchemy.engine.base.Engine Thread-552 : ROLLBACK
2020-05-26 15:23:04,380 INFO sqlalchemy.engine.base.Engine Thread-554 : BEGIN (implicit)
2020-05-26 15:23:04,383 INFO sqlalchemy.engine.base.Engine Thread-554 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 15:23:04,383 INFO sqlalchemy.engine.base.Engine Thread-554 : ()
2020-05-26 15:23:04,385 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 15:23:04,386 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 15:23:04,386 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 15:23:04,388 INFO sqlalchemy.engine.base.Engine Thread-554 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 15:23:04,388 INFO sqlalchemy.engine.base.Engine Thread-554 : (100,)
2020-05-26 15:23:04,389 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 15:23:04,389 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 15:23:04,389 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 15:23:04,389 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 15:23:04,389 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 15:23:04,390 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 15:23:04,392 INFO sqlalchemy.engine.base.Engine Thread-554 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 15:23:04,392 INFO sqlalchemy.engine.base.Engine Thread-554 : (1, 1)
2020-05-26 15:23:04,392 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:23:04,393 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:23:04,409 INFO sqlalchemy.engine.base.Engine Thread-554 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 15:23:04,409 INFO sqlalchemy.engine.base.Engine Thread-554 : ('philip', 1, 1)
2020-05-26 15:23:04,410 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:23:04,410 DEBUG sqlalchemy.engine.base.Engine Thread-554 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:23:04,412 INFO sqlalchemy.engine.base.Engine Thread-554 : ROLLBACK
2020-05-26 15:23:04,777 INFO sqlalchemy.engine.base.Engine Thread-564 : BEGIN (implicit)
2020-05-26 15:23:04,779 INFO sqlalchemy.engine.base.Engine Thread-564 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:23:04,779 INFO sqlalchemy.engine.base.Engine Thread-564 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:23:04,780 DEBUG sqlalchemy.engine.base.Engine Thread-564 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:23:04,780 DEBUG sqlalchemy.engine.base.Engine Thread-564 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:23:04,781 DEBUG sqlalchemy.engine.base.Engine Thread-564 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:23:04,784 INFO sqlalchemy.engine.base.Engine Thread-564 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:23:04,784 INFO sqlalchemy.engine.base.Engine Thread-564 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:23:04,785 DEBUG sqlalchemy.engine.base.Engine Thread-564 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:23:04,785 DEBUG sqlalchemy.engine.base.Engine Thread-564 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:23:04,790 INFO sqlalchemy.engine.base.Engine Thread-564 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:23:04,790 INFO sqlalchemy.engine.base.Engine Thread-564 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:23:04,791 DEBUG sqlalchemy.engine.base.Engine Thread-564 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:23:04,794 INFO sqlalchemy.engine.base.Engine Thread-564 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:23:04,794 INFO sqlalchemy.engine.base.Engine Thread-564 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:23:04,795 DEBUG sqlalchemy.engine.base.Engine Thread-564 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:23:04,796 DEBUG sqlalchemy.engine.base.Engine Thread-564 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:23:04,797 INFO sqlalchemy.engine.base.Engine Thread-564 : ROLLBACK
2020-05-26 15:23:04,823 INFO sqlalchemy.engine.base.Engine Thread-566 : BEGIN (implicit)
2020-05-26 15:23:04,824 INFO sqlalchemy.engine.base.Engine Thread-566 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:23:04,824 INFO sqlalchemy.engine.base.Engine Thread-566 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:23:04,825 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:23:04,825 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:23:04,826 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:23:04,829 INFO sqlalchemy.engine.base.Engine Thread-566 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:23:04,829 INFO sqlalchemy.engine.base.Engine Thread-566 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:23:04,830 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:23:04,830 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:23:04,835 INFO sqlalchemy.engine.base.Engine Thread-566 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:23:04,835 INFO sqlalchemy.engine.base.Engine Thread-566 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:23:04,836 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:23:04,840 INFO sqlalchemy.engine.base.Engine Thread-566 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:23:04,841 INFO sqlalchemy.engine.base.Engine Thread-566 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:23:04,841 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:23:04,842 DEBUG sqlalchemy.engine.base.Engine Thread-566 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:23:04,843 INFO sqlalchemy.engine.base.Engine Thread-566 : ROLLBACK
2020-05-26 15:25:31,816 INFO sqlalchemy.engine.base.Engine Thread-567 : BEGIN (implicit)
2020-05-26 15:25:31,818 INFO sqlalchemy.engine.base.Engine Thread-567 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 15:25:31,819 INFO sqlalchemy.engine.base.Engine Thread-567 : ()
2020-05-26 15:25:31,821 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 15:25:31,821 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 15:25:31,821 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 15:25:31,823 INFO sqlalchemy.engine.base.Engine Thread-567 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 15:25:31,823 INFO sqlalchemy.engine.base.Engine Thread-567 : (100,)
2020-05-26 15:25:31,824 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 15:25:31,824 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 15:25:31,824 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 15:25:31,824 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 15:25:31,824 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 15:25:31,824 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 15:25:31,826 INFO sqlalchemy.engine.base.Engine Thread-567 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 15:25:31,826 INFO sqlalchemy.engine.base.Engine Thread-567 : (1, 1)
2020-05-26 15:25:31,827 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:25:31,827 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:25:31,842 INFO sqlalchemy.engine.base.Engine Thread-567 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 15:25:31,842 INFO sqlalchemy.engine.base.Engine Thread-567 : ('philip', 1, 1)
2020-05-26 15:25:31,843 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:25:31,844 DEBUG sqlalchemy.engine.base.Engine Thread-567 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:25:31,846 INFO sqlalchemy.engine.base.Engine Thread-567 : ROLLBACK
2020-05-26 15:25:32,176 INFO sqlalchemy.engine.base.Engine Thread-577 : BEGIN (implicit)
2020-05-26 15:25:32,178 INFO sqlalchemy.engine.base.Engine Thread-577 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:25:32,178 INFO sqlalchemy.engine.base.Engine Thread-577 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:25:32,179 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:25:32,179 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:25:32,179 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:25:32,182 INFO sqlalchemy.engine.base.Engine Thread-577 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:25:32,182 INFO sqlalchemy.engine.base.Engine Thread-577 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:25:32,183 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:25:32,184 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:25:32,188 INFO sqlalchemy.engine.base.Engine Thread-577 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:25:32,188 INFO sqlalchemy.engine.base.Engine Thread-577 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:25:32,189 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:25:32,193 INFO sqlalchemy.engine.base.Engine Thread-577 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:25:32,193 INFO sqlalchemy.engine.base.Engine Thread-577 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:25:32,194 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:25:32,194 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:25:32,195 INFO sqlalchemy.engine.base.Engine Thread-577 : ROLLBACK
2020-05-26 15:25:32,222 INFO sqlalchemy.engine.base.Engine Thread-578 : BEGIN (implicit)
2020-05-26 15:25:32,224 INFO sqlalchemy.engine.base.Engine Thread-578 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:25:32,224 INFO sqlalchemy.engine.base.Engine Thread-578 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:25:32,226 DEBUG sqlalchemy.engine.base.Engine Thread-578 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:25:32,226 DEBUG sqlalchemy.engine.base.Engine Thread-578 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:25:32,226 DEBUG sqlalchemy.engine.base.Engine Thread-578 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:25:32,232 INFO sqlalchemy.engine.base.Engine Thread-578 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:25:32,233 INFO sqlalchemy.engine.base.Engine Thread-578 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:25:32,234 DEBUG sqlalchemy.engine.base.Engine Thread-578 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:25:32,234 DEBUG sqlalchemy.engine.base.Engine Thread-578 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:25:32,238 INFO sqlalchemy.engine.base.Engine Thread-578 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:25:32,238 INFO sqlalchemy.engine.base.Engine Thread-578 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:25:32,239 DEBUG sqlalchemy.engine.base.Engine Thread-578 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:25:32,242 INFO sqlalchemy.engine.base.Engine Thread-578 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:25:32,243 INFO sqlalchemy.engine.base.Engine Thread-578 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:25:32,243 DEBUG sqlalchemy.engine.base.Engine Thread-578 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:25:32,244 DEBUG sqlalchemy.engine.base.Engine Thread-578 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:25:32,244 INFO sqlalchemy.engine.base.Engine Thread-578 : ROLLBACK
2020-05-26 15:26:49,403 INFO sqlalchemy.engine.base.Engine Thread-580 : BEGIN (implicit)
2020-05-26 15:26:49,405 INFO sqlalchemy.engine.base.Engine Thread-580 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 15:26:49,405 INFO sqlalchemy.engine.base.Engine Thread-580 : ('philip', 1, 1)
2020-05-26 15:26:49,406 DEBUG sqlalchemy.engine.base.Engine Thread-580 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:26:49,407 DEBUG sqlalchemy.engine.base.Engine Thread-580 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:26:49,417 INFO sqlalchemy.engine.base.Engine Thread-580 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-05-26 15:26:49,417 INFO sqlalchemy.engine.base.Engine Thread-580 : (108,)
2020-05-26 15:26:49,418 DEBUG sqlalchemy.engine.base.Engine Thread-580 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-05-26 15:26:49,418 DEBUG sqlalchemy.engine.base.Engine Thread-580 : Row (1, 'Made Up CheckPoint', 'YYYYYYY', '02:00', '04:00', 'CheckPoint CMA', 'CheckPoint', 108, 'IND', 'Active')
2020-05-26 15:26:49,419 INFO sqlalchemy.engine.base.Engine Thread-580 : ROLLBACK
2020-05-26 15:54:38,968 INFO sqlalchemy.engine.base.Engine Thread-581 : BEGIN (implicit)
2020-05-26 15:54:38,972 INFO sqlalchemy.engine.base.Engine Thread-581 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 15:54:38,972 INFO sqlalchemy.engine.base.Engine Thread-581 : ()
2020-05-26 15:54:38,975 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 15:54:38,976 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 15:54:38,976 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 15:54:38,978 INFO sqlalchemy.engine.base.Engine Thread-581 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 15:54:38,978 INFO sqlalchemy.engine.base.Engine Thread-581 : (100,)
2020-05-26 15:54:38,979 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 15:54:38,979 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 15:54:38,979 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 15:54:38,979 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 15:54:38,979 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 15:54:38,979 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 15:54:38,982 INFO sqlalchemy.engine.base.Engine Thread-581 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 15:54:38,982 INFO sqlalchemy.engine.base.Engine Thread-581 : (1, 1)
2020-05-26 15:54:38,982 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:54:38,983 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:54:38,988 INFO sqlalchemy.engine.base.Engine Thread-581 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 15:54:38,988 INFO sqlalchemy.engine.base.Engine Thread-581 : ('philip', 1, 1)
2020-05-26 15:54:38,989 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:54:38,989 DEBUG sqlalchemy.engine.base.Engine Thread-581 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:54:38,991 INFO sqlalchemy.engine.base.Engine Thread-581 : ROLLBACK
2020-05-26 15:54:39,341 INFO sqlalchemy.engine.base.Engine Thread-591 : BEGIN (implicit)
2020-05-26 15:54:39,342 INFO sqlalchemy.engine.base.Engine Thread-591 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:54:39,342 INFO sqlalchemy.engine.base.Engine Thread-591 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:54:39,344 DEBUG sqlalchemy.engine.base.Engine Thread-591 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:54:39,344 DEBUG sqlalchemy.engine.base.Engine Thread-591 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:54:39,344 DEBUG sqlalchemy.engine.base.Engine Thread-591 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:54:39,347 INFO sqlalchemy.engine.base.Engine Thread-591 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:54:39,347 INFO sqlalchemy.engine.base.Engine Thread-591 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:54:39,348 DEBUG sqlalchemy.engine.base.Engine Thread-591 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:54:39,348 DEBUG sqlalchemy.engine.base.Engine Thread-591 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:54:39,353 INFO sqlalchemy.engine.base.Engine Thread-591 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:54:39,353 INFO sqlalchemy.engine.base.Engine Thread-591 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:54:39,354 DEBUG sqlalchemy.engine.base.Engine Thread-591 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:54:39,358 INFO sqlalchemy.engine.base.Engine Thread-591 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:54:39,358 INFO sqlalchemy.engine.base.Engine Thread-591 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:54:39,359 DEBUG sqlalchemy.engine.base.Engine Thread-591 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:54:39,359 DEBUG sqlalchemy.engine.base.Engine Thread-591 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:54:39,360 INFO sqlalchemy.engine.base.Engine Thread-591 : ROLLBACK
2020-05-26 15:54:39,391 INFO sqlalchemy.engine.base.Engine Thread-592 : BEGIN (implicit)
2020-05-26 15:54:39,392 INFO sqlalchemy.engine.base.Engine Thread-592 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:54:39,392 INFO sqlalchemy.engine.base.Engine Thread-592 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:54:39,393 DEBUG sqlalchemy.engine.base.Engine Thread-592 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:54:39,393 DEBUG sqlalchemy.engine.base.Engine Thread-592 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:54:39,394 DEBUG sqlalchemy.engine.base.Engine Thread-592 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:54:39,397 INFO sqlalchemy.engine.base.Engine Thread-592 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:54:39,397 INFO sqlalchemy.engine.base.Engine Thread-592 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:54:39,398 DEBUG sqlalchemy.engine.base.Engine Thread-592 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:54:39,398 DEBUG sqlalchemy.engine.base.Engine Thread-592 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:54:39,403 INFO sqlalchemy.engine.base.Engine Thread-592 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:54:39,403 INFO sqlalchemy.engine.base.Engine Thread-592 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:54:39,404 DEBUG sqlalchemy.engine.base.Engine Thread-592 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:54:39,408 INFO sqlalchemy.engine.base.Engine Thread-592 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:54:39,408 INFO sqlalchemy.engine.base.Engine Thread-592 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:54:39,409 DEBUG sqlalchemy.engine.base.Engine Thread-592 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:54:39,409 DEBUG sqlalchemy.engine.base.Engine Thread-592 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:54:39,410 INFO sqlalchemy.engine.base.Engine Thread-592 : ROLLBACK
2020-05-26 15:56:36,417 INFO sqlalchemy.engine.base.Engine Thread-594 : BEGIN (implicit)
2020-05-26 15:56:36,419 INFO sqlalchemy.engine.base.Engine Thread-594 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 15:56:36,419 INFO sqlalchemy.engine.base.Engine Thread-594 : ()
2020-05-26 15:56:36,421 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 15:56:36,421 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 15:56:36,421 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 15:56:36,423 INFO sqlalchemy.engine.base.Engine Thread-594 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 15:56:36,423 INFO sqlalchemy.engine.base.Engine Thread-594 : (100,)
2020-05-26 15:56:36,423 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 15:56:36,424 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 15:56:36,424 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 15:56:36,424 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 15:56:36,424 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 15:56:36,424 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 15:56:36,426 INFO sqlalchemy.engine.base.Engine Thread-594 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 15:56:36,426 INFO sqlalchemy.engine.base.Engine Thread-594 : (1, 1)
2020-05-26 15:56:36,426 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:56:36,427 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:56:36,431 INFO sqlalchemy.engine.base.Engine Thread-594 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 15:56:36,431 INFO sqlalchemy.engine.base.Engine Thread-594 : ('philip', 1, 1)
2020-05-26 15:56:36,432 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 15:56:36,432 DEBUG sqlalchemy.engine.base.Engine Thread-594 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 15:56:36,434 INFO sqlalchemy.engine.base.Engine Thread-594 : ROLLBACK
2020-05-26 15:56:36,732 INFO sqlalchemy.engine.base.Engine Thread-604 : BEGIN (implicit)
2020-05-26 15:56:36,733 INFO sqlalchemy.engine.base.Engine Thread-604 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:56:36,733 INFO sqlalchemy.engine.base.Engine Thread-604 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:56:36,735 DEBUG sqlalchemy.engine.base.Engine Thread-604 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:56:36,735 DEBUG sqlalchemy.engine.base.Engine Thread-604 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:56:36,735 DEBUG sqlalchemy.engine.base.Engine Thread-604 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:56:36,738 INFO sqlalchemy.engine.base.Engine Thread-604 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:56:36,738 INFO sqlalchemy.engine.base.Engine Thread-604 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:56:36,739 DEBUG sqlalchemy.engine.base.Engine Thread-604 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:56:36,739 DEBUG sqlalchemy.engine.base.Engine Thread-604 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:56:36,747 INFO sqlalchemy.engine.base.Engine Thread-604 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:56:36,747 INFO sqlalchemy.engine.base.Engine Thread-604 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:56:36,748 DEBUG sqlalchemy.engine.base.Engine Thread-604 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:56:36,752 INFO sqlalchemy.engine.base.Engine Thread-604 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:56:36,752 INFO sqlalchemy.engine.base.Engine Thread-604 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:56:36,753 DEBUG sqlalchemy.engine.base.Engine Thread-604 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:56:36,755 DEBUG sqlalchemy.engine.base.Engine Thread-604 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:56:36,756 INFO sqlalchemy.engine.base.Engine Thread-604 : ROLLBACK
2020-05-26 15:56:36,781 INFO sqlalchemy.engine.base.Engine Thread-606 : BEGIN (implicit)
2020-05-26 15:56:36,782 INFO sqlalchemy.engine.base.Engine Thread-606 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:56:36,782 INFO sqlalchemy.engine.base.Engine Thread-606 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:56:36,783 DEBUG sqlalchemy.engine.base.Engine Thread-606 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:56:36,784 DEBUG sqlalchemy.engine.base.Engine Thread-606 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:56:36,784 DEBUG sqlalchemy.engine.base.Engine Thread-606 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:56:36,787 INFO sqlalchemy.engine.base.Engine Thread-606 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:56:36,787 INFO sqlalchemy.engine.base.Engine Thread-606 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:56:36,788 DEBUG sqlalchemy.engine.base.Engine Thread-606 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:56:36,789 DEBUG sqlalchemy.engine.base.Engine Thread-606 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:56:36,793 INFO sqlalchemy.engine.base.Engine Thread-606 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:56:36,794 INFO sqlalchemy.engine.base.Engine Thread-606 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:56:36,794 DEBUG sqlalchemy.engine.base.Engine Thread-606 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:56:36,799 INFO sqlalchemy.engine.base.Engine Thread-606 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:56:36,799 INFO sqlalchemy.engine.base.Engine Thread-606 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:56:36,800 DEBUG sqlalchemy.engine.base.Engine Thread-606 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:56:36,800 DEBUG sqlalchemy.engine.base.Engine Thread-606 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:56:36,801 INFO sqlalchemy.engine.base.Engine Thread-606 : ROLLBACK
2020-05-26 15:57:37,966 INFO sqlalchemy.engine.base.Engine Thread-607 : BEGIN (implicit)
2020-05-26 15:57:37,968 INFO sqlalchemy.engine.base.Engine Thread-607 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:57:37,968 INFO sqlalchemy.engine.base.Engine Thread-607 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), 'YES')
2020-05-26 15:57:37,970 DEBUG sqlalchemy.engine.base.Engine Thread-607 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:57:37,973 INFO sqlalchemy.engine.base.Engine Thread-607 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:57:37,973 INFO sqlalchemy.engine.base.Engine Thread-607 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), 'NO')
2020-05-26 15:57:37,974 DEBUG sqlalchemy.engine.base.Engine Thread-607 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:57:37,978 INFO sqlalchemy.engine.base.Engine Thread-607 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:57:37,978 INFO sqlalchemy.engine.base.Engine Thread-607 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-05-26 15:57:37,979 DEBUG sqlalchemy.engine.base.Engine Thread-607 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:57:37,983 INFO sqlalchemy.engine.base.Engine Thread-607 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:57:37,983 INFO sqlalchemy.engine.base.Engine Thread-607 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-05-26 15:57:37,984 DEBUG sqlalchemy.engine.base.Engine Thread-607 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:57:37,985 INFO sqlalchemy.engine.base.Engine Thread-607 : ROLLBACK
2020-05-26 15:57:38,488 INFO sqlalchemy.engine.base.Engine Thread-608 : BEGIN (implicit)
2020-05-26 15:57:38,490 INFO sqlalchemy.engine.base.Engine Thread-608 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:57:38,490 INFO sqlalchemy.engine.base.Engine Thread-608 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 15:57:38,491 DEBUG sqlalchemy.engine.base.Engine Thread-608 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:57:38,491 DEBUG sqlalchemy.engine.base.Engine Thread-608 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:57:38,491 DEBUG sqlalchemy.engine.base.Engine Thread-608 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 15:57:38,494 INFO sqlalchemy.engine.base.Engine Thread-608 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 15:57:38,494 INFO sqlalchemy.engine.base.Engine Thread-608 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 15:57:38,495 DEBUG sqlalchemy.engine.base.Engine Thread-608 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:57:38,495 DEBUG sqlalchemy.engine.base.Engine Thread-608 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 15:57:38,500 INFO sqlalchemy.engine.base.Engine Thread-608 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 15:57:38,500 INFO sqlalchemy.engine.base.Engine Thread-608 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:57:38,501 DEBUG sqlalchemy.engine.base.Engine Thread-608 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:57:38,505 INFO sqlalchemy.engine.base.Engine Thread-608 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 15:57:38,505 INFO sqlalchemy.engine.base.Engine Thread-608 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 15:57:38,506 DEBUG sqlalchemy.engine.base.Engine Thread-608 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 15:57:38,506 DEBUG sqlalchemy.engine.base.Engine Thread-608 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 15:57:38,507 INFO sqlalchemy.engine.base.Engine Thread-608 : ROLLBACK
2020-05-26 16:17:13,199 INFO sqlalchemy.engine.base.Engine Thread-610 : BEGIN (implicit)
2020-05-26 16:17:13,201 INFO sqlalchemy.engine.base.Engine Thread-610 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:13,201 INFO sqlalchemy.engine.base.Engine Thread-610 : (1, 1)
2020-05-26 16:17:13,203 INFO sqlalchemy.engine.base.Engine Thread-611 : BEGIN (implicit)
2020-05-26 16:17:13,208 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:13,209 INFO sqlalchemy.engine.base.Engine Thread-611 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:13,210 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:13,212 INFO sqlalchemy.engine.base.Engine Thread-611 : (1, 1)
2020-05-26 16:17:13,213 INFO sqlalchemy.engine.base.Engine Thread-609 : BEGIN (implicit)
2020-05-26 16:17:13,213 INFO sqlalchemy.engine.base.Engine Thread-612 : BEGIN (implicit)
2020-05-26 16:17:13,215 INFO sqlalchemy.engine.base.Engine Thread-610 : ROLLBACK
2020-05-26 16:17:13,215 INFO sqlalchemy.engine.base.Engine Thread-613 : BEGIN (implicit)
2020-05-26 16:17:13,216 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:13,217 INFO sqlalchemy.engine.base.Engine Thread-609 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:13,218 INFO sqlalchemy.engine.base.Engine Thread-612 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:13,219 INFO sqlalchemy.engine.base.Engine Thread-613 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:13,220 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:13,221 INFO sqlalchemy.engine.base.Engine Thread-609 : (1, 1)
2020-05-26 16:17:13,221 INFO sqlalchemy.engine.base.Engine Thread-612 : (1, 1)
2020-05-26 16:17:13,221 INFO sqlalchemy.engine.base.Engine Thread-613 : (1, 1)
2020-05-26 16:17:13,224 DEBUG sqlalchemy.engine.base.Engine Thread-612 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:13,223 DEBUG sqlalchemy.engine.base.Engine Thread-609 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:13,224 DEBUG sqlalchemy.engine.base.Engine Thread-612 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:13,226 INFO sqlalchemy.engine.base.Engine Thread-612 : ROLLBACK
2020-05-26 16:17:13,224 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:13,226 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:13,222 INFO sqlalchemy.engine.base.Engine Thread-611 : ROLLBACK
2020-05-26 16:17:13,224 DEBUG sqlalchemy.engine.base.Engine Thread-609 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:13,227 INFO sqlalchemy.engine.base.Engine Thread-613 : ROLLBACK
2020-05-26 16:17:13,230 INFO sqlalchemy.engine.base.Engine Thread-609 : ROLLBACK
2020-05-26 16:17:18,860 INFO sqlalchemy.engine.base.Engine Thread-614 : BEGIN (implicit)
2020-05-26 16:17:18,862 INFO sqlalchemy.engine.base.Engine Thread-614 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 16:17:18,863 INFO sqlalchemy.engine.base.Engine Thread-614 : ()
2020-05-26 16:17:18,864 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 16:17:18,864 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 16:17:18,864 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 16:17:18,866 INFO sqlalchemy.engine.base.Engine Thread-614 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 16:17:18,866 INFO sqlalchemy.engine.base.Engine Thread-614 : (100,)
2020-05-26 16:17:18,867 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 16:17:18,867 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 16:17:18,867 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 16:17:18,867 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 16:17:18,867 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 16:17:18,867 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 16:17:18,869 INFO sqlalchemy.engine.base.Engine Thread-614 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:18,869 INFO sqlalchemy.engine.base.Engine Thread-614 : (1, 1)
2020-05-26 16:17:18,870 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:18,870 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:18,875 INFO sqlalchemy.engine.base.Engine Thread-614 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 16:17:18,875 INFO sqlalchemy.engine.base.Engine Thread-614 : ('philip', 1, 1)
2020-05-26 16:17:18,876 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:18,876 DEBUG sqlalchemy.engine.base.Engine Thread-614 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:18,878 INFO sqlalchemy.engine.base.Engine Thread-614 : ROLLBACK
2020-05-26 16:17:19,316 INFO sqlalchemy.engine.base.Engine Thread-624 : BEGIN (implicit)
2020-05-26 16:17:19,317 INFO sqlalchemy.engine.base.Engine Thread-624 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:19,317 INFO sqlalchemy.engine.base.Engine Thread-624 : (1, 1)
2020-05-26 16:17:19,320 DEBUG sqlalchemy.engine.base.Engine Thread-624 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:19,323 INFO sqlalchemy.engine.base.Engine Thread-627 : BEGIN (implicit)
2020-05-26 16:17:19,324 INFO sqlalchemy.engine.base.Engine Thread-626 : BEGIN (implicit)
2020-05-26 16:17:19,329 DEBUG sqlalchemy.engine.base.Engine Thread-624 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:19,334 INFO sqlalchemy.engine.base.Engine Thread-624 : ROLLBACK
2020-05-26 16:17:19,331 INFO sqlalchemy.engine.base.Engine Thread-626 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:19,333 INFO sqlalchemy.engine.base.Engine Thread-625 : BEGIN (implicit)
2020-05-26 16:17:19,330 INFO sqlalchemy.engine.base.Engine Thread-627 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:19,336 INFO sqlalchemy.engine.base.Engine Thread-627 : (1, 1)
2020-05-26 16:17:19,336 INFO sqlalchemy.engine.base.Engine Thread-625 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:19,336 INFO sqlalchemy.engine.base.Engine Thread-625 : (1, 1)
2020-05-26 16:17:19,335 INFO sqlalchemy.engine.base.Engine Thread-626 : (1, 1)
2020-05-26 16:17:19,337 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:19,338 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:19,339 INFO sqlalchemy.engine.base.Engine Thread-625 : ROLLBACK
2020-05-26 16:17:19,340 DEBUG sqlalchemy.engine.base.Engine Thread-627 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:19,342 DEBUG sqlalchemy.engine.base.Engine Thread-627 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:19,343 INFO sqlalchemy.engine.base.Engine Thread-627 : ROLLBACK
2020-05-26 16:17:19,340 DEBUG sqlalchemy.engine.base.Engine Thread-626 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:19,344 DEBUG sqlalchemy.engine.base.Engine Thread-626 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:19,345 INFO sqlalchemy.engine.base.Engine Thread-626 : ROLLBACK
2020-05-26 16:17:19,348 INFO sqlalchemy.engine.base.Engine Thread-628 : BEGIN (implicit)
2020-05-26 16:17:19,349 INFO sqlalchemy.engine.base.Engine Thread-628 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:17:19,349 INFO sqlalchemy.engine.base.Engine Thread-628 : (1, 1)
2020-05-26 16:17:19,350 DEBUG sqlalchemy.engine.base.Engine Thread-628 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:17:19,350 DEBUG sqlalchemy.engine.base.Engine Thread-628 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:17:19,351 INFO sqlalchemy.engine.base.Engine Thread-628 : ROLLBACK
2020-05-26 16:17:19,432 INFO sqlalchemy.engine.base.Engine Thread-629 : BEGIN (implicit)
2020-05-26 16:17:19,435 INFO sqlalchemy.engine.base.Engine Thread-629 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:17:19,435 INFO sqlalchemy.engine.base.Engine Thread-629 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:17:19,436 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:17:19,437 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:17:19,437 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:17:19,441 INFO sqlalchemy.engine.base.Engine Thread-629 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:17:19,441 INFO sqlalchemy.engine.base.Engine Thread-629 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:17:19,442 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:17:19,442 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:17:19,446 INFO sqlalchemy.engine.base.Engine Thread-629 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:17:19,446 INFO sqlalchemy.engine.base.Engine Thread-629 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:17:19,447 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:17:19,452 INFO sqlalchemy.engine.base.Engine Thread-629 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:17:19,452 INFO sqlalchemy.engine.base.Engine Thread-629 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:17:19,453 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:17:19,453 DEBUG sqlalchemy.engine.base.Engine Thread-629 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:17:19,454 INFO sqlalchemy.engine.base.Engine Thread-629 : ROLLBACK
2020-05-26 16:17:19,483 INFO sqlalchemy.engine.base.Engine Thread-631 : BEGIN (implicit)
2020-05-26 16:17:19,484 INFO sqlalchemy.engine.base.Engine Thread-631 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:17:19,484 INFO sqlalchemy.engine.base.Engine Thread-631 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:17:19,485 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:17:19,486 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:17:19,486 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:17:19,489 INFO sqlalchemy.engine.base.Engine Thread-631 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:17:19,489 INFO sqlalchemy.engine.base.Engine Thread-631 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:17:19,490 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:17:19,490 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:17:19,494 INFO sqlalchemy.engine.base.Engine Thread-631 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:17:19,495 INFO sqlalchemy.engine.base.Engine Thread-631 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:17:19,495 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:17:19,500 INFO sqlalchemy.engine.base.Engine Thread-631 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:17:19,500 INFO sqlalchemy.engine.base.Engine Thread-631 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:17:19,501 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:17:19,501 DEBUG sqlalchemy.engine.base.Engine Thread-631 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:17:19,502 INFO sqlalchemy.engine.base.Engine Thread-631 : ROLLBACK
2020-05-26 16:38:39,912 INFO sqlalchemy.engine.base.Engine Thread-633 : BEGIN (implicit)
2020-05-26 16:38:39,915 INFO sqlalchemy.engine.base.Engine Thread-633 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:38:39,915 INFO sqlalchemy.engine.base.Engine Thread-633 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:38:39,918 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:38:39,918 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:38:39,918 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:38:39,922 INFO sqlalchemy.engine.base.Engine Thread-633 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:38:39,922 INFO sqlalchemy.engine.base.Engine Thread-633 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:38:39,923 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:38:39,923 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:38:39,927 INFO sqlalchemy.engine.base.Engine Thread-633 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:38:39,927 INFO sqlalchemy.engine.base.Engine Thread-633 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:38:39,928 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:38:39,933 INFO sqlalchemy.engine.base.Engine Thread-633 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:38:39,933 INFO sqlalchemy.engine.base.Engine Thread-633 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:38:39,934 DEBUG sqlalchemy.engine.base.Engine Thread-633 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:38:39,935 INFO sqlalchemy.engine.base.Engine Thread-633 : ROLLBACK
2020-05-26 16:38:40,612 INFO sqlalchemy.engine.base.Engine Thread-634 : BEGIN (implicit)
2020-05-26 16:38:40,616 INFO sqlalchemy.engine.base.Engine Thread-634 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:38:40,616 INFO sqlalchemy.engine.base.Engine Thread-634 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-05-26 16:38:40,617 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:38:40,620 INFO sqlalchemy.engine.base.Engine Thread-634 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:38:40,620 INFO sqlalchemy.engine.base.Engine Thread-634 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-05-26 16:38:40,621 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:38:40,621 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:38:40,626 INFO sqlalchemy.engine.base.Engine Thread-634 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:38:40,626 INFO sqlalchemy.engine.base.Engine Thread-634 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:38:40,627 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:38:40,627 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:38:40,627 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:38:40,627 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:38:40,627 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:38:40,627 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:38:40,631 INFO sqlalchemy.engine.base.Engine Thread-634 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:38:40,631 INFO sqlalchemy.engine.base.Engine Thread-634 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:38:40,632 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:38:40,633 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:38:40,633 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:38:40,633 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:38:40,633 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:38:40,633 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:38:40,634 INFO sqlalchemy.engine.base.Engine Thread-634 : ROLLBACK
2020-05-26 16:40:22,270 INFO sqlalchemy.engine.base.Engine Thread-635 : BEGIN (implicit)
2020-05-26 16:40:22,272 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:40:22,272 INFO sqlalchemy.engine.base.Engine Thread-635 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:40:22,274 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:22,274 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:40:22,274 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:40:22,277 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:40:22,277 INFO sqlalchemy.engine.base.Engine Thread-635 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:40:22,278 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:22,278 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:40:22,282 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:40:22,282 INFO sqlalchemy.engine.base.Engine Thread-635 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:40:22,283 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:22,287 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:40:22,287 INFO sqlalchemy.engine.base.Engine Thread-635 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:40:22,288 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:22,289 INFO sqlalchemy.engine.base.Engine Thread-635 : ROLLBACK
2020-05-26 16:40:25,488 INFO sqlalchemy.engine.base.Engine Thread-636 : BEGIN (implicit)
2020-05-26 16:40:25,490 INFO sqlalchemy.engine.base.Engine Thread-636 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:40:25,490 INFO sqlalchemy.engine.base.Engine Thread-636 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:40:25,491 DEBUG sqlalchemy.engine.base.Engine Thread-636 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:25,491 DEBUG sqlalchemy.engine.base.Engine Thread-636 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:40:25,492 DEBUG sqlalchemy.engine.base.Engine Thread-636 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:40:25,495 INFO sqlalchemy.engine.base.Engine Thread-636 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:40:25,495 INFO sqlalchemy.engine.base.Engine Thread-636 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:40:25,496 DEBUG sqlalchemy.engine.base.Engine Thread-636 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:25,496 DEBUG sqlalchemy.engine.base.Engine Thread-636 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:40:25,500 INFO sqlalchemy.engine.base.Engine Thread-636 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:40:25,501 INFO sqlalchemy.engine.base.Engine Thread-636 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:40:25,501 DEBUG sqlalchemy.engine.base.Engine Thread-636 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:25,505 INFO sqlalchemy.engine.base.Engine Thread-636 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:40:25,505 INFO sqlalchemy.engine.base.Engine Thread-636 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:40:25,506 DEBUG sqlalchemy.engine.base.Engine Thread-636 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:25,506 DEBUG sqlalchemy.engine.base.Engine Thread-636 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:40:25,507 INFO sqlalchemy.engine.base.Engine Thread-636 : ROLLBACK
2020-05-26 16:40:47,099 INFO sqlalchemy.engine.base.Engine Thread-637 : BEGIN (implicit)
2020-05-26 16:40:47,100 INFO sqlalchemy.engine.base.Engine Thread-637 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:40:47,100 INFO sqlalchemy.engine.base.Engine Thread-637 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:40:47,102 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:47,103 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:40:47,103 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:40:47,106 INFO sqlalchemy.engine.base.Engine Thread-637 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:40:47,106 INFO sqlalchemy.engine.base.Engine Thread-637 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:40:47,107 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:47,107 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:40:47,111 INFO sqlalchemy.engine.base.Engine Thread-637 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:40:47,111 INFO sqlalchemy.engine.base.Engine Thread-637 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:40:47,112 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:47,117 INFO sqlalchemy.engine.base.Engine Thread-637 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:40:47,117 INFO sqlalchemy.engine.base.Engine Thread-637 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:40:47,117 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:47,118 INFO sqlalchemy.engine.base.Engine Thread-637 : ROLLBACK
2020-05-26 16:40:47,745 INFO sqlalchemy.engine.base.Engine Thread-638 : BEGIN (implicit)
2020-05-26 16:40:47,747 INFO sqlalchemy.engine.base.Engine Thread-638 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:40:47,747 INFO sqlalchemy.engine.base.Engine Thread-638 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-05-26 16:40:47,748 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:47,752 INFO sqlalchemy.engine.base.Engine Thread-638 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:40:47,752 INFO sqlalchemy.engine.base.Engine Thread-638 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-05-26 16:40:47,753 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:47,753 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:40:47,757 INFO sqlalchemy.engine.base.Engine Thread-638 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:40:47,757 INFO sqlalchemy.engine.base.Engine Thread-638 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:40:47,758 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:47,759 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:40:47,759 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:40:47,759 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:40:47,759 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:40:47,759 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:40:47,763 INFO sqlalchemy.engine.base.Engine Thread-638 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:40:47,764 INFO sqlalchemy.engine.base.Engine Thread-638 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:40:47,764 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:40:47,765 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:40:47,765 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:40:47,765 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:40:47,765 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:40:47,765 DEBUG sqlalchemy.engine.base.Engine Thread-638 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:40:47,766 INFO sqlalchemy.engine.base.Engine Thread-638 : ROLLBACK
2020-05-26 16:46:37,458 INFO sqlalchemy.engine.base.Engine Thread-639 : BEGIN (implicit)
2020-05-26 16:46:37,461 INFO sqlalchemy.engine.base.Engine Thread-639 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 16:46:37,461 INFO sqlalchemy.engine.base.Engine Thread-639 : ()
2020-05-26 16:46:37,464 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 16:46:37,465 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 16:46:37,465 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 16:46:37,467 INFO sqlalchemy.engine.base.Engine Thread-639 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 16:46:37,467 INFO sqlalchemy.engine.base.Engine Thread-639 : (100,)
2020-05-26 16:46:37,468 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 16:46:37,468 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 16:46:37,468 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 16:46:37,468 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 16:46:37,468 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 16:46:37,468 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 16:46:37,470 INFO sqlalchemy.engine.base.Engine Thread-639 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:46:37,471 INFO sqlalchemy.engine.base.Engine Thread-639 : (1, 1)
2020-05-26 16:46:37,471 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:46:37,471 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:46:37,477 INFO sqlalchemy.engine.base.Engine Thread-639 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 16:46:37,477 INFO sqlalchemy.engine.base.Engine Thread-639 : ('philip', 1, 1)
2020-05-26 16:46:37,478 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:46:37,478 DEBUG sqlalchemy.engine.base.Engine Thread-639 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:46:37,480 INFO sqlalchemy.engine.base.Engine Thread-639 : ROLLBACK
2020-05-26 16:46:37,800 INFO sqlalchemy.engine.base.Engine Thread-650 : BEGIN (implicit)
2020-05-26 16:46:37,801 INFO sqlalchemy.engine.base.Engine Thread-649 : BEGIN (implicit)
2020-05-26 16:46:37,803 INFO sqlalchemy.engine.base.Engine Thread-650 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:46:37,805 INFO sqlalchemy.engine.base.Engine Thread-649 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:46:37,806 INFO sqlalchemy.engine.base.Engine Thread-650 : (1, 1)
2020-05-26 16:46:37,808 DEBUG sqlalchemy.engine.base.Engine Thread-650 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:46:37,807 INFO sqlalchemy.engine.base.Engine Thread-649 : (1, 1)
2020-05-26 16:46:37,807 INFO sqlalchemy.engine.base.Engine Thread-651 : BEGIN (implicit)
2020-05-26 16:46:37,808 DEBUG sqlalchemy.engine.base.Engine Thread-650 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:46:37,810 INFO sqlalchemy.engine.base.Engine Thread-651 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:46:37,811 INFO sqlalchemy.engine.base.Engine Thread-650 : ROLLBACK
2020-05-26 16:46:37,811 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:46:37,814 INFO sqlalchemy.engine.base.Engine Thread-652 : BEGIN (implicit)
2020-05-26 16:46:37,814 INFO sqlalchemy.engine.base.Engine Thread-651 : (1, 1)
2020-05-26 16:46:37,815 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:46:37,816 INFO sqlalchemy.engine.base.Engine Thread-652 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:46:37,818 INFO sqlalchemy.engine.base.Engine Thread-649 : ROLLBACK
2020-05-26 16:46:37,818 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:46:37,818 INFO sqlalchemy.engine.base.Engine Thread-652 : (1, 1)
2020-05-26 16:46:37,819 DEBUG sqlalchemy.engine.base.Engine Thread-651 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:46:37,821 INFO sqlalchemy.engine.base.Engine Thread-651 : ROLLBACK
2020-05-26 16:46:37,821 DEBUG sqlalchemy.engine.base.Engine Thread-652 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:46:37,821 DEBUG sqlalchemy.engine.base.Engine Thread-652 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:46:37,822 INFO sqlalchemy.engine.base.Engine Thread-652 : ROLLBACK
2020-05-26 16:46:37,833 INFO sqlalchemy.engine.base.Engine Thread-653 : BEGIN (implicit)
2020-05-26 16:46:37,834 INFO sqlalchemy.engine.base.Engine Thread-653 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:46:37,834 INFO sqlalchemy.engine.base.Engine Thread-653 : (1, 1)
2020-05-26 16:46:37,834 DEBUG sqlalchemy.engine.base.Engine Thread-653 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:46:37,835 DEBUG sqlalchemy.engine.base.Engine Thread-653 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:46:37,836 INFO sqlalchemy.engine.base.Engine Thread-653 : ROLLBACK
2020-05-26 16:46:37,854 INFO sqlalchemy.engine.base.Engine Thread-654 : BEGIN (implicit)
2020-05-26 16:46:37,856 INFO sqlalchemy.engine.base.Engine Thread-654 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:46:37,856 INFO sqlalchemy.engine.base.Engine Thread-654 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:46:37,857 DEBUG sqlalchemy.engine.base.Engine Thread-654 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:37,858 DEBUG sqlalchemy.engine.base.Engine Thread-654 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:46:37,858 DEBUG sqlalchemy.engine.base.Engine Thread-654 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:46:37,861 INFO sqlalchemy.engine.base.Engine Thread-654 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:46:37,861 INFO sqlalchemy.engine.base.Engine Thread-654 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:46:37,862 DEBUG sqlalchemy.engine.base.Engine Thread-654 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:37,862 DEBUG sqlalchemy.engine.base.Engine Thread-654 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:46:37,866 INFO sqlalchemy.engine.base.Engine Thread-654 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:46:37,867 INFO sqlalchemy.engine.base.Engine Thread-654 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:46:37,867 DEBUG sqlalchemy.engine.base.Engine Thread-654 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:37,871 INFO sqlalchemy.engine.base.Engine Thread-654 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:46:37,871 INFO sqlalchemy.engine.base.Engine Thread-654 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:46:37,872 DEBUG sqlalchemy.engine.base.Engine Thread-654 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:37,872 DEBUG sqlalchemy.engine.base.Engine Thread-654 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:46:37,873 INFO sqlalchemy.engine.base.Engine Thread-654 : ROLLBACK
2020-05-26 16:46:37,898 INFO sqlalchemy.engine.base.Engine Thread-655 : BEGIN (implicit)
2020-05-26 16:46:37,900 INFO sqlalchemy.engine.base.Engine Thread-655 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:46:37,900 INFO sqlalchemy.engine.base.Engine Thread-655 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:46:37,901 DEBUG sqlalchemy.engine.base.Engine Thread-655 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:37,901 DEBUG sqlalchemy.engine.base.Engine Thread-655 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:46:37,901 DEBUG sqlalchemy.engine.base.Engine Thread-655 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:46:37,905 INFO sqlalchemy.engine.base.Engine Thread-655 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:46:37,905 INFO sqlalchemy.engine.base.Engine Thread-655 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:46:37,907 DEBUG sqlalchemy.engine.base.Engine Thread-655 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:37,908 DEBUG sqlalchemy.engine.base.Engine Thread-655 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:46:37,912 INFO sqlalchemy.engine.base.Engine Thread-655 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:46:37,912 INFO sqlalchemy.engine.base.Engine Thread-655 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:46:37,913 DEBUG sqlalchemy.engine.base.Engine Thread-655 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:37,917 INFO sqlalchemy.engine.base.Engine Thread-655 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:46:37,917 INFO sqlalchemy.engine.base.Engine Thread-655 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:46:37,918 DEBUG sqlalchemy.engine.base.Engine Thread-655 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:37,919 DEBUG sqlalchemy.engine.base.Engine Thread-655 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:46:37,919 INFO sqlalchemy.engine.base.Engine Thread-655 : ROLLBACK
2020-05-26 16:46:39,938 INFO sqlalchemy.engine.base.Engine Thread-657 : BEGIN (implicit)
2020-05-26 16:46:39,943 INFO sqlalchemy.engine.base.Engine Thread-657 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:46:39,943 INFO sqlalchemy.engine.base.Engine Thread-657 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:46:39,944 DEBUG sqlalchemy.engine.base.Engine Thread-657 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:39,944 DEBUG sqlalchemy.engine.base.Engine Thread-657 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:46:39,944 DEBUG sqlalchemy.engine.base.Engine Thread-657 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:46:39,948 INFO sqlalchemy.engine.base.Engine Thread-657 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:46:39,948 INFO sqlalchemy.engine.base.Engine Thread-657 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:46:39,949 DEBUG sqlalchemy.engine.base.Engine Thread-657 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:39,949 DEBUG sqlalchemy.engine.base.Engine Thread-657 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:46:39,953 INFO sqlalchemy.engine.base.Engine Thread-657 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:46:39,953 INFO sqlalchemy.engine.base.Engine Thread-657 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:46:39,954 DEBUG sqlalchemy.engine.base.Engine Thread-657 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:39,958 INFO sqlalchemy.engine.base.Engine Thread-657 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:46:39,958 INFO sqlalchemy.engine.base.Engine Thread-657 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:46:39,959 DEBUG sqlalchemy.engine.base.Engine Thread-657 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:39,960 INFO sqlalchemy.engine.base.Engine Thread-657 : ROLLBACK
2020-05-26 16:46:41,930 INFO sqlalchemy.engine.base.Engine Thread-658 : BEGIN (implicit)
2020-05-26 16:46:41,931 INFO sqlalchemy.engine.base.Engine Thread-658 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:46:41,931 INFO sqlalchemy.engine.base.Engine Thread-658 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-05-26 16:46:41,932 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:41,935 INFO sqlalchemy.engine.base.Engine Thread-658 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:46:41,935 INFO sqlalchemy.engine.base.Engine Thread-658 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-05-26 16:46:41,936 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:41,936 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:46:41,940 INFO sqlalchemy.engine.base.Engine Thread-658 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:46:41,940 INFO sqlalchemy.engine.base.Engine Thread-658 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:46:41,941 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:41,942 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:46:41,942 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:46:41,942 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:46:41,942 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:46:41,942 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:46:41,946 INFO sqlalchemy.engine.base.Engine Thread-658 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:46:41,947 INFO sqlalchemy.engine.base.Engine Thread-658 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:46:41,947 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:46:41,948 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:46:41,948 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:46:41,948 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:46:41,948 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:46:41,948 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:46:41,949 INFO sqlalchemy.engine.base.Engine Thread-658 : ROLLBACK
2020-05-26 16:47:03,693 INFO sqlalchemy.engine.base.Engine Thread-659 : BEGIN (implicit)
2020-05-26 16:47:03,695 INFO sqlalchemy.engine.base.Engine Thread-659 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:47:03,695 INFO sqlalchemy.engine.base.Engine Thread-659 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-05-26 16:47:03,696 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:03,699 INFO sqlalchemy.engine.base.Engine Thread-659 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:47:03,699 INFO sqlalchemy.engine.base.Engine Thread-659 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-05-26 16:47:03,701 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:03,701 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:47:03,705 INFO sqlalchemy.engine.base.Engine Thread-659 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:47:03,705 INFO sqlalchemy.engine.base.Engine Thread-659 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-05-26 16:47:03,706 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:03,707 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:03,707 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'Philip Troon', 'zzz', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:03,707 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'bob', 'project doing something', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 30, 5), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:03,707 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:03,707 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:03,707 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:03,707 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:03,712 INFO sqlalchemy.engine.base.Engine Thread-659 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:47:03,712 INFO sqlalchemy.engine.base.Engine Thread-659 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-05-26 16:47:03,712 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:03,713 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:03,713 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:03,713 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:03,713 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:03,713 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:03,714 INFO sqlalchemy.engine.base.Engine Thread-659 : ROLLBACK
2020-05-26 16:47:10,346 INFO sqlalchemy.engine.base.Engine Thread-660 : BEGIN (implicit)
2020-05-26 16:47:10,348 INFO sqlalchemy.engine.base.Engine Thread-660 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:47:10,348 INFO sqlalchemy.engine.base.Engine Thread-660 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-05-26 16:47:10,349 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:10,353 INFO sqlalchemy.engine.base.Engine Thread-660 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:47:10,353 INFO sqlalchemy.engine.base.Engine Thread-660 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-05-26 16:47:10,354 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:10,354 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:47:10,358 INFO sqlalchemy.engine.base.Engine Thread-660 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:47:10,358 INFO sqlalchemy.engine.base.Engine Thread-660 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:47:10,359 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:10,360 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:10,360 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:10,360 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:10,360 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:10,360 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:47:10,364 INFO sqlalchemy.engine.base.Engine Thread-660 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:47:10,364 INFO sqlalchemy.engine.base.Engine Thread-660 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:47:10,365 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:10,365 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:10,365 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:10,365 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:10,366 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:10,366 DEBUG sqlalchemy.engine.base.Engine Thread-660 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:10,367 INFO sqlalchemy.engine.base.Engine Thread-660 : ROLLBACK
2020-05-26 16:47:11,060 INFO sqlalchemy.engine.base.Engine Thread-661 : BEGIN (implicit)
2020-05-26 16:47:11,061 INFO sqlalchemy.engine.base.Engine Thread-661 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:47:11,062 INFO sqlalchemy.engine.base.Engine Thread-661 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:47:11,063 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:11,063 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:47:11,063 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:47:11,066 INFO sqlalchemy.engine.base.Engine Thread-661 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:47:11,066 INFO sqlalchemy.engine.base.Engine Thread-661 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:47:11,067 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:11,067 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:47:11,071 INFO sqlalchemy.engine.base.Engine Thread-661 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:47:11,072 INFO sqlalchemy.engine.base.Engine Thread-661 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:47:11,072 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:11,076 INFO sqlalchemy.engine.base.Engine Thread-661 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:47:11,076 INFO sqlalchemy.engine.base.Engine Thread-661 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:47:11,077 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:11,078 INFO sqlalchemy.engine.base.Engine Thread-661 : ROLLBACK
2020-05-26 16:47:13,197 INFO sqlalchemy.engine.base.Engine Thread-662 : BEGIN (implicit)
2020-05-26 16:47:13,199 INFO sqlalchemy.engine.base.Engine Thread-662 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:47:13,199 INFO sqlalchemy.engine.base.Engine Thread-662 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:47:13,200 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:13,200 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:47:13,200 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:47:13,204 INFO sqlalchemy.engine.base.Engine Thread-662 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:47:13,204 INFO sqlalchemy.engine.base.Engine Thread-662 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:47:13,205 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:13,205 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:47:13,209 INFO sqlalchemy.engine.base.Engine Thread-662 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:47:13,209 INFO sqlalchemy.engine.base.Engine Thread-662 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:47:13,210 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:13,215 INFO sqlalchemy.engine.base.Engine Thread-662 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:47:13,215 INFO sqlalchemy.engine.base.Engine Thread-662 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:47:13,216 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:47:13,216 DEBUG sqlalchemy.engine.base.Engine Thread-662 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:47:13,217 INFO sqlalchemy.engine.base.Engine Thread-662 : ROLLBACK
2020-05-26 16:48:02,908 INFO sqlalchemy.engine.base.Engine Thread-663 : BEGIN (implicit)
2020-05-26 16:48:02,911 INFO sqlalchemy.engine.base.Engine Thread-663 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 16:48:02,911 INFO sqlalchemy.engine.base.Engine Thread-663 : ()
2020-05-26 16:48:02,912 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 16:48:02,913 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 16:48:02,913 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 16:48:02,914 INFO sqlalchemy.engine.base.Engine Thread-663 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 16:48:02,914 INFO sqlalchemy.engine.base.Engine Thread-663 : (100,)
2020-05-26 16:48:02,915 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 16:48:02,915 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 16:48:02,915 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 16:48:02,916 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 16:48:02,916 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 16:48:02,916 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 16:48:02,918 INFO sqlalchemy.engine.base.Engine Thread-663 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:48:02,918 INFO sqlalchemy.engine.base.Engine Thread-663 : (1, 1)
2020-05-26 16:48:02,919 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:48:02,919 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:48:02,924 INFO sqlalchemy.engine.base.Engine Thread-663 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 16:48:02,924 INFO sqlalchemy.engine.base.Engine Thread-663 : ('philip', 1, 1)
2020-05-26 16:48:02,925 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:48:02,925 DEBUG sqlalchemy.engine.base.Engine Thread-663 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:48:02,927 INFO sqlalchemy.engine.base.Engine Thread-663 : ROLLBACK
2020-05-26 16:48:03,212 INFO sqlalchemy.engine.base.Engine Thread-673 : BEGIN (implicit)
2020-05-26 16:48:03,214 INFO sqlalchemy.engine.base.Engine Thread-674 : BEGIN (implicit)
2020-05-26 16:48:03,217 INFO sqlalchemy.engine.base.Engine Thread-673 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:48:03,220 INFO sqlalchemy.engine.base.Engine Thread-673 : (1, 1)
2020-05-26 16:48:03,220 INFO sqlalchemy.engine.base.Engine Thread-674 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:48:03,220 INFO sqlalchemy.engine.base.Engine Thread-674 : (1, 1)
2020-05-26 16:48:03,218 INFO sqlalchemy.engine.base.Engine Thread-675 : BEGIN (implicit)
2020-05-26 16:48:03,221 INFO sqlalchemy.engine.base.Engine Thread-675 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:48:03,221 INFO sqlalchemy.engine.base.Engine Thread-675 : (1, 1)
2020-05-26 16:48:03,222 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:48:03,222 DEBUG sqlalchemy.engine.base.Engine Thread-674 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:48:03,224 DEBUG sqlalchemy.engine.base.Engine Thread-674 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:48:03,223 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:48:03,223 DEBUG sqlalchemy.engine.base.Engine Thread-675 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:48:03,226 DEBUG sqlalchemy.engine.base.Engine Thread-675 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:48:03,227 INFO sqlalchemy.engine.base.Engine Thread-675 : ROLLBACK
2020-05-26 16:48:03,225 INFO sqlalchemy.engine.base.Engine Thread-674 : ROLLBACK
2020-05-26 16:48:03,227 INFO sqlalchemy.engine.base.Engine Thread-673 : ROLLBACK
2020-05-26 16:48:03,230 INFO sqlalchemy.engine.base.Engine Thread-676 : BEGIN (implicit)
2020-05-26 16:48:03,232 INFO sqlalchemy.engine.base.Engine Thread-676 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:48:03,232 INFO sqlalchemy.engine.base.Engine Thread-676 : (1, 1)
2020-05-26 16:48:03,234 DEBUG sqlalchemy.engine.base.Engine Thread-676 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:48:03,235 DEBUG sqlalchemy.engine.base.Engine Thread-676 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:48:03,236 INFO sqlalchemy.engine.base.Engine Thread-676 : ROLLBACK
2020-05-26 16:48:03,250 INFO sqlalchemy.engine.base.Engine Thread-677 : BEGIN (implicit)
2020-05-26 16:48:03,252 INFO sqlalchemy.engine.base.Engine Thread-677 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:48:03,252 INFO sqlalchemy.engine.base.Engine Thread-677 : (1, 1)
2020-05-26 16:48:03,253 DEBUG sqlalchemy.engine.base.Engine Thread-677 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:48:03,253 DEBUG sqlalchemy.engine.base.Engine Thread-677 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:48:03,254 INFO sqlalchemy.engine.base.Engine Thread-677 : ROLLBACK
2020-05-26 16:48:03,277 INFO sqlalchemy.engine.base.Engine Thread-678 : BEGIN (implicit)
2020-05-26 16:48:03,279 INFO sqlalchemy.engine.base.Engine Thread-678 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:48:03,279 INFO sqlalchemy.engine.base.Engine Thread-678 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:48:03,280 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:03,280 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:48:03,280 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:48:03,284 INFO sqlalchemy.engine.base.Engine Thread-678 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:48:03,284 INFO sqlalchemy.engine.base.Engine Thread-678 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:48:03,285 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:03,285 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:48:03,289 INFO sqlalchemy.engine.base.Engine Thread-678 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:48:03,289 INFO sqlalchemy.engine.base.Engine Thread-678 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:48:03,290 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:03,294 INFO sqlalchemy.engine.base.Engine Thread-678 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:48:03,295 INFO sqlalchemy.engine.base.Engine Thread-678 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:48:03,295 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:03,295 DEBUG sqlalchemy.engine.base.Engine Thread-678 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:48:03,296 INFO sqlalchemy.engine.base.Engine Thread-678 : ROLLBACK
2020-05-26 16:48:03,328 INFO sqlalchemy.engine.base.Engine Thread-680 : BEGIN (implicit)
2020-05-26 16:48:03,330 INFO sqlalchemy.engine.base.Engine Thread-680 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:48:03,330 INFO sqlalchemy.engine.base.Engine Thread-680 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:48:03,331 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:03,331 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:48:03,331 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:48:03,334 INFO sqlalchemy.engine.base.Engine Thread-680 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:48:03,334 INFO sqlalchemy.engine.base.Engine Thread-680 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:48:03,335 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:03,335 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:48:03,344 INFO sqlalchemy.engine.base.Engine Thread-680 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:48:03,344 INFO sqlalchemy.engine.base.Engine Thread-680 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:48:03,345 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:03,350 INFO sqlalchemy.engine.base.Engine Thread-680 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:48:03,350 INFO sqlalchemy.engine.base.Engine Thread-680 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:48:03,351 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:03,351 DEBUG sqlalchemy.engine.base.Engine Thread-680 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:48:03,352 INFO sqlalchemy.engine.base.Engine Thread-680 : ROLLBACK
2020-05-26 16:48:04,348 INFO sqlalchemy.engine.base.Engine Thread-681 : BEGIN (implicit)
2020-05-26 16:48:04,350 INFO sqlalchemy.engine.base.Engine Thread-681 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:48:04,350 INFO sqlalchemy.engine.base.Engine Thread-681 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:48:04,351 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:04,351 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:48:04,351 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:48:04,355 INFO sqlalchemy.engine.base.Engine Thread-681 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:48:04,355 INFO sqlalchemy.engine.base.Engine Thread-681 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:48:04,356 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:04,356 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:48:04,361 INFO sqlalchemy.engine.base.Engine Thread-681 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:48:04,361 INFO sqlalchemy.engine.base.Engine Thread-681 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:48:04,362 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:04,365 INFO sqlalchemy.engine.base.Engine Thread-681 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:48:04,365 INFO sqlalchemy.engine.base.Engine Thread-681 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:48:04,366 DEBUG sqlalchemy.engine.base.Engine Thread-681 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:04,367 INFO sqlalchemy.engine.base.Engine Thread-681 : ROLLBACK
2020-05-26 16:48:04,825 INFO sqlalchemy.engine.base.Engine Thread-682 : BEGIN (implicit)
2020-05-26 16:48:04,826 INFO sqlalchemy.engine.base.Engine Thread-682 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:48:04,827 INFO sqlalchemy.engine.base.Engine Thread-682 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-05-26 16:48:04,827 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:04,831 INFO sqlalchemy.engine.base.Engine Thread-682 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:48:04,831 INFO sqlalchemy.engine.base.Engine Thread-682 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-05-26 16:48:04,832 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:04,832 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:48:04,837 INFO sqlalchemy.engine.base.Engine Thread-682 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:48:04,837 INFO sqlalchemy.engine.base.Engine Thread-682 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:48:04,838 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:04,838 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:48:04,838 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:48:04,838 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:48:04,838 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:48:04,838 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:48:04,843 INFO sqlalchemy.engine.base.Engine Thread-682 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:48:04,843 INFO sqlalchemy.engine.base.Engine Thread-682 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:48:04,844 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:48:04,844 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:48:04,844 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:48:04,844 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:48:04,844 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:48:04,844 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:48:04,846 INFO sqlalchemy.engine.base.Engine Thread-682 : ROLLBACK
2020-05-26 16:49:09,627 INFO sqlalchemy.engine.base.Engine Thread-683 : BEGIN (implicit)
2020-05-26 16:49:09,629 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 16:49:09,629 INFO sqlalchemy.engine.base.Engine Thread-683 : ()
2020-05-26 16:49:09,631 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 16:49:09,631 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 16:49:09,631 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 16:49:09,633 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 16:49:09,633 INFO sqlalchemy.engine.base.Engine Thread-683 : (100,)
2020-05-26 16:49:09,634 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 16:49:09,634 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 16:49:09,634 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 16:49:09,634 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 16:49:09,634 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 16:49:09,635 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 16:49:09,637 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:49:09,637 INFO sqlalchemy.engine.base.Engine Thread-683 : (1, 1)
2020-05-26 16:49:09,638 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:49:09,638 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:49:09,643 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 16:49:09,643 INFO sqlalchemy.engine.base.Engine Thread-683 : ('philip', 1, 1)
2020-05-26 16:49:09,643 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:49:09,644 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:49:09,646 INFO sqlalchemy.engine.base.Engine Thread-683 : ROLLBACK
2020-05-26 16:49:09,919 INFO sqlalchemy.engine.base.Engine Thread-693 : BEGIN (implicit)
2020-05-26 16:49:09,921 INFO sqlalchemy.engine.base.Engine Thread-694 : BEGIN (implicit)
2020-05-26 16:49:09,924 INFO sqlalchemy.engine.base.Engine Thread-695 : BEGIN (implicit)
2020-05-26 16:49:09,925 INFO sqlalchemy.engine.base.Engine Thread-693 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:49:09,928 INFO sqlalchemy.engine.base.Engine Thread-696 : BEGIN (implicit)
2020-05-26 16:49:09,929 INFO sqlalchemy.engine.base.Engine Thread-694 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:49:09,930 INFO sqlalchemy.engine.base.Engine Thread-695 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:49:09,930 INFO sqlalchemy.engine.base.Engine Thread-693 : (1, 1)
2020-05-26 16:49:09,931 INFO sqlalchemy.engine.base.Engine Thread-696 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:49:09,931 INFO sqlalchemy.engine.base.Engine Thread-694 : (1, 1)
2020-05-26 16:49:09,931 INFO sqlalchemy.engine.base.Engine Thread-695 : (1, 1)
2020-05-26 16:49:09,932 INFO sqlalchemy.engine.base.Engine Thread-696 : (1, 1)
2020-05-26 16:49:09,932 DEBUG sqlalchemy.engine.base.Engine Thread-693 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:49:09,933 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:49:09,934 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:49:09,934 DEBUG sqlalchemy.engine.base.Engine Thread-693 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:49:09,937 INFO sqlalchemy.engine.base.Engine Thread-693 : ROLLBACK
2020-05-26 16:49:09,933 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:49:09,937 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:49:09,938 INFO sqlalchemy.engine.base.Engine Thread-695 : ROLLBACK
2020-05-26 16:49:09,936 INFO sqlalchemy.engine.base.Engine Thread-694 : ROLLBACK
2020-05-26 16:49:09,934 DEBUG sqlalchemy.engine.base.Engine Thread-696 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:49:09,941 DEBUG sqlalchemy.engine.base.Engine Thread-696 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:49:09,942 INFO sqlalchemy.engine.base.Engine Thread-696 : ROLLBACK
2020-05-26 16:49:09,950 INFO sqlalchemy.engine.base.Engine Thread-697 : BEGIN (implicit)
2020-05-26 16:49:09,951 INFO sqlalchemy.engine.base.Engine Thread-697 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:49:09,951 INFO sqlalchemy.engine.base.Engine Thread-697 : (1, 1)
2020-05-26 16:49:09,952 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:49:09,952 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:49:09,953 INFO sqlalchemy.engine.base.Engine Thread-697 : ROLLBACK
2020-05-26 16:49:09,983 INFO sqlalchemy.engine.base.Engine Thread-698 : BEGIN (implicit)
2020-05-26 16:49:09,985 INFO sqlalchemy.engine.base.Engine Thread-698 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:09,985 INFO sqlalchemy.engine.base.Engine Thread-698 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:49:09,986 DEBUG sqlalchemy.engine.base.Engine Thread-698 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:09,986 DEBUG sqlalchemy.engine.base.Engine Thread-698 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:49:09,986 DEBUG sqlalchemy.engine.base.Engine Thread-698 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:49:09,989 INFO sqlalchemy.engine.base.Engine Thread-698 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:09,989 INFO sqlalchemy.engine.base.Engine Thread-698 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:49:09,990 DEBUG sqlalchemy.engine.base.Engine Thread-698 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:09,990 DEBUG sqlalchemy.engine.base.Engine Thread-698 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:49:09,995 INFO sqlalchemy.engine.base.Engine Thread-698 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:49:09,995 INFO sqlalchemy.engine.base.Engine Thread-698 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:49:09,996 DEBUG sqlalchemy.engine.base.Engine Thread-698 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:10,000 INFO sqlalchemy.engine.base.Engine Thread-698 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:49:10,000 INFO sqlalchemy.engine.base.Engine Thread-698 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:49:10,001 DEBUG sqlalchemy.engine.base.Engine Thread-698 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:10,001 DEBUG sqlalchemy.engine.base.Engine Thread-698 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:49:10,002 INFO sqlalchemy.engine.base.Engine Thread-698 : ROLLBACK
2020-05-26 16:49:10,027 INFO sqlalchemy.engine.base.Engine Thread-699 : BEGIN (implicit)
2020-05-26 16:49:10,029 INFO sqlalchemy.engine.base.Engine Thread-699 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:10,029 INFO sqlalchemy.engine.base.Engine Thread-699 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:49:10,031 DEBUG sqlalchemy.engine.base.Engine Thread-699 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:10,031 DEBUG sqlalchemy.engine.base.Engine Thread-699 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:49:10,031 DEBUG sqlalchemy.engine.base.Engine Thread-699 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:49:10,035 INFO sqlalchemy.engine.base.Engine Thread-699 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:10,035 INFO sqlalchemy.engine.base.Engine Thread-699 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:49:10,036 DEBUG sqlalchemy.engine.base.Engine Thread-699 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:10,037 DEBUG sqlalchemy.engine.base.Engine Thread-699 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:49:10,041 INFO sqlalchemy.engine.base.Engine Thread-699 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:49:10,041 INFO sqlalchemy.engine.base.Engine Thread-699 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:49:10,042 DEBUG sqlalchemy.engine.base.Engine Thread-699 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:10,046 INFO sqlalchemy.engine.base.Engine Thread-699 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:49:10,046 INFO sqlalchemy.engine.base.Engine Thread-699 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:49:10,047 DEBUG sqlalchemy.engine.base.Engine Thread-699 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:10,047 DEBUG sqlalchemy.engine.base.Engine Thread-699 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:49:10,048 INFO sqlalchemy.engine.base.Engine Thread-699 : ROLLBACK
2020-05-26 16:49:11,316 INFO sqlalchemy.engine.base.Engine Thread-701 : BEGIN (implicit)
2020-05-26 16:49:11,318 INFO sqlalchemy.engine.base.Engine Thread-701 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:11,318 INFO sqlalchemy.engine.base.Engine Thread-701 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:49:11,319 DEBUG sqlalchemy.engine.base.Engine Thread-701 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:11,319 DEBUG sqlalchemy.engine.base.Engine Thread-701 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:49:11,319 DEBUG sqlalchemy.engine.base.Engine Thread-701 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:49:11,322 INFO sqlalchemy.engine.base.Engine Thread-701 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:11,322 INFO sqlalchemy.engine.base.Engine Thread-701 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:49:11,323 DEBUG sqlalchemy.engine.base.Engine Thread-701 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:11,323 DEBUG sqlalchemy.engine.base.Engine Thread-701 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:49:11,328 INFO sqlalchemy.engine.base.Engine Thread-701 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:49:11,328 INFO sqlalchemy.engine.base.Engine Thread-701 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:49:11,329 DEBUG sqlalchemy.engine.base.Engine Thread-701 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:11,333 INFO sqlalchemy.engine.base.Engine Thread-701 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:49:11,333 INFO sqlalchemy.engine.base.Engine Thread-701 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:49:11,334 DEBUG sqlalchemy.engine.base.Engine Thread-701 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:11,334 INFO sqlalchemy.engine.base.Engine Thread-701 : ROLLBACK
2020-05-26 16:49:11,962 INFO sqlalchemy.engine.base.Engine Thread-702 : BEGIN (implicit)
2020-05-26 16:49:11,963 INFO sqlalchemy.engine.base.Engine Thread-702 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:11,963 INFO sqlalchemy.engine.base.Engine Thread-702 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-05-26 16:49:11,964 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:11,967 INFO sqlalchemy.engine.base.Engine Thread-702 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:11,968 INFO sqlalchemy.engine.base.Engine Thread-702 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-05-26 16:49:11,968 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:11,969 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:49:11,973 INFO sqlalchemy.engine.base.Engine Thread-702 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:49:11,973 INFO sqlalchemy.engine.base.Engine Thread-702 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:49:11,974 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:11,974 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'Philip Troon', 'test', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 12, 13), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:49:11,974 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestA', 'philip', 'TestA', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 0, 13, 22), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:49:11,974 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking1', 'philip', 'Booking for testing rules against complex 1', 'Made Up CheckPoint', datetime.datetime(2020, 2, 20, 23, 58, 3), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:49:11,974 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking2', 'philip', 'Booking for testing rules #2 on Fortigate', 'Made Up Fortigate', datetime.datetime(2020, 2, 21, 0, 3, 10), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:49:11,975 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'A better title for this change', 'bob', 'werwer', 'Made Up CheckPoint', datetime.datetime(2020, 2, 21, 1, 50, 30), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-05-26 16:49:11,979 INFO sqlalchemy.engine.base.Engine Thread-702 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:49:11,979 INFO sqlalchemy.engine.base.Engine Thread-702 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-05-26 16:49:11,979 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:11,980 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'Philip Troon', 'testing', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:49:11,980 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'Philip Troon', 'testing 2', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:49:11,980 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), 'TestB', 'philip', 'test b', 'Made Up CheckPoint', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:49:11,980 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking3', 'philip', 'Testing booking #3', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:49:11,980 DEBUG sqlalchemy.engine.base.Engine Thread-702 : Row (datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), 'Booking4', 'philip', 'Booking test #4 on Fortigate', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:49:11,981 INFO sqlalchemy.engine.base.Engine Thread-702 : ROLLBACK
2020-05-26 16:49:35,119 INFO sqlalchemy.engine.base.Engine Thread-703 : BEGIN (implicit)
2020-05-26 16:49:35,121 INFO sqlalchemy.engine.base.Engine Thread-703 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:35,121 INFO sqlalchemy.engine.base.Engine Thread-703 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:49:35,122 DEBUG sqlalchemy.engine.base.Engine Thread-703 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:35,122 DEBUG sqlalchemy.engine.base.Engine Thread-703 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:49:35,122 DEBUG sqlalchemy.engine.base.Engine Thread-703 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:49:35,125 INFO sqlalchemy.engine.base.Engine Thread-703 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:49:35,125 INFO sqlalchemy.engine.base.Engine Thread-703 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:49:35,126 DEBUG sqlalchemy.engine.base.Engine Thread-703 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:35,126 DEBUG sqlalchemy.engine.base.Engine Thread-703 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:49:35,130 INFO sqlalchemy.engine.base.Engine Thread-703 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:49:35,130 INFO sqlalchemy.engine.base.Engine Thread-703 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:49:35,131 DEBUG sqlalchemy.engine.base.Engine Thread-703 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:35,135 INFO sqlalchemy.engine.base.Engine Thread-703 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:49:35,135 INFO sqlalchemy.engine.base.Engine Thread-703 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:49:35,136 DEBUG sqlalchemy.engine.base.Engine Thread-703 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:49:35,137 INFO sqlalchemy.engine.base.Engine Thread-703 : ROLLBACK
2020-05-26 16:56:40,852 INFO sqlalchemy.engine.base.Engine Thread-704 : BEGIN (implicit)
2020-05-26 16:56:40,854 INFO sqlalchemy.engine.base.Engine Thread-704 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:56:40,854 INFO sqlalchemy.engine.base.Engine Thread-704 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), 'YES')
2020-05-26 16:56:40,857 DEBUG sqlalchemy.engine.base.Engine Thread-704 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:40,860 INFO sqlalchemy.engine.base.Engine Thread-704 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:56:40,860 INFO sqlalchemy.engine.base.Engine Thread-704 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), 'NO')
2020-05-26 16:56:40,861 DEBUG sqlalchemy.engine.base.Engine Thread-704 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:40,866 INFO sqlalchemy.engine.base.Engine Thread-704 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:56:40,866 INFO sqlalchemy.engine.base.Engine Thread-704 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0))
2020-05-26 16:56:40,867 DEBUG sqlalchemy.engine.base.Engine Thread-704 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:40,871 INFO sqlalchemy.engine.base.Engine Thread-704 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:56:40,871 INFO sqlalchemy.engine.base.Engine Thread-704 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0), datetime.datetime(2021, 3, 29, 0, 0), datetime.datetime(2021, 5, 10, 0, 0))
2020-05-26 16:56:40,872 DEBUG sqlalchemy.engine.base.Engine Thread-704 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:40,873 INFO sqlalchemy.engine.base.Engine Thread-704 : ROLLBACK
2020-05-26 16:56:42,476 INFO sqlalchemy.engine.base.Engine Thread-705 : BEGIN (implicit)
2020-05-26 16:56:42,477 INFO sqlalchemy.engine.base.Engine Thread-705 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:56:42,477 INFO sqlalchemy.engine.base.Engine Thread-705 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-05-26 16:56:42,478 DEBUG sqlalchemy.engine.base.Engine Thread-705 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:42,478 DEBUG sqlalchemy.engine.base.Engine Thread-705 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:56:42,479 DEBUG sqlalchemy.engine.base.Engine Thread-705 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:56:42,482 INFO sqlalchemy.engine.base.Engine Thread-705 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:56:42,482 INFO sqlalchemy.engine.base.Engine Thread-705 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-05-26 16:56:42,483 DEBUG sqlalchemy.engine.base.Engine Thread-705 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:42,483 DEBUG sqlalchemy.engine.base.Engine Thread-705 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:56:42,487 INFO sqlalchemy.engine.base.Engine Thread-705 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:56:42,487 INFO sqlalchemy.engine.base.Engine Thread-705 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:56:42,488 DEBUG sqlalchemy.engine.base.Engine Thread-705 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:42,492 INFO sqlalchemy.engine.base.Engine Thread-705 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:56:42,492 INFO sqlalchemy.engine.base.Engine Thread-705 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-05-26 16:56:42,493 DEBUG sqlalchemy.engine.base.Engine Thread-705 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:42,494 INFO sqlalchemy.engine.base.Engine Thread-705 : ROLLBACK
2020-05-26 16:56:43,489 INFO sqlalchemy.engine.base.Engine Thread-706 : BEGIN (implicit)
2020-05-26 16:56:43,490 INFO sqlalchemy.engine.base.Engine Thread-706 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:56:43,491 INFO sqlalchemy.engine.base.Engine Thread-706 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 16:56:43,492 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:43,492 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:56:43,492 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 16:56:43,495 INFO sqlalchemy.engine.base.Engine Thread-706 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 16:56:43,495 INFO sqlalchemy.engine.base.Engine Thread-706 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 16:56:43,496 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:43,497 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 16:56:43,501 INFO sqlalchemy.engine.base.Engine Thread-706 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 16:56:43,501 INFO sqlalchemy.engine.base.Engine Thread-706 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:56:43,502 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:43,506 INFO sqlalchemy.engine.base.Engine Thread-706 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 16:56:43,506 INFO sqlalchemy.engine.base.Engine Thread-706 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 16:56:43,507 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 16:56:43,507 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 16:56:43,508 INFO sqlalchemy.engine.base.Engine Thread-706 : ROLLBACK
2020-05-26 16:59:57,643 INFO sqlalchemy.engine.base.Engine Thread-708 : BEGIN (implicit)
2020-05-26 16:59:57,645 INFO sqlalchemy.engine.base.Engine Thread-707 : BEGIN (implicit)
2020-05-26 16:59:57,648 INFO sqlalchemy.engine.base.Engine Thread-708 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:59:57,657 INFO sqlalchemy.engine.base.Engine Thread-708 : (1, 1)
2020-05-26 16:59:57,649 INFO sqlalchemy.engine.base.Engine Thread-709 : BEGIN (implicit)
2020-05-26 16:59:57,653 INFO sqlalchemy.engine.base.Engine Thread-710 : BEGIN (implicit)
2020-05-26 16:59:57,659 INFO sqlalchemy.engine.base.Engine Thread-710 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:59:57,659 INFO sqlalchemy.engine.base.Engine Thread-710 : (1, 1)
2020-05-26 16:59:57,658 INFO sqlalchemy.engine.base.Engine Thread-709 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:59:57,660 INFO sqlalchemy.engine.base.Engine Thread-709 : (1, 1)
2020-05-26 16:59:57,657 INFO sqlalchemy.engine.base.Engine Thread-707 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:59:57,661 INFO sqlalchemy.engine.base.Engine Thread-707 : (1, 1)
2020-05-26 16:59:57,658 DEBUG sqlalchemy.engine.base.Engine Thread-708 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:59:57,660 DEBUG sqlalchemy.engine.base.Engine Thread-710 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:59:57,662 DEBUG sqlalchemy.engine.base.Engine Thread-710 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:59:57,663 INFO sqlalchemy.engine.base.Engine Thread-710 : ROLLBACK
2020-05-26 16:59:57,661 DEBUG sqlalchemy.engine.base.Engine Thread-708 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:59:57,661 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:59:57,661 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:59:57,656 INFO sqlalchemy.engine.base.Engine Thread-711 : BEGIN (implicit)
2020-05-26 16:59:57,664 INFO sqlalchemy.engine.base.Engine Thread-708 : ROLLBACK
2020-05-26 16:59:57,665 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:59:57,666 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:59:57,667 INFO sqlalchemy.engine.base.Engine Thread-711 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 16:59:57,669 INFO sqlalchemy.engine.base.Engine Thread-709 : ROLLBACK
2020-05-26 16:59:57,669 INFO sqlalchemy.engine.base.Engine Thread-707 : ROLLBACK
2020-05-26 16:59:57,670 INFO sqlalchemy.engine.base.Engine Thread-711 : (1, 1)
2020-05-26 16:59:57,672 DEBUG sqlalchemy.engine.base.Engine Thread-711 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 16:59:57,672 DEBUG sqlalchemy.engine.base.Engine Thread-711 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 16:59:57,673 INFO sqlalchemy.engine.base.Engine Thread-711 : ROLLBACK
2020-05-26 17:04:41,312 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 17:04:41,313 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:04:41,314 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:04:41,314 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 17:04:41,315 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 17:04:41,315 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:04:41,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:04:41,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 17:04:41,317 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 17:04:41,317 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:04:41,317 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 17:04:41,317 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 17:04:41,317 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 17:04:41,318 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:04:41,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 17:04:41,318 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 17:04:41,319 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 17:04:41,319 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:04:41,320 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 17:04:41,320 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:04:41,320 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 17:04:41,320 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:04:41,321 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 17:04:41,327 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:04:41,327 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:04:41,329 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:04:41,330 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:04:41,330 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:04:41,333 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:04:41,333 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-05-26 17:04:41,333 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:04:41,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:04:41,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:04:41,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:04:41,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:04:41,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:04:41,338 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:04:41,338 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 17:04:41,339 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:04:41,340 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:04:41,419 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:04:41,419 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 17:04:41,420 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:04:41,420 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:04:41,423 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-05-26 17:04:41,751 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-05-26 17:04:41,755 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:04:41,756 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-05-26 17:04:41,756 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:04:41,757 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:04:41,767 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-05-26 17:04:41,773 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:04:41,773 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-05-26 17:04:41,774 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-05-26 17:04:41,775 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:04:41,777 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:04:41,779 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-05-26 17:04:41,775 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-05-26 17:04:41,780 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:04:41,781 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-05-26 17:04:41,782 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-05-26 17:04:41,783 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:04:41,783 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-05-26 17:04:41,784 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:04:41,784 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:04:41,785 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-05-26 17:04:41,785 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:04:41,786 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:04:41,787 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-05-26 17:04:41,791 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-05-26 17:04:41,792 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:04:41,793 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-05-26 17:04:41,793 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:04:41,794 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:04:41,794 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-05-26 17:09:31,399 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 17:09:31,399 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:09:31,401 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:09:31,402 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 17:09:31,403 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 17:09:31,403 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:09:31,404 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:09:31,404 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 17:09:31,404 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 17:09:31,404 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:09:31,405 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 17:09:31,405 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 17:09:31,405 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 17:09:31,405 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:09:31,406 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 17:09:31,406 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 17:09:31,407 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 17:09:31,407 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:09:31,408 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 17:09:31,408 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:09:31,408 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 17:09:31,408 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:09:31,409 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 17:09:31,416 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:09:31,416 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:09:31,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:09:31,418 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:09:31,418 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:09:31,421 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:09:31,421 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-05-26 17:09:31,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:09:31,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:09:31,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:09:31,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:09:31,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:09:31,423 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:09:31,427 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:09:31,427 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 17:09:31,428 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:09:31,428 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:09:31,513 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:09:31,513 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 17:09:31,514 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:09:31,514 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:09:31,517 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-05-26 17:09:31,827 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-05-26 17:09:31,833 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:09:31,833 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-05-26 17:09:31,834 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:09:31,837 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:09:31,834 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-05-26 17:09:31,844 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:09:31,849 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-05-26 17:09:31,850 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-05-26 17:09:31,850 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:09:31,851 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:09:31,853 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-05-26 17:09:31,852 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:09:31,854 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-05-26 17:09:31,852 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-05-26 17:09:31,855 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:09:31,856 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-05-26 17:09:31,856 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:09:31,852 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-05-26 17:09:31,856 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:09:31,857 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:09:31,858 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:09:31,860 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-05-26 17:09:31,863 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-05-26 17:09:31,864 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-05-26 17:09:31,865 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:09:31,866 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-05-26 17:09:31,867 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:09:31,867 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:09:31,869 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-05-26 17:09:31,897 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-05-26 17:09:31,900 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(datesofinterest_1.doi_name, %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:09:31,900 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Mistyrose', 'Firebrick', 'Date Event', ' zzz ', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:09:31,919 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:09:31,919 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day zzz ', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:09:31,919 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday zzz ', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:09:31,923 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(datesofinterest_1.doi_name, %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:09:31,923 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightblue', 'Darkblue', 'Date Event', ' zzz ', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:09:31,924 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:09:31,924 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU zzz ', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:09:31,929 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:09:31,929 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:09:31,930 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:09:31,935 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:09:31,936 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:09:31,936 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:09:31,937 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:09:31,938 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-05-26 17:09:31,970 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-05-26 17:09:31,972 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(datesofinterest_1.doi_name, %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:09:31,972 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Mistyrose', 'Firebrick', 'Date Event', ' zzz ', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:09:31,974 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:09:31,974 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day zzz ', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:09:31,974 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday zzz ', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:09:31,978 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(datesofinterest_1.doi_name, %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:09:31,978 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightblue', 'Darkblue', 'Date Event', ' zzz ', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:09:31,979 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:09:31,979 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU zzz ', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:09:31,984 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:09:31,984 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:09:31,985 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:09:31,989 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:09:31,989 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:09:31,990 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:09:31,990 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:09:31,991 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-05-26 17:11:54,974 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 17:11:54,974 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:11:54,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:11:54,976 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 17:11:54,977 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 17:11:54,977 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:11:54,977 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:11:54,977 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 17:11:54,978 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 17:11:54,978 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:11:54,978 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 17:11:54,978 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 17:11:54,979 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 17:11:54,979 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:11:54,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 17:11:54,980 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 17:11:54,980 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 17:11:54,980 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:11:54,981 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 17:11:54,981 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:11:54,982 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 17:11:54,982 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:11:54,982 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 17:11:54,988 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:11:54,989 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:11:54,990 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:11:54,990 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:11:54,991 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:11:54,993 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:11:54,993 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-05-26 17:11:54,994 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:11:54,994 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:11:54,994 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:11:54,995 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:11:54,995 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:11:54,995 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:11:54,999 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:11:54,999 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 17:11:54,999 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:11:55,000 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:11:55,074 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:11:55,074 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 17:11:55,075 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:11:55,075 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:11:55,077 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-05-26 17:11:55,360 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-05-26 17:11:55,365 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:11:55,365 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-05-26 17:11:55,369 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:11:55,369 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:11:55,370 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-05-26 17:11:55,370 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-05-26 17:11:55,371 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:11:55,384 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-05-26 17:11:55,383 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:11:55,384 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-05-26 17:11:55,371 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-05-26 17:11:55,386 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:11:55,384 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:11:55,385 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:11:55,387 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:11:55,388 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-05-26 17:11:55,386 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:11:55,386 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-05-26 17:11:55,384 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-05-26 17:11:55,389 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-05-26 17:11:55,390 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:11:55,391 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:11:55,393 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-05-26 17:11:55,396 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-05-26 17:11:55,398 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:11:55,398 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-05-26 17:11:55,399 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:11:55,399 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:11:55,400 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-05-26 17:11:55,423 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-05-26 17:11:55,425 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(datesofinterest_1.doi_name, %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:11:55,425 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Mistyrose', 'Firebrick', 'Date Event', " <a href='abc' class='badge'>+</a>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:11:55,427 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:11:55,427 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), "May Day <a href='abc' class='badge'>+</a>", 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:11:55,427 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), "Late May Holiday <a href='abc' class='badge'>+</a>", 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:11:55,430 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(datesofinterest_1.doi_name, %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:11:55,431 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightblue', 'Darkblue', 'Date Event', " <a href='abc' class='badge'>+</a>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:11:55,432 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:11:55,432 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), "Zone 2 BAU <a href='abc' class='badge'>+</a>", 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:11:55,437 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:11:55,437 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:11:55,438 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:11:55,442 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:11:55,442 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:11:55,443 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:11:55,443 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:11:55,444 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-05-26 17:11:55,476 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-05-26 17:11:55,478 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(datesofinterest_1.doi_name, %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:11:55,478 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Mistyrose', 'Firebrick', 'Date Event', " <a href='abc' class='badge'>+</a>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:11:55,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:11:55,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), "May Day <a href='abc' class='badge'>+</a>", 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:11:55,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), "Late May Holiday <a href='abc' class='badge'>+</a>", 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:11:55,483 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(datesofinterest_1.doi_name, %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:11:55,484 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightblue', 'Darkblue', 'Date Event', " <a href='abc' class='badge'>+</a>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:11:55,485 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:11:55,485 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), "Zone 2 BAU <a href='abc' class='badge'>+</a>", 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:11:55,489 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:11:55,489 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:11:55,490 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:11:55,494 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:11:55,494 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:11:55,495 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:11:55,495 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:11:55,496 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-05-26 17:12:07,558 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-05-26 17:12:07,559 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:07,559 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-05-26 17:12:07,559 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:07,560 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:07,561 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-05-26 17:12:10,456 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-05-26 17:12:10,459 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:10,459 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-05-26 17:12:10,462 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-05-26 17:12:10,462 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:10,463 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:10,466 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-05-26 17:12:10,466 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:10,466 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-05-26 17:12:10,467 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:10,468 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-05-26 17:12:10,469 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:10,469 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:10,470 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-05-26 17:12:10,472 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-05-26 17:12:10,473 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:10,473 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:10,474 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-05-26 17:12:10,478 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-05-26 17:12:10,479 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:10,479 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-05-26 17:12:10,480 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:10,480 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:10,481 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-05-26 17:12:10,497 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-05-26 17:12:10,498 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:10,499 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-05-26 17:12:10,499 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:10,499 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:10,500 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-05-26 17:12:35,119 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 17:12:35,119 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:12:35,120 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:12:35,121 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 17:12:35,122 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 17:12:35,122 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:12:35,122 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:12:35,122 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 17:12:35,123 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 17:12:35,123 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:12:35,123 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 17:12:35,123 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 17:12:35,123 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 17:12:35,123 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:12:35,124 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 17:12:35,124 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 17:12:35,125 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 17:12:35,125 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:12:35,126 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 17:12:35,126 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:12:35,127 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 17:12:35,127 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:12:35,127 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 17:12:35,134 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:12:35,134 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:12:35,135 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:12:35,135 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:12:35,135 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:12:35,138 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:12:35,138 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-05-26 17:12:35,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:12:35,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:12:35,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:12:35,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:12:35,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:12:35,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:12:35,143 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:35,143 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 17:12:35,144 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:35,144 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:35,222 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:12:35,223 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 17:12:35,223 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:35,224 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:35,226 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-05-26 17:12:35,510 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-05-26 17:12:35,511 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:35,516 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-05-26 17:12:35,517 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-05-26 17:12:35,522 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:35,522 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-05-26 17:12:35,521 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-05-26 17:12:35,521 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-05-26 17:12:35,525 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:35,524 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:35,525 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-05-26 17:12:35,521 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:35,527 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:35,526 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:35,538 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:35,525 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-05-26 17:12:35,543 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:35,539 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-05-26 17:12:35,526 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:35,547 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:35,548 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-05-26 17:12:35,544 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:35,544 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-05-26 17:12:35,552 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-05-26 17:12:35,553 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-05-26 17:12:35,555 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:12:35,556 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-05-26 17:12:35,557 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:12:35,557 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:12:35,559 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-05-26 17:12:35,582 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-05-26 17:12:35,584 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:12:35,584 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:12:35,586 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:12:35,586 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:12:35,586 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:12:35,589 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:12:35,589 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:12:35,590 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:12:35,590 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:12:35,595 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:12:35,595 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:12:35,603 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:12:35,608 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:12:35,608 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:12:35,609 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:12:35,609 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:12:35,610 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-05-26 17:12:35,638 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-05-26 17:12:35,639 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:12:35,639 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:12:35,640 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:12:35,641 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:12:35,641 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:12:35,644 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:12:35,644 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:12:35,645 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:12:35,645 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:12:35,650 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:12:35,650 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:12:35,651 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:12:35,655 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:12:35,655 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:12:35,656 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:12:35,656 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:12:35,657 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-05-26 17:17:45,755 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-05-26 17:17:45,759 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:17:45,759 INFO sqlalchemy.engine.base.Engine Thread-20 : ()
2020-05-26 17:17:45,761 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:17:45,762 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:17:45,762 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:17:45,763 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:17:45,764 INFO sqlalchemy.engine.base.Engine Thread-20 : (100,)
2020-05-26 17:17:45,764 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:17:45,764 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:17:45,765 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:17:45,765 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:17:45,765 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:17:45,765 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:17:45,767 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:17:45,767 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-05-26 17:17:45,767 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:17:45,768 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:17:45,772 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:17:45,772 INFO sqlalchemy.engine.base.Engine Thread-20 : ('philip', 1, 1)
2020-05-26 17:17:45,773 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:17:45,773 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:17:45,775 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-05-26 17:17:46,062 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-05-26 17:17:46,063 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:17:46,063 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-05-26 17:17:46,066 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-05-26 17:17:46,067 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:17:46,068 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:17:46,068 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-05-26 17:17:46,069 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:17:46,072 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-05-26 17:17:46,075 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-05-26 17:17:46,076 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:17:46,076 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-05-26 17:17:46,077 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-05-26 17:17:46,078 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:17:46,078 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-05-26 17:17:46,079 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:17:46,080 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:17:46,080 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:17:46,083 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:17:46,085 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:17:46,085 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-05-26 17:17:46,084 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:17:46,087 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-05-26 17:17:46,089 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-05-26 17:17:46,092 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-05-26 17:17:46,093 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:17:46,093 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-05-26 17:17:46,094 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:17:46,094 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:17:46,096 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-05-26 17:17:46,124 INFO sqlalchemy.engine.base.Engine Thread-35 : BEGIN (implicit)
2020-05-26 17:17:46,126 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:17:46,126 INFO sqlalchemy.engine.base.Engine Thread-35 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:17:46,127 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:17:46,127 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:17:46,127 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:17:46,130 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:17:46,130 INFO sqlalchemy.engine.base.Engine Thread-35 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:17:46,131 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:17:46,131 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:17:46,135 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:17:46,135 INFO sqlalchemy.engine.base.Engine Thread-35 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:17:46,136 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:17:46,140 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:17:46,140 INFO sqlalchemy.engine.base.Engine Thread-35 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:17:46,141 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:17:46,141 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:17:46,142 INFO sqlalchemy.engine.base.Engine Thread-35 : ROLLBACK
2020-05-26 17:17:46,170 INFO sqlalchemy.engine.base.Engine Thread-36 : BEGIN (implicit)
2020-05-26 17:17:46,171 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:17:46,171 INFO sqlalchemy.engine.base.Engine Thread-36 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:17:46,173 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:17:46,174 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:17:46,174 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:17:46,178 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:17:46,178 INFO sqlalchemy.engine.base.Engine Thread-36 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:17:46,179 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:17:46,179 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:17:46,183 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:17:46,184 INFO sqlalchemy.engine.base.Engine Thread-36 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:17:46,184 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:17:46,189 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:17:46,189 INFO sqlalchemy.engine.base.Engine Thread-36 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:17:46,189 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:17:46,190 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:17:46,191 INFO sqlalchemy.engine.base.Engine Thread-36 : ROLLBACK
2020-05-26 17:19:14,165 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-05-26 17:19:14,168 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:19:14,168 INFO sqlalchemy.engine.base.Engine Thread-38 : ()
2020-05-26 17:19:14,169 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:19:14,170 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:19:14,170 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:19:14,172 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:19:14,172 INFO sqlalchemy.engine.base.Engine Thread-38 : (100,)
2020-05-26 17:19:14,172 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:19:14,173 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:19:14,173 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:19:14,173 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:19:14,173 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:19:14,173 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:19:14,175 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:19:14,175 INFO sqlalchemy.engine.base.Engine Thread-38 : (1, 1)
2020-05-26 17:19:14,176 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:19:14,176 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:19:14,181 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:19:14,181 INFO sqlalchemy.engine.base.Engine Thread-38 : ('philip', 1, 1)
2020-05-26 17:19:14,182 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:19:14,182 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:19:14,184 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-05-26 17:19:14,467 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-05-26 17:19:14,470 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-05-26 17:19:14,475 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:19:14,471 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:19:14,478 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-05-26 17:19:14,475 INFO sqlalchemy.engine.base.Engine Thread-49 : (1, 1)
2020-05-26 17:19:14,479 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:19:14,479 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:19:14,478 INFO sqlalchemy.engine.base.Engine Thread-51 : BEGIN (implicit)
2020-05-26 17:19:14,479 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:19:14,482 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:19:14,483 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-05-26 17:19:14,481 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:19:14,474 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-05-26 17:19:14,484 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:19:14,483 INFO sqlalchemy.engine.base.Engine Thread-51 : (1, 1)
2020-05-26 17:19:14,480 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-05-26 17:19:14,484 INFO sqlalchemy.engine.base.Engine Thread-50 : (1, 1)
2020-05-26 17:19:14,486 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:19:14,487 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:19:14,488 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
2020-05-26 17:19:14,489 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:19:14,489 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:19:14,490 INFO sqlalchemy.engine.base.Engine Thread-51 : ROLLBACK
2020-05-26 17:19:14,501 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-05-26 17:19:14,502 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:19:14,502 INFO sqlalchemy.engine.base.Engine Thread-52 : (1, 1)
2020-05-26 17:19:14,503 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:19:14,503 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:19:14,504 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-05-26 17:19:14,528 INFO sqlalchemy.engine.base.Engine Thread-53 : BEGIN (implicit)
2020-05-26 17:19:14,530 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:19:14,530 INFO sqlalchemy.engine.base.Engine Thread-53 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:19:14,531 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:19:14,531 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:19:14,531 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:19:14,535 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:19:14,535 INFO sqlalchemy.engine.base.Engine Thread-53 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:19:14,536 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:19:14,536 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:19:14,541 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:19:14,541 INFO sqlalchemy.engine.base.Engine Thread-53 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:19:14,542 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:19:14,546 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:19:14,546 INFO sqlalchemy.engine.base.Engine Thread-53 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:19:14,547 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:19:14,547 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:19:14,548 INFO sqlalchemy.engine.base.Engine Thread-53 : ROLLBACK
2020-05-26 17:19:14,579 INFO sqlalchemy.engine.base.Engine Thread-54 : BEGIN (implicit)
2020-05-26 17:19:14,581 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:19:14,581 INFO sqlalchemy.engine.base.Engine Thread-54 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:19:14,583 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:19:14,583 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:19:14,583 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:19:14,587 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:19:14,588 INFO sqlalchemy.engine.base.Engine Thread-54 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:19:14,589 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:19:14,589 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:19:14,594 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:19:14,594 INFO sqlalchemy.engine.base.Engine Thread-54 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:19:14,595 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:19:14,599 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:19:14,599 INFO sqlalchemy.engine.base.Engine Thread-54 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:19:14,600 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:19:14,601 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:19:14,601 INFO sqlalchemy.engine.base.Engine Thread-54 : ROLLBACK
2020-05-26 17:32:25,112 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 17:32:25,112 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:32:25,114 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:32:25,114 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 17:32:25,115 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 17:32:25,115 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:32:25,116 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:32:25,116 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 17:32:25,116 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 17:32:25,116 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:32:25,116 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 17:32:25,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 17:32:25,117 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 17:32:25,117 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:32:25,118 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 17:32:25,118 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 17:32:25,119 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 17:32:25,119 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:32:25,120 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 17:32:25,120 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:32:25,120 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 17:32:25,120 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:32:25,121 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 17:32:25,127 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:32:25,127 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:32:25,129 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:32:25,129 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:32:25,129 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:32:25,132 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:32:25,132 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-05-26 17:32:25,133 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:32:25,133 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:32:25,133 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:32:25,134 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:32:25,134 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:32:25,134 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:32:25,138 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:32:25,138 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 17:32:25,138 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:32:25,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:32:25,212 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:32:25,212 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 17:32:25,213 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:32:25,213 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:32:25,215 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-05-26 17:32:25,563 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-05-26 17:32:25,564 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:32:25,564 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-05-26 17:32:25,566 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:32:25,566 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:32:25,579 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-05-26 17:32:25,579 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-05-26 17:32:25,580 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:32:25,584 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-05-26 17:32:25,586 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:32:25,588 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-05-26 17:32:25,588 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:32:25,589 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:32:25,590 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-05-26 17:32:25,590 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-05-26 17:32:25,591 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-05-26 17:32:25,592 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:32:25,593 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-05-26 17:32:25,593 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:32:25,594 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:32:25,595 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-05-26 17:32:25,596 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:32:25,596 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:32:25,597 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-05-26 17:32:25,600 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-05-26 17:32:25,601 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:32:25,601 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-05-26 17:32:25,602 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:32:25,603 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:32:25,604 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-05-26 17:32:25,634 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-05-26 17:32:25,636 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:32:25,636 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Mistyrose', 'Firebrick', 'Date Event', "<src img='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:32:25,639 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:32:25,639 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), "May Day<src img='/static/image/sm_green_sq.png'>", 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:32:25,639 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), "Late May Holiday<src img='/static/image/sm_green_sq.png'>", 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:32:25,643 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:32:25,643 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightblue', 'Darkblue', 'Date Event', "<src img='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:32:25,644 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:32:25,644 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), "Zone 2 BAU<src img='/static/image/sm_green_sq.png'>", 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:32:25,649 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:32:25,649 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:32:25,650 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:32:25,654 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:32:25,654 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:32:25,655 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:32:25,655 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:32:25,656 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-05-26 17:32:25,682 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-05-26 17:32:25,684 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:32:25,684 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Mistyrose', 'Firebrick', 'Date Event', "<src img='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:32:25,686 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:32:25,687 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), "May Day<src img='/static/image/sm_green_sq.png'>", 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:32:25,687 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), "Late May Holiday<src img='/static/image/sm_green_sq.png'>", 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:32:25,690 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:32:25,691 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightblue', 'Darkblue', 'Date Event', "<src img='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:32:25,692 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:32:25,692 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), "Zone 2 BAU<src img='/static/image/sm_green_sq.png'>", 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:32:25,697 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:32:25,697 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:32:25,698 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:32:25,702 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:32:25,702 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:32:25,703 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:32:25,703 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:32:25,704 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-05-26 17:32:37,810 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-05-26 17:32:37,811 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:32:37,811 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-05-26 17:32:37,812 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:32:37,812 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:32:37,813 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-05-26 17:33:11,217 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-05-26 17:33:11,218 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:11,218 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-05-26 17:33:11,219 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:11,220 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:11,221 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-05-26 17:33:22,777 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-05-26 17:33:22,780 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:33:22,780 INFO sqlalchemy.engine.base.Engine Thread-22 : ()
2020-05-26 17:33:22,781 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:33:22,782 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:33:22,782 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:33:22,783 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:33:22,783 INFO sqlalchemy.engine.base.Engine Thread-22 : (100,)
2020-05-26 17:33:22,784 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:33:22,784 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:33:22,784 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:33:22,784 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:33:22,784 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:33:22,784 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:33:22,786 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:22,786 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-05-26 17:33:22,787 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:22,787 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:22,791 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:33:22,792 INFO sqlalchemy.engine.base.Engine Thread-22 : ('philip', 1, 1)
2020-05-26 17:33:22,792 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:22,792 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:22,795 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-05-26 17:33:23,068 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-05-26 17:33:23,070 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:23,070 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-05-26 17:33:23,072 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:23,072 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:23,073 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-05-26 17:33:23,076 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-05-26 17:33:23,079 INFO sqlalchemy.engine.base.Engine Thread-35 : BEGIN (implicit)
2020-05-26 17:33:23,081 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:23,084 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-05-26 17:33:23,083 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:23,082 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-05-26 17:33:23,084 INFO sqlalchemy.engine.base.Engine Thread-35 : (1, 1)
2020-05-26 17:33:23,084 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:23,086 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:23,087 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-05-26 17:33:23,085 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:23,088 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:23,088 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-05-26 17:33:23,089 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:23,090 INFO sqlalchemy.engine.base.Engine Thread-35 : ROLLBACK
2020-05-26 17:33:23,090 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:23,091 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:23,092 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-05-26 17:33:23,098 INFO sqlalchemy.engine.base.Engine Thread-36 : BEGIN (implicit)
2020-05-26 17:33:23,099 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:23,099 INFO sqlalchemy.engine.base.Engine Thread-36 : (1, 1)
2020-05-26 17:33:23,100 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:23,102 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:23,103 INFO sqlalchemy.engine.base.Engine Thread-36 : ROLLBACK
2020-05-26 17:33:23,121 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-05-26 17:33:23,123 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:33:23,123 INFO sqlalchemy.engine.base.Engine Thread-37 : ('Mistyrose', 'Firebrick', 'Date Event', "<src img='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:33:23,125 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:23,125 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), "May Day<src img='/static/image/sm_green_sq.png'>", 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:33:23,125 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), "Late May Holiday<src img='/static/image/sm_green_sq.png'>", 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:33:23,128 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:33:23,128 INFO sqlalchemy.engine.base.Engine Thread-37 : ('Lightblue', 'Darkblue', 'Date Event', "<src img='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:33:23,129 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:23,130 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), "Zone 2 BAU<src img='/static/image/sm_green_sq.png'>", 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:33:23,134 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:33:23,134 INFO sqlalchemy.engine.base.Engine Thread-37 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:33:23,135 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:23,139 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:33:23,139 INFO sqlalchemy.engine.base.Engine Thread-37 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:33:23,140 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:23,140 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:33:23,141 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-05-26 17:33:23,165 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-05-26 17:33:23,168 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:33:23,168 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Mistyrose', 'Firebrick', 'Date Event', "<src img='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:33:23,170 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:23,170 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), "May Day<src img='/static/image/sm_green_sq.png'>", 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:33:23,170 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), "Late May Holiday<src img='/static/image/sm_green_sq.png'>", 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:33:23,173 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:33:23,174 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightblue', 'Darkblue', 'Date Event', "<src img='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:33:23,175 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:23,175 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), "Zone 2 BAU<src img='/static/image/sm_green_sq.png'>", 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:33:23,180 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:33:23,180 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:33:23,180 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:23,185 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:33:23,185 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:33:23,186 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:23,186 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:33:23,187 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-05-26 17:33:48,706 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 17:33:48,706 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:33:48,707 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:33:48,708 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 17:33:48,708 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 17:33:48,709 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:33:48,709 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:33:48,709 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 17:33:48,710 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 17:33:48,710 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:33:48,710 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 17:33:48,710 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 17:33:48,711 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 17:33:48,711 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:33:48,712 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 17:33:48,712 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 17:33:48,713 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 17:33:48,713 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:33:48,713 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 17:33:48,714 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:33:48,714 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 17:33:48,714 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:33:48,715 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 17:33:48,722 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:33:48,722 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:33:48,724 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:33:48,724 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:33:48,725 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:33:48,728 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:33:48,728 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-05-26 17:33:48,728 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:33:48,729 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:33:48,729 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:33:48,729 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:33:48,729 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:33:48,729 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:33:48,733 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:48,734 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 17:33:48,734 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:48,735 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:48,824 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:33:48,824 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 17:33:48,825 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:48,825 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:48,828 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-05-26 17:33:53,469 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-05-26 17:33:53,473 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:53,473 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-05-26 17:33:53,476 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:53,476 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:53,477 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-05-26 17:33:53,483 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:53,483 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-05-26 17:33:53,489 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-05-26 17:33:53,492 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-05-26 17:33:53,493 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:53,494 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-05-26 17:33:53,493 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:53,495 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:53,496 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-05-26 17:33:53,495 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:53,497 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:53,498 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-05-26 17:33:53,514 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-05-26 17:33:53,516 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:53,516 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-05-26 17:33:53,516 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:53,517 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:53,518 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-05-26 17:33:53,548 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-05-26 17:33:53,549 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:53,549 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-05-26 17:33:53,549 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:53,550 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:53,551 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-05-26 17:33:53,581 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-05-26 17:33:53,584 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:33:53,584 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Mistyrose', 'Firebrick', 'Date Event', "<img src='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:33:53,585 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:53,585 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), "May Day<img src='/static/image/sm_green_sq.png'>", 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:33:53,586 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), "Late May Holiday<img src='/static/image/sm_green_sq.png'>", 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:33:53,590 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:33:53,590 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightblue', 'Darkblue', 'Date Event', "<img src='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:33:53,591 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:53,591 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), "Zone 2 BAU<img src='/static/image/sm_green_sq.png'>", 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:33:53,597 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:33:53,597 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:33:53,598 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:53,603 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:33:53,603 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:33:53,604 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:53,604 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:33:53,605 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-05-26 17:33:53,636 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-05-26 17:33:53,637 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:33:53,637 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Mistyrose', 'Firebrick', 'Date Event', "<img src='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:33:53,640 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:53,640 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), "May Day<img src='/static/image/sm_green_sq.png'>", 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:33:53,640 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), "Late May Holiday<img src='/static/image/sm_green_sq.png'>", 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:33:53,644 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, concat(concat(concat(datesofinterest_1.doi_name, %s), %s), %s) AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:33:53,644 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightblue', 'Darkblue', 'Date Event', "<img src='", '/static/image/sm_green_sq.png', "'>", datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:33:53,646 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:53,646 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), "Zone 2 BAU<img src='/static/image/sm_green_sq.png'>", 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:33:53,651 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:33:53,651 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:33:53,652 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:53,657 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:33:53,657 INFO sqlalchemy.engine.base.Engine Thread-18 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:33:53,658 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:33:53,658 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:33:53,659 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-05-26 17:33:55,312 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-05-26 17:33:55,313 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:55,313 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-05-26 17:33:55,314 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:55,314 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:55,316 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-05-26 17:33:57,039 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-05-26 17:33:57,040 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:33:57,040 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-05-26 17:33:57,041 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:33:57,042 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:33:57,043 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-05-26 17:34:05,988 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-05-26 17:34:05,989 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:34:05,989 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-05-26 17:34:05,990 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:34:05,990 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:34:05,991 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-05-26 17:35:21,653 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 17:35:21,653 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:35:21,654 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:35:21,655 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 17:35:21,656 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 17:35:21,656 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:35:21,656 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 17:35:21,656 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 17:35:21,657 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 17:35:21,657 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:35:21,657 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 17:35:21,657 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 17:35:21,658 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 17:35:21,658 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:35:21,659 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 17:35:21,659 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 17:35:21,659 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 17:35:21,660 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:35:21,660 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 17:35:21,660 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:35:21,661 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 17:35:21,661 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:35:21,662 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 17:35:21,669 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-05-26 17:35:21,669 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 17:35:21,670 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-05-26 17:35:21,671 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-05-26 17:35:21,671 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-05-26 17:35:21,674 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 17:35:21,674 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-05-26 17:35:21,675 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 17:35:21,675 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 17:35:21,675 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 17:35:21,676 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 17:35:21,676 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 17:35:21,676 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 17:35:21,680 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:35:21,680 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 17:35:21,681 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:35:21,681 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:35:21,763 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 17:35:21,763 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 17:35:21,764 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:35:21,764 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:35:21,766 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-05-26 17:35:22,134 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-05-26 17:35:22,135 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:35:22,135 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-05-26 17:35:22,139 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:35:22,139 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:35:22,140 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-05-26 17:35:22,144 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:35:22,144 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-05-26 17:35:22,157 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:35:22,158 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-05-26 17:35:22,160 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:35:22,161 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-05-26 17:35:22,162 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-05-26 17:35:22,165 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:35:22,164 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:35:22,165 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-05-26 17:35:22,163 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-05-26 17:35:22,166 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-05-26 17:35:22,167 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:35:22,168 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:35:22,169 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-05-26 17:35:22,170 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:35:22,170 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:35:22,172 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-05-26 17:35:22,184 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-05-26 17:35:22,185 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 17:35:22,185 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-05-26 17:35:22,191 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 17:35:22,196 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 17:35:22,201 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-05-26 17:35:22,202 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-05-26 17:35:22,205 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:35:22,205 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:35:22,207 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:35:22,207 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:35:22,207 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:35:22,211 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:35:22,211 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:35:22,212 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:35:22,212 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:35:22,217 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:35:22,217 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:35:22,218 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:35:22,223 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:35:22,223 INFO sqlalchemy.engine.base.Engine Thread-17 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:35:22,224 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:35:22,224 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:35:22,225 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-05-26 17:35:22,255 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-05-26 17:35:22,257 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:35:22,257 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-05-26 17:35:22,259 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:35:22,259 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:35:22,259 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-05-26 17:35:22,263 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-05-26 17:35:22,263 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-05-26 17:35:22,264 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:35:22,264 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'Zone 2 BAU', 'Zone 2 BAU', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-05-26 17:35:22,269 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-05-26 17:35:22,269 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:35:22,270 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:35:22,274 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-05-26 17:35:22,274 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-05-26 17:35:22,275 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-05-26 17:35:22,275 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'Philip Troon', 'testing', 'Made Up Fortigate', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-05-26 17:35:22,276 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-05-26 19:56:22,219 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-05-26 19:56:22,221 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:22,221 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-05-26 19:56:22,223 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:22,223 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:22,227 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 19:56:22,227 INFO sqlalchemy.engine.base.Engine Thread-21 : ('philip', 1, 1)
2020-05-26 19:56:22,227 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:22,228 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:22,237 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_locked = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-05-26 19:56:22,238 INFO sqlalchemy.engine.base.Engine Thread-21 : ()
2020-05-26 19:56:22,239 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-05-26 19:56:22,239 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'No')
2020-05-26 19:56:22,239 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'No')
2020-05-26 19:56:22,239 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 19:56:22,239 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 19:56:22,240 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 19:56:22,240 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'No')
2020-05-26 19:56:22,240 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 19:56:22,240 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 19:56:22,240 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No')
2020-05-26 19:56:22,240 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 19:56:22,265 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 19:56:22,265 INFO sqlalchemy.engine.base.Engine Thread-21 : ('philip', 1, 1)
2020-05-26 19:56:22,266 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:22,266 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:22,269 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-05-26 19:56:22,642 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-05-26 19:56:22,644 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:22,644 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-05-26 19:56:22,645 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-05-26 19:56:22,646 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:22,646 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-05-26 19:56:22,646 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:22,646 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-05-26 19:56:22,648 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:22,648 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-05-26 19:56:22,647 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:22,647 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-05-26 19:56:22,650 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:22,651 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-05-26 19:56:22,651 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-05-26 19:56:22,647 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:22,653 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:22,652 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:22,654 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-05-26 19:56:22,652 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:22,654 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:22,655 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:22,656 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-05-26 19:56:22,657 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-05-26 19:56:22,667 INFO sqlalchemy.engine.base.Engine Thread-35 : BEGIN (implicit)
2020-05-26 19:56:22,668 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:22,669 INFO sqlalchemy.engine.base.Engine Thread-35 : (1, 1)
2020-05-26 19:56:22,670 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:22,670 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:22,671 INFO sqlalchemy.engine.base.Engine Thread-35 : ROLLBACK
2020-05-26 19:56:25,625 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-05-26 19:56:25,626 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:25,626 INFO sqlalchemy.engine.base.Engine Thread-38 : (1, 1)
2020-05-26 19:56:25,627 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:25,627 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:25,629 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 19:56:25,629 INFO sqlalchemy.engine.base.Engine Thread-38 : ('philip', 1, 1)
2020-05-26 19:56:25,630 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:25,630 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:25,633 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_locked AS datesofinterest_doi_locked, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-26 19:56:25,633 INFO sqlalchemy.engine.base.Engine Thread-38 : ('0', 1)
2020-05-26 19:56:25,634 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_locked', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-26 19:56:25,636 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 19:56:25,636 INFO sqlalchemy.engine.base.Engine Thread-38 : (82,)
2020-05-26 19:56:25,637 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 19:56:25,637 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 19:56:25,637 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 19:56:25,637 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 19:56:25,639 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-26 19:56:25,639 INFO sqlalchemy.engine.base.Engine Thread-38 : (1,)
2020-05-26 19:56:25,639 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 19:56:25,639 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 19:56:25,640 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 19:56:25,642 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-26 19:56:25,642 INFO sqlalchemy.engine.base.Engine Thread-38 : ()
2020-05-26 19:56:25,642 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-26 19:56:25,643 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-26 19:56:25,643 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-26 19:56:25,644 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 19:56:25,644 INFO sqlalchemy.engine.base.Engine Thread-38 : (105,)
2020-05-26 19:56:25,644 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 19:56:25,645 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 19:56:25,645 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 19:56:25,646 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 19:56:25,646 INFO sqlalchemy.engine.base.Engine Thread-38 : (105,)
2020-05-26 19:56:25,646 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 19:56:25,647 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 19:56:25,647 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 19:56:25,680 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 19:56:25,680 INFO sqlalchemy.engine.base.Engine Thread-38 : ('philip', 1, 1)
2020-05-26 19:56:25,680 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:25,681 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:25,683 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-05-26 19:56:25,993 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-05-26 19:56:25,994 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:25,994 INFO sqlalchemy.engine.base.Engine Thread-49 : (1, 1)
2020-05-26 19:56:25,997 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-05-26 19:56:26,003 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:26,000 INFO sqlalchemy.engine.base.Engine Thread-51 : BEGIN (implicit)
2020-05-26 19:56:26,003 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-05-26 19:56:25,997 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:26,004 INFO sqlalchemy.engine.base.Engine Thread-50 : (1, 1)
2020-05-26 19:56:26,005 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:26,005 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:26,006 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-05-26 19:56:26,006 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:26,008 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-05-26 19:56:26,007 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:26,006 INFO sqlalchemy.engine.base.Engine Thread-51 : (1, 1)
2020-05-26 19:56:26,008 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:26,010 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:26,011 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-05-26 19:56:26,009 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:26,011 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:26,012 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:26,013 INFO sqlalchemy.engine.base.Engine Thread-51 : ROLLBACK
2020-05-26 19:56:26,014 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
2020-05-26 19:56:26,044 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-05-26 19:56:26,044 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 19:56:26,044 INFO sqlalchemy.engine.base.Engine Thread-52 : (1, 1)
2020-05-26 19:56:26,045 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 19:56:26,045 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 19:56:26,046 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-05-26 21:02:04,423 INFO sqlalchemy.engine.base.Engine Thread-53 : BEGIN (implicit)
2020-05-26 21:02:04,425 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 21:02:04,425 INFO sqlalchemy.engine.base.Engine Thread-53 : (1, 1)
2020-05-26 21:02:04,427 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:02:04,427 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:02:04,430 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:02:04,430 INFO sqlalchemy.engine.base.Engine Thread-53 : ('philip', 1, 1)
2020-05-26 21:02:04,431 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:02:04,431 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:02:04,440 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_locked = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-05-26 21:02:04,440 INFO sqlalchemy.engine.base.Engine Thread-53 : ()
2020-05-26 21:02:04,441 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-05-26 21:02:04,441 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:02:04,441 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:02:04,441 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 21:02:04,441 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 21:02:04,441 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 21:02:04,441 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'No')
2020-05-26 21:02:04,441 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:02:04,442 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:02:04,442 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:02:04,442 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 21:02:04,446 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:02:04,446 INFO sqlalchemy.engine.base.Engine Thread-53 : ('philip', 1, 1)
2020-05-26 21:02:04,447 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:02:04,447 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:02:04,450 INFO sqlalchemy.engine.base.Engine Thread-53 : ROLLBACK
2020-05-26 21:04:57,944 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-05-26 21:04:57,946 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 21:04:57,946 INFO sqlalchemy.engine.base.Engine Thread-63 : (1, 1)
2020-05-26 21:04:57,947 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:04:57,947 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:04:57,950 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:04:57,950 INFO sqlalchemy.engine.base.Engine Thread-63 : ('philip', 1, 1)
2020-05-26 21:04:57,950 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:04:57,950 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:04:57,953 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:04:57,953 INFO sqlalchemy.engine.base.Engine Thread-63 : (75,)
2020-05-26 21:04:57,954 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:04:57,954 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 21:04:57,954 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 21:04:57,955 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:04:57,955 INFO sqlalchemy.engine.base.Engine Thread-63 : (78,)
2020-05-26 21:04:57,956 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:04:57,956 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 21:04:57,956 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 21:04:57,956 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 21:04:57,970 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:04:57,970 INFO sqlalchemy.engine.base.Engine Thread-63 : ('philip', 1, 1)
2020-05-26 21:04:57,971 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:04:57,971 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:02,452 INFO sqlalchemy.engine.base.Engine Thread-63 : ROLLBACK
2020-05-26 21:05:10,109 INFO sqlalchemy.engine.base.Engine Thread-73 : BEGIN (implicit)
2020-05-26 21:05:10,110 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 21:05:10,110 INFO sqlalchemy.engine.base.Engine Thread-73 : (1, 1)
2020-05-26 21:05:10,111 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:10,111 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:10,113 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:05:10,113 INFO sqlalchemy.engine.base.Engine Thread-73 : ('philip', 1, 1)
2020-05-26 21:05:10,115 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:10,115 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:10,117 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:05:10,117 INFO sqlalchemy.engine.base.Engine Thread-73 : (75,)
2020-05-26 21:05:10,117 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:05:10,117 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 21:05:10,117 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 21:05:10,119 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:05:10,119 INFO sqlalchemy.engine.base.Engine Thread-73 : (78,)
2020-05-26 21:05:10,119 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:05:10,120 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 21:05:10,120 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 21:05:10,120 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 21:05:10,124 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:05:10,124 INFO sqlalchemy.engine.base.Engine Thread-73 : ('philip', 1, 1)
2020-05-26 21:05:10,125 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:10,125 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:14,551 INFO sqlalchemy.engine.base.Engine Thread-73 : ROLLBACK
2020-05-26 21:05:19,402 INFO sqlalchemy.engine.base.Engine Thread-83 : BEGIN (implicit)
2020-05-26 21:05:19,403 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 21:05:19,403 INFO sqlalchemy.engine.base.Engine Thread-83 : (1, 1)
2020-05-26 21:05:19,404 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:19,404 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:19,406 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:05:19,407 INFO sqlalchemy.engine.base.Engine Thread-83 : ('philip', 1, 1)
2020-05-26 21:05:19,407 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:19,407 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:19,409 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:05:19,409 INFO sqlalchemy.engine.base.Engine Thread-83 : (75,)
2020-05-26 21:05:19,410 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:05:19,410 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 21:05:19,410 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 21:05:19,411 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:05:19,411 INFO sqlalchemy.engine.base.Engine Thread-83 : (78,)
2020-05-26 21:05:19,412 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:05:19,412 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 21:05:19,413 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 21:05:19,413 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 21:05:19,417 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:05:19,417 INFO sqlalchemy.engine.base.Engine Thread-83 : ('philip', 1, 1)
2020-05-26 21:05:19,417 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:19,418 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:19,633 INFO sqlalchemy.engine.base.Engine Thread-83 : ROLLBACK
2020-05-26 21:05:52,729 INFO sqlalchemy.engine.base.Engine Thread-93 : BEGIN (implicit)
2020-05-26 21:05:52,730 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 21:05:52,730 INFO sqlalchemy.engine.base.Engine Thread-93 : (1, 1)
2020-05-26 21:05:52,731 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:52,731 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:52,733 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:05:52,733 INFO sqlalchemy.engine.base.Engine Thread-93 : ('philip', 1, 1)
2020-05-26 21:05:52,734 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:52,734 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:52,736 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:05:52,736 INFO sqlalchemy.engine.base.Engine Thread-93 : (75,)
2020-05-26 21:05:52,737 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:05:52,737 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 21:05:52,737 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 21:05:52,738 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:05:52,738 INFO sqlalchemy.engine.base.Engine Thread-93 : (78,)
2020-05-26 21:05:52,739 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:05:52,739 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 21:05:52,739 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 21:05:52,739 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 21:05:52,743 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:05:52,743 INFO sqlalchemy.engine.base.Engine Thread-93 : ('philip', 1, 1)
2020-05-26 21:05:52,744 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:05:52,745 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:05:52,964 INFO sqlalchemy.engine.base.Engine Thread-93 : ROLLBACK
2020-05-26 21:07:56,996 INFO sqlalchemy.engine.base.Engine Thread-103 : BEGIN (implicit)
2020-05-26 21:07:56,998 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 21:07:56,998 INFO sqlalchemy.engine.base.Engine Thread-103 : (1, 1)
2020-05-26 21:07:56,999 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:07:56,999 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:07:57,001 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:07:57,001 INFO sqlalchemy.engine.base.Engine Thread-103 : ('philip', 1, 1)
2020-05-26 21:07:57,002 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:07:57,002 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:07:57,011 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_locked = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-05-26 21:07:57,011 INFO sqlalchemy.engine.base.Engine Thread-103 : ()
2020-05-26 21:07:57,012 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-05-26 21:07:57,012 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:07:57,012 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:07:57,012 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 21:07:57,012 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 21:07:57,012 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 21:07:57,012 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'No')
2020-05-26 21:07:57,013 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:07:57,013 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:07:57,013 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No')
2020-05-26 21:07:57,013 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 21:07:57,017 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:07:57,017 INFO sqlalchemy.engine.base.Engine Thread-103 : ('philip', 1, 1)
2020-05-26 21:07:57,018 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:07:57,018 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:07:57,020 INFO sqlalchemy.engine.base.Engine Thread-103 : ROLLBACK
2020-05-26 21:08:00,413 INFO sqlalchemy.engine.base.Engine Thread-113 : BEGIN (implicit)
2020-05-26 21:08:00,414 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 21:08:00,414 INFO sqlalchemy.engine.base.Engine Thread-113 : (1, 1)
2020-05-26 21:08:00,415 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:08:00,415 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:08:00,417 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:08:00,418 INFO sqlalchemy.engine.base.Engine Thread-113 : ('philip', 1, 1)
2020-05-26 21:08:00,418 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:08:00,418 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:08:00,420 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_locked AS datesofinterest_doi_locked, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-26 21:08:00,420 INFO sqlalchemy.engine.base.Engine Thread-113 : ('0', 1)
2020-05-26 21:08:00,420 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_locked', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-26 21:08:00,423 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:08:00,423 INFO sqlalchemy.engine.base.Engine Thread-113 : (82,)
2020-05-26 21:08:00,423 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:08:00,424 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 21:08:00,424 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 21:08:00,424 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 21:08:00,425 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-26 21:08:00,425 INFO sqlalchemy.engine.base.Engine Thread-113 : (1,)
2020-05-26 21:08:00,426 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:08:00,426 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 21:08:00,426 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 21:08:00,427 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-26 21:08:00,427 INFO sqlalchemy.engine.base.Engine Thread-113 : ()
2020-05-26 21:08:00,428 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-26 21:08:00,428 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-26 21:08:00,428 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-26 21:08:00,429 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:08:00,430 INFO sqlalchemy.engine.base.Engine Thread-113 : (105,)
2020-05-26 21:08:00,430 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:08:00,430 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 21:08:00,430 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 21:08:00,432 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 21:08:00,432 INFO sqlalchemy.engine.base.Engine Thread-113 : (105,)
2020-05-26 21:08:00,432 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 21:08:00,432 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 21:08:00,432 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 21:08:00,437 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 21:08:00,437 INFO sqlalchemy.engine.base.Engine Thread-113 : ('philip', 1, 1)
2020-05-26 21:08:00,437 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 21:08:00,438 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 21:08:00,441 INFO sqlalchemy.engine.base.Engine Thread-113 : ROLLBACK
2020-05-26 23:21:29,554 INFO sqlalchemy.engine.base.Engine Thread-124 : BEGIN (implicit)
2020-05-26 23:21:29,556 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:21:29,556 INFO sqlalchemy.engine.base.Engine Thread-124 : (1, 1)
2020-05-26 23:21:29,557 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:21:29,557 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:21:29,559 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:21:29,560 INFO sqlalchemy.engine.base.Engine Thread-124 : ('philip', 1, 1)
2020-05-26 23:21:29,560 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:21:29,560 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:21:29,570 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_locked = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-05-26 23:21:29,570 INFO sqlalchemy.engine.base.Engine Thread-124 : ()
2020-05-26 23:25:05,433 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 23:25:05,433 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:25:05,434 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 23:25:05,435 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 23:25:05,435 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 23:25:05,435 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:25:05,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 23:25:05,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 23:25:05,436 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 23:25:05,436 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:25:05,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 23:25:05,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 23:25:05,437 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 23:25:05,437 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:25:05,438 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 23:25:05,438 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 23:25:05,438 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 23:25:05,439 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:25:05,439 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 23:25:05,439 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:25:05,440 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 23:25:05,440 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:25:05,441 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 23:25:05,443 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:25:05,443 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 23:25:05,444 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:25:05,444 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:25:05,447 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:25:05,448 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 23:25:05,448 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:25:05,449 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:26:40,792 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-05-26 23:26:40,793 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:26:40,793 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-05-26 23:26:40,794 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:26:40,794 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:26:40,796 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:26:40,796 INFO sqlalchemy.engine.base.Engine Thread-9 : ('philip', 1, 1)
2020-05-26 23:26:40,797 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:26:40,797 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:26:40,800 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:26:40,800 INFO sqlalchemy.engine.base.Engine Thread-9 : (0,)
2020-05-26 23:26:40,801 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:26:40,801 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:26:40,801 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:26:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:26:40,803 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:26:40,803 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:26:40,803 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:26:40,803 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:26:40,803 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:26:40,803 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:26:40,803 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:26:40,805 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name ASC 
 LIMIT %s
2020-05-26 23:26:40,805 INFO sqlalchemy.engine.base.Engine Thread-9 : (0, 1)
2020-05-26 23:26:40,806 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:26:40,806 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:26:40,807 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s
2020-05-26 23:26:40,807 INFO sqlalchemy.engine.base.Engine Thread-9 : (66,)
2020-05-26 23:26:40,807 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:26:40,808 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:26:40,808 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:26:40,886 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:26:40,886 INFO sqlalchemy.engine.base.Engine Thread-9 : ('philip', 1, 1)
2020-05-26 23:26:40,887 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:26:40,887 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:26:40,891 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-05-26 23:26:40,950 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-05-26 23:26:45,461 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-05-26 23:26:45,462 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:26:45,462 INFO sqlalchemy.engine.base.Engine Thread-19 : (1, 1)
2020-05-26 23:26:45,463 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:26:45,463 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:26:45,465 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:26:45,465 INFO sqlalchemy.engine.base.Engine Thread-19 : ('philip', 1, 1)
2020-05-26 23:26:45,466 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:26:45,466 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:26:45,467 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:26:45,467 INFO sqlalchemy.engine.base.Engine Thread-19 : ('0', 1)
2020-05-26 23:26:45,468 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:26:45,470 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:26:45,470 INFO sqlalchemy.engine.base.Engine Thread-19 : (0,)
2020-05-26 23:26:45,471 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:26:45,471 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:26:45,471 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:26:45,471 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:26:45,471 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:26:45,472 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:26:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:26:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:26:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:26:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:26:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:26:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:26:45,473 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:26:45,475 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:26:45,475 INFO sqlalchemy.engine.base.Engine Thread-19 : (0,)
2020-05-26 23:26:45,476 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:26:45,476 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:26:45,476 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:26:45,476 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:26:45,476 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:26:45,476 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:26:45,476 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:26:45,477 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:26:45,478 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:26:45,479 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:26:45,480 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:26:45,481 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:26:45,482 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:26:45,482 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:26:45,482 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:26:45,482 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:26:45,482 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:26:45,482 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:26:45,482 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:26:45,482 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:26:45,513 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:26:45,513 INFO sqlalchemy.engine.base.Engine Thread-19 : ('philip', 1, 1)
2020-05-26 23:26:45,514 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:26:45,514 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:26:45,518 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-05-26 23:27:05,986 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-05-26 23:27:05,987 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:27:05,987 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-05-26 23:27:05,988 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:05,988 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:05,990 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:05,990 INFO sqlalchemy.engine.base.Engine Thread-29 : ('philip', 1, 1)
2020-05-26 23:27:05,991 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:05,991 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:05,993 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:27:05,993 INFO sqlalchemy.engine.base.Engine Thread-29 : ('0', 1)
2020-05-26 23:27:05,993 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:05,997 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:27:05,997 INFO sqlalchemy.engine.base.Engine Thread-29 : (0,)
2020-05-26 23:27:05,998 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:05,998 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:27:05,998 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:27:05,998 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:27:05,999 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:27:06,000 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:27:06,000 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:27:06,000 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:27:06,000 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:27:06,000 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:27:06,000 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:27:06,000 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:27:06,002 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:27:06,002 INFO sqlalchemy.engine.base.Engine Thread-29 : (0,)
2020-05-26 23:27:06,004 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:06,004 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:27:06,004 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:27:06,004 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:27:06,004 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:27:06,004 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:27:06,005 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:27:06,006 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:27:06,007 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:27:06,008 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:27:06,009 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:27:06,010 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:27:06,011 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:27:06,011 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:27:06,011 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:27:06,011 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:27:06,011 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:27:06,011 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:27:06,011 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:27:06,011 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:27:06,015 INFO sqlalchemy.engine.base.Engine Thread-29 : INSERT INTO parameters (id, param_name, param_value, param_group, param_parent, param_disabled, param_critical) VALUES (%s, %s, %s, %s, %s, %s, %s)
2020-05-26 23:27:06,015 INFO sqlalchemy.engine.base.Engine Thread-29 : ('0', 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:27:06,016 INFO sqlalchemy.engine.base.Engine Thread-29 : COMMIT
2020-05-26 23:27:06,076 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-05-26 23:27:06,077 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:27:06,077 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-05-26 23:27:06,078 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:06,078 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:06,081 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:06,081 INFO sqlalchemy.engine.base.Engine Thread-30 : ('philip', 1, 1)
2020-05-26 23:27:06,081 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:06,082 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:06,084 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:27:06,084 INFO sqlalchemy.engine.base.Engine Thread-30 : (0,)
2020-05-26 23:27:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:27:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:27:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:27:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:27:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:27:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:27:06,086 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:27:06,087 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:27:06,087 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:27:06,087 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:27:06,087 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:27:06,087 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:27:06,089 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:27:06,089 INFO sqlalchemy.engine.base.Engine Thread-30 : (66, 1)
2020-05-26 23:27:06,089 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:06,089 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:27:06,090 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s
2020-05-26 23:27:06,090 INFO sqlalchemy.engine.base.Engine Thread-30 : (66,)
2020-05-26 23:27:06,091 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:06,091 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:27:06,091 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:27:06,095 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:06,095 INFO sqlalchemy.engine.base.Engine Thread-30 : ('philip', 1, 1)
2020-05-26 23:27:06,096 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:06,096 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:06,099 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-05-26 23:27:10,532 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-05-26 23:27:10,533 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:27:10,533 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-05-26 23:27:10,534 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:10,534 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:10,536 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:10,536 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-05-26 23:27:10,536 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:10,537 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:10,539 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:27:10,539 INFO sqlalchemy.engine.base.Engine Thread-40 : (0,)
2020-05-26 23:27:10,539 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:27:10,540 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:27:10,541 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:27:10,543 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s
2020-05-26 23:27:10,543 INFO sqlalchemy.engine.base.Engine Thread-40 : ('127',)
2020-05-26 23:27:10,544 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:10,548 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:10,548 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-05-26 23:27:10,548 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:10,549 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:10,551 INFO sqlalchemy.engine.base.Engine Thread-40 : ROLLBACK
2020-05-26 23:27:15,654 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-05-26 23:27:15,655 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:27:15,655 INFO sqlalchemy.engine.base.Engine Thread-50 : (1, 1)
2020-05-26 23:27:15,656 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:15,656 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:15,658 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:15,658 INFO sqlalchemy.engine.base.Engine Thread-50 : ('philip', 1, 1)
2020-05-26 23:27:15,659 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:15,659 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:15,660 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:27:15,661 INFO sqlalchemy.engine.base.Engine Thread-50 : ('0', 1)
2020-05-26 23:27:15,661 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:15,663 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:27:15,663 INFO sqlalchemy.engine.base.Engine Thread-50 : (0,)
2020-05-26 23:27:15,664 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:15,664 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:27:15,664 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:27:15,664 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:27:15,664 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:27:15,665 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:27:15,666 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:27:15,666 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:27:15,666 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:27:15,666 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:27:15,666 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:27:15,666 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:27:15,668 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:27:15,668 INFO sqlalchemy.engine.base.Engine Thread-50 : (0,)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:27:15,669 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:27:15,670 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:27:15,671 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:27:15,672 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:27:15,673 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:27:15,674 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:27:15,675 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:27:15,675 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:27:15,680 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:15,680 INFO sqlalchemy.engine.base.Engine Thread-50 : ('philip', 1, 1)
2020-05-26 23:27:15,681 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:15,681 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:15,684 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
2020-05-26 23:27:35,902 INFO sqlalchemy.engine.base.Engine Thread-60 : BEGIN (implicit)
2020-05-26 23:27:35,903 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:27:35,903 INFO sqlalchemy.engine.base.Engine Thread-60 : (1, 1)
2020-05-26 23:27:35,904 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:35,904 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:35,906 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:35,906 INFO sqlalchemy.engine.base.Engine Thread-60 : ('philip', 1, 1)
2020-05-26 23:27:35,907 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:35,907 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:35,908 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:27:35,908 INFO sqlalchemy.engine.base.Engine Thread-60 : ('0', 1)
2020-05-26 23:27:35,908 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:35,911 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:27:35,911 INFO sqlalchemy.engine.base.Engine Thread-60 : (0,)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:27:35,912 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:27:35,913 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:27:35,914 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:27:35,916 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:27:35,916 INFO sqlalchemy.engine.base.Engine Thread-60 : (0,)
2020-05-26 23:27:35,916 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:27:35,917 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:27:35,918 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:27:35,919 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:27:35,920 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:27:35,921 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:27:35,922 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:27:35,923 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:27:35,923 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:27:35,923 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:27:35,923 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:27:35,923 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:27:35,923 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:27:35,926 INFO sqlalchemy.engine.base.Engine Thread-60 : INSERT INTO parameters (id, param_name, param_value, param_group, param_parent, param_disabled, param_critical) VALUES (%s, %s, %s, %s, %s, %s, %s)
2020-05-26 23:27:35,926 INFO sqlalchemy.engine.base.Engine Thread-60 : ('0', 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:27:35,926 INFO sqlalchemy.engine.base.Engine Thread-60 : COMMIT
2020-05-26 23:27:35,986 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-05-26 23:27:35,987 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:27:35,988 INFO sqlalchemy.engine.base.Engine Thread-61 : (1, 1)
2020-05-26 23:27:35,988 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:35,989 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:35,991 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:35,991 INFO sqlalchemy.engine.base.Engine Thread-61 : ('philip', 1, 1)
2020-05-26 23:27:35,992 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:35,992 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:35,995 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:27:35,995 INFO sqlalchemy.engine.base.Engine Thread-61 : (0,)
2020-05-26 23:27:35,996 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:35,997 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:27:35,997 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:27:35,997 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:27:35,997 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:27:35,997 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:27:35,998 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:27:35,998 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:27:35,998 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:27:35,998 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:27:35,998 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:27:35,998 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:27:35,998 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:27:35,999 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:27:35,999 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:27:35,999 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:27:35,999 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:27:35,999 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:27:35,999 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:27:36,000 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:27:36,000 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:27:36,000 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:27:36,000 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:27:36,000 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:27:36,004 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:27:36,004 INFO sqlalchemy.engine.base.Engine Thread-61 : (127, 1)
2020-05-26 23:27:36,005 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:36,005 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:27:36,006 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s
2020-05-26 23:27:36,006 INFO sqlalchemy.engine.base.Engine Thread-61 : (127,)
2020-05-26 23:27:36,007 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:36,007 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:27:36,012 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:36,012 INFO sqlalchemy.engine.base.Engine Thread-61 : ('philip', 1, 1)
2020-05-26 23:27:36,013 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:36,013 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:36,018 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-05-26 23:27:38,248 INFO sqlalchemy.engine.base.Engine Thread-71 : BEGIN (implicit)
2020-05-26 23:27:38,250 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:27:38,250 INFO sqlalchemy.engine.base.Engine Thread-71 : (1, 1)
2020-05-26 23:27:38,250 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:38,251 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:38,253 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:38,253 INFO sqlalchemy.engine.base.Engine Thread-71 : ('philip', 1, 1)
2020-05-26 23:27:38,253 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:38,254 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:38,255 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:27:38,255 INFO sqlalchemy.engine.base.Engine Thread-71 : ('0', 1)
2020-05-26 23:27:38,255 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:38,257 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:27:38,257 INFO sqlalchemy.engine.base.Engine Thread-71 : (0,)
2020-05-26 23:27:38,258 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:38,258 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:27:38,258 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:27:38,258 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:27:38,258 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:27:38,258 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:27:38,259 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:27:38,260 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:27:38,260 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:27:38,260 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:27:38,260 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:27:38,260 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:27:38,260 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:27:38,262 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:27:38,262 INFO sqlalchemy.engine.base.Engine Thread-71 : (0,)
2020-05-26 23:27:38,263 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:27:38,263 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:27:38,263 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:27:38,263 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:27:38,263 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:27:38,263 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:27:38,263 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:27:38,263 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:27:38,264 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:27:38,265 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:27:38,266 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:27:38,267 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:27:38,268 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:27:38,269 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:27:38,269 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:27:38,269 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:27:38,269 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:27:38,269 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:27:38,269 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:27:38,275 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:27:38,275 INFO sqlalchemy.engine.base.Engine Thread-71 : ('philip', 1, 1)
2020-05-26 23:27:38,275 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:27:38,276 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:27:38,279 INFO sqlalchemy.engine.base.Engine Thread-71 : ROLLBACK
2020-05-26 23:28:08,574 INFO sqlalchemy.engine.base.Engine Thread-81 : BEGIN (implicit)
2020-05-26 23:28:08,575 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:28:08,575 INFO sqlalchemy.engine.base.Engine Thread-81 : (1, 1)
2020-05-26 23:28:08,576 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:08,576 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:08,578 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:28:08,578 INFO sqlalchemy.engine.base.Engine Thread-81 : ('philip', 1, 1)
2020-05-26 23:28:08,579 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:08,579 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:08,581 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:28:08,581 INFO sqlalchemy.engine.base.Engine Thread-81 : ('0', 1)
2020-05-26 23:28:08,581 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:08,584 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:28:08,584 INFO sqlalchemy.engine.base.Engine Thread-81 : (0,)
2020-05-26 23:28:08,584 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:08,584 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:28:08,585 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:28:08,586 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:28:08,588 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:28:08,588 INFO sqlalchemy.engine.base.Engine Thread-81 : (0,)
2020-05-26 23:28:08,589 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:08,589 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:28:08,590 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:28:08,591 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:28:08,592 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:28:08,593 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:28:08,594 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:28:08,595 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:28:08,596 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:28:08,596 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:28:08,599 INFO sqlalchemy.engine.base.Engine Thread-81 : INSERT INTO parameters (id, param_name, param_value, param_group, param_parent, param_disabled, param_critical) VALUES (%s, %s, %s, %s, %s, %s, %s)
2020-05-26 23:28:08,599 INFO sqlalchemy.engine.base.Engine Thread-81 : ('0', 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:28:08,599 INFO sqlalchemy.engine.base.Engine Thread-81 : COMMIT
2020-05-26 23:28:08,656 INFO sqlalchemy.engine.base.Engine Thread-82 : BEGIN (implicit)
2020-05-26 23:28:08,657 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:28:08,657 INFO sqlalchemy.engine.base.Engine Thread-82 : (1, 1)
2020-05-26 23:28:08,658 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:08,658 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:08,660 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:28:08,660 INFO sqlalchemy.engine.base.Engine Thread-82 : ('philip', 1, 1)
2020-05-26 23:28:08,661 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:08,661 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:08,663 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:28:08,663 INFO sqlalchemy.engine.base.Engine Thread-82 : (0,)
2020-05-26 23:28:08,663 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:28:08,664 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:28:08,665 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:28:08,667 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:28:08,667 INFO sqlalchemy.engine.base.Engine Thread-82 : (127, 1)
2020-05-26 23:28:08,668 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:08,668 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:28:08,669 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s
2020-05-26 23:28:08,669 INFO sqlalchemy.engine.base.Engine Thread-82 : (127,)
2020-05-26 23:28:08,669 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:08,670 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:28:08,670 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:28:08,674 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:28:08,674 INFO sqlalchemy.engine.base.Engine Thread-82 : ('philip', 1, 1)
2020-05-26 23:28:08,674 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:08,674 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:08,677 INFO sqlalchemy.engine.base.Engine Thread-82 : ROLLBACK
2020-05-26 23:28:12,087 INFO sqlalchemy.engine.base.Engine Thread-92 : BEGIN (implicit)
2020-05-26 23:28:12,088 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:28:12,088 INFO sqlalchemy.engine.base.Engine Thread-92 : (1, 1)
2020-05-26 23:28:12,089 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:12,090 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:12,092 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:28:12,092 INFO sqlalchemy.engine.base.Engine Thread-92 : ('philip', 1, 1)
2020-05-26 23:28:12,092 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:12,092 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:12,094 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:28:12,094 INFO sqlalchemy.engine.base.Engine Thread-92 : ('0', 1)
2020-05-26 23:28:12,094 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:12,096 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:28:12,096 INFO sqlalchemy.engine.base.Engine Thread-92 : (0,)
2020-05-26 23:28:12,097 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:12,097 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:28:12,097 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:28:12,097 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:28:12,097 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:28:12,098 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:28:12,099 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:28:12,099 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:28:12,099 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:28:12,099 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:28:12,099 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:28:12,099 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:28:12,101 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:28:12,101 INFO sqlalchemy.engine.base.Engine Thread-92 : (0,)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:28:12,102 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:28:12,103 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:28:12,104 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:28:12,105 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:28:12,106 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:28:12,107 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:28:12,108 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:28:12,108 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:28:12,108 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:28:12,108 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:28:12,114 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:28:12,115 INFO sqlalchemy.engine.base.Engine Thread-92 : ('philip', 1, 1)
2020-05-26 23:28:12,115 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:12,115 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:12,119 INFO sqlalchemy.engine.base.Engine Thread-92 : ROLLBACK
2020-05-26 23:28:51,097 INFO sqlalchemy.engine.base.Engine Thread-102 : BEGIN (implicit)
2020-05-26 23:28:51,098 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:28:51,098 INFO sqlalchemy.engine.base.Engine Thread-102 : (1, 1)
2020-05-26 23:28:51,098 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:51,099 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:51,101 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:28:51,101 INFO sqlalchemy.engine.base.Engine Thread-102 : ('philip', 1, 1)
2020-05-26 23:28:51,101 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:51,102 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:51,103 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:28:51,103 INFO sqlalchemy.engine.base.Engine Thread-102 : ('0', 1)
2020-05-26 23:28:51,103 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:51,106 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:28:51,106 INFO sqlalchemy.engine.base.Engine Thread-102 : (0,)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:28:51,107 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:28:51,108 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:28:51,109 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:28:51,111 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:28:51,111 INFO sqlalchemy.engine.base.Engine Thread-102 : (0,)
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:28:51,112 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:28:51,113 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:28:51,114 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:28:51,115 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:28:51,116 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:28:51,117 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:28:51,118 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:28:51,118 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:28:51,118 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:28:51,118 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:28:51,118 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:28:51,118 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:28:51,118 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:28:51,121 INFO sqlalchemy.engine.base.Engine Thread-102 : INSERT INTO parameters (id, param_name, param_value, param_group, param_parent, param_disabled, param_critical) VALUES (%s, %s, %s, %s, %s, %s, %s)
2020-05-26 23:28:51,121 INFO sqlalchemy.engine.base.Engine Thread-102 : ('0', 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:28:51,122 INFO sqlalchemy.engine.base.Engine Thread-102 : COMMIT
2020-05-26 23:28:51,181 INFO sqlalchemy.engine.base.Engine Thread-103 : BEGIN (implicit)
2020-05-26 23:28:51,182 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:28:51,182 INFO sqlalchemy.engine.base.Engine Thread-103 : (1, 1)
2020-05-26 23:28:51,183 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:51,183 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:51,185 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:28:51,185 INFO sqlalchemy.engine.base.Engine Thread-103 : ('philip', 1, 1)
2020-05-26 23:28:51,186 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:51,186 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:51,188 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:28:51,188 INFO sqlalchemy.engine.base.Engine Thread-103 : (0,)
2020-05-26 23:28:51,188 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:51,188 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:28:51,189 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:28:51,190 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:28:51,192 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:28:51,192 INFO sqlalchemy.engine.base.Engine Thread-103 : (127, 1)
2020-05-26 23:28:51,193 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:51,193 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:28:51,194 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s
2020-05-26 23:28:51,194 INFO sqlalchemy.engine.base.Engine Thread-103 : (127,)
2020-05-26 23:28:51,194 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:28:51,195 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:28:51,195 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:28:51,195 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:28:51,199 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:28:51,199 INFO sqlalchemy.engine.base.Engine Thread-103 : ('philip', 1, 1)
2020-05-26 23:28:51,199 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:28:51,199 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:28:51,203 INFO sqlalchemy.engine.base.Engine Thread-103 : ROLLBACK
2020-05-26 23:29:01,293 INFO sqlalchemy.engine.base.Engine Thread-113 : BEGIN (implicit)
2020-05-26 23:29:01,294 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:29:01,294 INFO sqlalchemy.engine.base.Engine Thread-113 : (1, 1)
2020-05-26 23:29:01,295 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:29:01,296 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:29:01,298 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:29:01,298 INFO sqlalchemy.engine.base.Engine Thread-113 : ('philip', 1, 1)
2020-05-26 23:29:01,299 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:29:01,299 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:29:01,301 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:29:01,301 INFO sqlalchemy.engine.base.Engine Thread-113 : ('0', 1)
2020-05-26 23:29:01,301 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:01,304 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:29:01,304 INFO sqlalchemy.engine.base.Engine Thread-113 : (0,)
2020-05-26 23:29:01,305 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:01,305 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:29:01,305 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:29:01,305 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:29:01,305 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:29:01,305 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:29:01,305 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:29:01,306 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:29:01,307 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:29:01,307 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:29:01,307 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:29:01,307 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:29:01,307 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:29:01,307 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:29:01,309 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:29:01,309 INFO sqlalchemy.engine.base.Engine Thread-113 : (0,)
2020-05-26 23:29:01,310 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:29:01,311 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:29:01,312 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:29:01,313 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:29:01,314 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:29:01,315 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:29:01,316 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:29:01,317 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:29:01,317 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:29:01,317 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:29:01,323 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:29:01,323 INFO sqlalchemy.engine.base.Engine Thread-113 : ('philip', 1, 1)
2020-05-26 23:29:01,324 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:29:01,324 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:29:01,328 INFO sqlalchemy.engine.base.Engine Thread-113 : ROLLBACK
2020-05-26 23:29:36,484 INFO sqlalchemy.engine.base.Engine Thread-123 : BEGIN (implicit)
2020-05-26 23:29:36,485 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:29:36,485 INFO sqlalchemy.engine.base.Engine Thread-123 : (1, 1)
2020-05-26 23:29:36,486 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:29:36,486 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:29:36,488 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:29:36,488 INFO sqlalchemy.engine.base.Engine Thread-123 : ('philip', 1, 1)
2020-05-26 23:29:36,489 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:29:36,489 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:29:36,491 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:29:36,491 INFO sqlalchemy.engine.base.Engine Thread-123 : ('0', 1)
2020-05-26 23:29:36,492 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:36,494 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:29:36,494 INFO sqlalchemy.engine.base.Engine Thread-123 : (0,)
2020-05-26 23:29:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:29:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:29:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:29:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:29:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:29:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:29:36,496 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:29:36,497 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:29:36,497 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:29:36,497 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:29:36,497 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:29:36,497 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:29:36,499 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group != %s ORDER BY parameters.param_name
2020-05-26 23:29:36,499 INFO sqlalchemy.engine.base.Engine Thread-123 : (0,)
2020-05-26 23:29:36,500 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:36,500 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (114, '1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.', 113, 0, 0, 1)
2020-05-26 23:29:36,500 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (115, '2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>', 113, 0, 0, 1)
2020-05-26 23:29:36,500 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-05-26 23:29:36,500 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (76, 'Application Log', 'LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:29:36,500 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (123, 'Check Email', 'Please check your changes are ready to implement<br/>\r\nmore text<br/>\r\neven more text<br/>\r\nlast bit of text<br/>\r\n\r\n', 122, 117, 0, 0)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (117, 'Check Ready', 'CHECK', 116, 0, 0, 1)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (87, 'CheckPoint CMA', 'CheckPoint CMA', 2, 0, 0, 0)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (77, 'Database Log', 'DB_LOG_FILE', 75, 0, 0, 1)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (111, 'DIFFERENT_COMPLEXES_PER_DAY', '8', 109, 0, 0, 1)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (91, 'Dual Layer', 'Dual Layer', 89, 0, 0, 1)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (118, 'Entry Email', 'ENTRY', 116, 0, 0, 1)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (119, 'Exit Email', 'EXIT', 116, 0, 0, 1)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-05-26 23:29:36,501 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (86, 'FortiManager', 'Fortigate FortiManager', 2, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (95, 'FTE', 'FTE', 92, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (29, 'Hour 00', '00', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (30, 'Hour 01', '01', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (31, 'Hour 02', '02', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (32, 'Hour 03', '03', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (33, 'Hour 04', '04', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (34, 'Hour 05', '05', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (35, 'Hour 06', '06', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (36, 'Hour 07', '07', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (37, 'Hour 08', '08', 3, 0, 0, 0)
2020-05-26 23:29:36,502 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (38, 'Hour 09', '09', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (39, 'Hour 10', '10', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (40, 'Hour 11', '11', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (41, 'Hour 12', '12', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (42, 'Hour 13', '13', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (43, 'Hour 14', '14', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (44, 'Hour 15', '15', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (45, 'Hour 16', '16', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (46, 'Hour 17', '17', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (47, 'Hour 18', '18', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (48, 'Hour 19', '19', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (49, 'Hour 20', '20', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (50, 'Hour 21', '21', 3, 0, 0, 0)
2020-05-26 23:29:36,503 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (51, 'Hour 22', '22', 3, 0, 0, 0)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (52, 'Hour 23', '23', 3, 0, 0, 0)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (88, 'Juniper', 'Juniper', 2, 0, 0, 0)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (53, 'Minute 00', '00', 4, 0, 0, 0)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (54, 'Minute 15', '15', 4, 0, 0, 0)
2020-05-26 23:29:36,504 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (55, 'Minute 30', '30', 4, 0, 0, 0)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (56, 'Minute 45', '45', 4, 0, 0, 0)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (57, 'Minute 59', '59', 4, 0, 0, 0)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (96, 'NFTE', 'NFTE', 92, 0, 0, 0)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (121, 'OPERATIONS_EMAILS', 'test@test.com; test2@test.com; test3@test.com', 120, 0, 0, 1)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (94, 'Production', 'Production', 92, 0, 0, 0)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (79, 'Show 10 Records', '10', 78, 0, 0, 1)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (80, 'Show 100 Records', '100', 78, 0, 0, 1)
2020-05-26 23:29:36,505 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (81, 'Show All Records', '99999', 78, 0, 0, 1)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (90, 'Single Layer', 'Single Layer', 89, 0, 0, 1)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (93, 'Test', 'Test', 92, 0, 0, 0)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (110, 'TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '1', 109, 0, 0, 1)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (112, 'TOTAL_CHANGES_PER_DAY', '16', 109, 0, 0, 1)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-05-26 23:29:36,506 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:29:36,509 INFO sqlalchemy.engine.base.Engine Thread-123 : INSERT INTO parameters (id, param_name, param_value, param_group, param_parent, param_disabled, param_critical) VALUES (%s, %s, %s, %s, %s, %s, %s)
2020-05-26 23:29:36,509 INFO sqlalchemy.engine.base.Engine Thread-123 : ('0', 'BaU Firewall Change', 'BaU Firewall Change', 127, 0, 0, 1)
2020-05-26 23:29:36,510 INFO sqlalchemy.engine.base.Engine Thread-123 : COMMIT
2020-05-26 23:29:36,549 INFO sqlalchemy.engine.base.Engine Thread-124 : BEGIN (implicit)
2020-05-26 23:29:36,550 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:29:36,550 INFO sqlalchemy.engine.base.Engine Thread-124 : (1, 1)
2020-05-26 23:29:36,551 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:29:36,551 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:29:36,553 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:29:36,553 INFO sqlalchemy.engine.base.Engine Thread-124 : ('philip', 1, 1)
2020-05-26 23:29:36,554 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:29:36,554 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:29:36,556 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:29:36,556 INFO sqlalchemy.engine.base.Engine Thread-124 : (0,)
2020-05-26 23:29:36,557 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (66, 'Active Options', 'Active Options', 0, 0, 0, 1)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (109, 'Booking Core Parameters', 'Core booking parameters that define rules for how many bookings can be achieved ', 0, 0, 0, 1)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (97, 'Cluster Type', 'Cluster Type', 0, 0, 0, 0)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (122, 'Communication Email Content', 'Communication Email Content', 0, 0, 0, 0)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (116, 'Communication Parameters', 'Communication Parameters', 0, 0, 0, 1)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (100, 'Complex Type', 'Complex Type/Vendor', 0, 0, 0, 1)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (120, 'Email Groups', 'Email Groups', 0, 0, 0, 0)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (125, 'Email Suffix Validation', '^[a-zA-Z0-9\\.]+\\@test\\.co[m\\.uk]{,3}$', 0, 0, 0, 1)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (92, 'Environments', 'Environments', 0, 0, 0, 0)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:29:36,558 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (2, 'Firewall Managers', 'Firewall Managers', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (89, 'Firewall Type', 'Firewall Type', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (113, 'Help Content', 'Covers the usage of the system', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (3, 'Hours', 'Hours', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (1, 'Locations', 'Locations', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (78, 'Log Entries', 'Log Entries', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (75, 'Log File Options', 'Log File Options', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (4, 'Minutes', 'Minutes', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (82, 'Priority', 'Priority', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (71, 'Search Categories', 'Search Categories', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (63, 'Vendors', 'Vendors', 0, 0, 0, 1)
2020-05-26 23:29:36,559 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (105, 'Yes/No Answers', 'Yes or No for answering options as a select list', 0, 0, 0, 1)
2020-05-26 23:29:36,562 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-05-26 23:29:36,562 INFO sqlalchemy.engine.base.Engine Thread-124 : (127, 1)
2020-05-26 23:29:36,562 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:36,563 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (127, 'Event Types', 'Event Types', 0, 0, 0, 1)
2020-05-26 23:29:36,564 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s
2020-05-26 23:29:36,564 INFO sqlalchemy.engine.base.Engine Thread-124 : (127,)
2020-05-26 23:29:36,564 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:29:36,565 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:29:36,565 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:29:36,565 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:29:36,565 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (131, 'BaU Firewall Change', 'BaU Firewall Change', 127, 0, 0, 1)
2020-05-26 23:29:36,569 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:29:36,570 INFO sqlalchemy.engine.base.Engine Thread-124 : ('philip', 1, 1)
2020-05-26 23:29:36,570 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:29:36,570 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:29:36,574 INFO sqlalchemy.engine.base.Engine Thread-124 : ROLLBACK
2020-05-26 23:30:54,864 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-05-26 23:30:54,864 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:30:54,866 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 23:30:54,866 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-05-26 23:30:54,867 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-05-26 23:30:54,867 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:30:54,868 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-05-26 23:30:54,868 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-05-26 23:30:54,868 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-05-26 23:30:54,868 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:30:54,868 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-05-26 23:30:54,869 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-05-26 23:30:54,869 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-05-26 23:30:54,869 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:30:54,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-05-26 23:30:54,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-05-26 23:30:54,871 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-05-26 23:30:54,871 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:30:54,871 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-05-26 23:30:54,871 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:30:54,872 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-05-26 23:30:54,872 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:30:54,873 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-05-26 23:30:54,875 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:30:54,875 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-05-26 23:30:54,876 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:30:54,877 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:30:54,879 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:30:54,880 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 23:30:54,880 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:30:54,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:30:54,890 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-05-26 23:30:54,890 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-05-26 23:30:54,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-05-26 23:30:54,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'No')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:30:54,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:30:54,974 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:30:54,974 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-05-26 23:30:54,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:30:54,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:30:54,979 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-05-26 23:31:12,498 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-05-26 23:31:12,500 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:31:12,500 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-05-26 23:31:12,501 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:31:12,501 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:31:12,504 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:31:12,504 INFO sqlalchemy.engine.base.Engine Thread-12 : ('philip', 1, 1)
2020-05-26 23:31:12,504 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:31:12,505 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:31:12,507 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-26 23:31:12,507 INFO sqlalchemy.engine.base.Engine Thread-12 : ('12', 1)
2020-05-26 23:31:12,508 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-26 23:31:12,508 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 107, '1', 106)
2020-05-26 23:31:12,511 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:31:12,512 INFO sqlalchemy.engine.base.Engine Thread-12 : (82,)
2020-05-26 23:31:12,512 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:31:12,512 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:31:12,512 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:31:12,513 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:31:12,514 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-26 23:31:12,514 INFO sqlalchemy.engine.base.Engine Thread-12 : (1,)
2020-05-26 23:31:12,515 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:31:12,515 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:31:12,515 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:31:12,518 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-26 23:31:12,518 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-05-26 23:31:12,519 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-26 23:31:12,519 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-26 23:31:12,519 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-26 23:31:12,520 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:31:12,520 INFO sqlalchemy.engine.base.Engine Thread-12 : (127,)
2020-05-26 23:31:12,521 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:31:12,521 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (131, 'BaU Firewall Change', 'BaU Firewall Change', 127, 0, 0, 1)
2020-05-26 23:31:12,521 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:31:12,521 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:31:12,521 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:31:12,523 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:31:12,523 INFO sqlalchemy.engine.base.Engine Thread-12 : (105,)
2020-05-26 23:31:12,523 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:31:12,524 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:31:12,524 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:31:12,560 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:31:12,561 INFO sqlalchemy.engine.base.Engine Thread-12 : ('philip', 1, 1)
2020-05-26 23:31:12,561 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:31:12,561 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:19,065 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-05-26 23:32:19,066 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:32:19,066 INFO sqlalchemy.engine.base.Engine Thread-19 : (1, 1)
2020-05-26 23:32:19,067 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:19,067 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:19,069 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:19,070 INFO sqlalchemy.engine.base.Engine Thread-19 : ('philip', 1, 1)
2020-05-26 23:32:19,071 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:19,071 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:19,073 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-26 23:32:19,073 INFO sqlalchemy.engine.base.Engine Thread-19 : ('12', 1)
2020-05-26 23:32:19,073 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-26 23:32:19,074 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 107, '1', 106)
2020-05-26 23:32:19,076 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:19,076 INFO sqlalchemy.engine.base.Engine Thread-19 : (82,)
2020-05-26 23:32:19,077 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:19,077 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:32:19,077 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:32:19,077 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:32:19,079 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-26 23:32:19,079 INFO sqlalchemy.engine.base.Engine Thread-19 : (1,)
2020-05-26 23:32:19,080 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:19,080 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:32:19,080 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:32:19,081 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-26 23:32:19,081 INFO sqlalchemy.engine.base.Engine Thread-19 : ()
2020-05-26 23:32:19,082 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-26 23:32:19,082 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-26 23:32:19,082 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-26 23:32:19,084 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:19,084 INFO sqlalchemy.engine.base.Engine Thread-19 : (127,)
2020-05-26 23:32:19,084 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:19,085 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (131, 'BaU Firewall Change', 'BaU Firewall Change', 127, 0, 0, 1)
2020-05-26 23:32:19,085 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:32:19,085 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:32:19,085 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:32:19,086 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:19,087 INFO sqlalchemy.engine.base.Engine Thread-19 : (105,)
2020-05-26 23:32:19,087 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:19,087 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:32:19,087 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:32:19,124 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:19,124 INFO sqlalchemy.engine.base.Engine Thread-19 : ('philip', 1, 1)
2020-05-26 23:32:19,125 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:19,125 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:19,128 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-05-26 23:32:19,200 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-05-26 23:32:32,012 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-05-26 23:32:32,013 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:32:32,013 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-05-26 23:32:32,014 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:32,014 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:32,016 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:32,016 INFO sqlalchemy.engine.base.Engine Thread-30 : ('philip', 1, 1)
2020-05-26 23:32:32,017 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:32,017 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:32,019 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-26 23:32:32,020 INFO sqlalchemy.engine.base.Engine Thread-30 : ('12', 1)
2020-05-26 23:32:32,020 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-26 23:32:32,021 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 107, '1', 106)
2020-05-26 23:32:32,025 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:32,025 INFO sqlalchemy.engine.base.Engine Thread-30 : (82,)
2020-05-26 23:32:32,025 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:32,026 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:32:32,026 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:32:32,026 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:32:32,027 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-26 23:32:32,027 INFO sqlalchemy.engine.base.Engine Thread-30 : (1,)
2020-05-26 23:32:32,028 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:32,028 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:32:32,028 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:32:32,029 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-26 23:32:32,029 INFO sqlalchemy.engine.base.Engine Thread-30 : ()
2020-05-26 23:32:32,030 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-26 23:32:32,030 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-26 23:32:32,030 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-26 23:32:32,031 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:32,031 INFO sqlalchemy.engine.base.Engine Thread-30 : (127,)
2020-05-26 23:32:32,032 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:32,032 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (131, 'BaU Firewall Change', 'BaU Firewall Change', 127, 0, 0, 1)
2020-05-26 23:32:32,032 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:32:32,032 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:32:32,032 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:32:32,034 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:32,034 INFO sqlalchemy.engine.base.Engine Thread-30 : (105,)
2020-05-26 23:32:32,034 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:32,035 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:32:32,035 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:32:32,040 INFO sqlalchemy.engine.base.Engine Thread-30 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_type=%s WHERE datesofinterest.id = %s
2020-05-26 23:32:32,040 INFO sqlalchemy.engine.base.Engine Thread-30 : ('12', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 129, 12)
2020-05-26 23:32:32,041 INFO sqlalchemy.engine.base.Engine Thread-30 : COMMIT
2020-05-26 23:32:32,104 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-05-26 23:32:32,106 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:32:32,106 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-05-26 23:32:32,106 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:32,107 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:32,109 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:32,109 INFO sqlalchemy.engine.base.Engine Thread-31 : ('philip', 1, 1)
2020-05-26 23:32:32,110 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:32,110 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:32,118 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-05-26 23:32:32,118 INFO sqlalchemy.engine.base.Engine Thread-31 : ()
2020-05-26 23:32:32,119 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-05-26 23:32:32,119 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:32:32,119 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:32:32,120 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:32:32,120 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:32:32,120 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:32:32,120 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'No')
2020-05-26 23:32:32,120 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:32:32,120 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:32:32,120 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-05-26 23:32:32,120 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:32:32,125 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:32,125 INFO sqlalchemy.engine.base.Engine Thread-31 : ('philip', 1, 1)
2020-05-26 23:32:32,126 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:32,126 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:32,130 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-05-26 23:32:37,741 INFO sqlalchemy.engine.base.Engine Thread-41 : BEGIN (implicit)
2020-05-26 23:32:37,742 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:32:37,742 INFO sqlalchemy.engine.base.Engine Thread-41 : (1, 1)
2020-05-26 23:32:37,742 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:37,743 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:37,745 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:37,745 INFO sqlalchemy.engine.base.Engine Thread-41 : ('philip', 1, 1)
2020-05-26 23:32:37,747 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:37,747 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:37,748 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-26 23:32:37,749 INFO sqlalchemy.engine.base.Engine Thread-41 : ('12', 1)
2020-05-26 23:32:37,749 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-26 23:32:37,749 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 129, '1', 106)
2020-05-26 23:32:37,752 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:37,752 INFO sqlalchemy.engine.base.Engine Thread-41 : (82,)
2020-05-26 23:32:37,752 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:37,753 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:32:37,753 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:32:37,753 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:32:37,754 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-26 23:32:37,755 INFO sqlalchemy.engine.base.Engine Thread-41 : (1,)
2020-05-26 23:32:37,755 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:37,755 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:32:37,755 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:32:37,757 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-26 23:32:37,757 INFO sqlalchemy.engine.base.Engine Thread-41 : ()
2020-05-26 23:32:37,757 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-26 23:32:37,757 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-26 23:32:37,758 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-26 23:32:37,759 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:37,759 INFO sqlalchemy.engine.base.Engine Thread-41 : (127,)
2020-05-26 23:32:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (131, 'BaU Firewall Change', 'BaU Firewall Change', 127, 0, 0, 1)
2020-05-26 23:32:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:32:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:32:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:32:37,761 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:37,761 INFO sqlalchemy.engine.base.Engine Thread-41 : (105,)
2020-05-26 23:32:37,762 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:37,762 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:32:37,762 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:32:37,767 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:37,767 INFO sqlalchemy.engine.base.Engine Thread-41 : ('philip', 1, 1)
2020-05-26 23:32:37,767 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:37,771 INFO sqlalchemy.engine.base.Engine Thread-41 : ROLLBACK
2020-05-26 23:32:43,475 INFO sqlalchemy.engine.base.Engine Thread-51 : BEGIN (implicit)
2020-05-26 23:32:43,476 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:32:43,477 INFO sqlalchemy.engine.base.Engine Thread-51 : (1, 1)
2020-05-26 23:32:43,478 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:43,478 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:43,480 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:43,481 INFO sqlalchemy.engine.base.Engine Thread-51 : ('philip', 1, 1)
2020-05-26 23:32:43,481 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:43,482 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:43,483 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-26 23:32:43,483 INFO sqlalchemy.engine.base.Engine Thread-51 : ('12', 1)
2020-05-26 23:32:43,484 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-26 23:32:43,484 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 129, '1', 106)
2020-05-26 23:32:43,487 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:43,487 INFO sqlalchemy.engine.base.Engine Thread-51 : (82,)
2020-05-26 23:32:43,488 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:43,488 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:32:43,488 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:32:43,488 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:32:43,490 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-26 23:32:43,490 INFO sqlalchemy.engine.base.Engine Thread-51 : (1,)
2020-05-26 23:32:43,490 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:43,491 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:32:43,491 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:32:43,492 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-26 23:32:43,492 INFO sqlalchemy.engine.base.Engine Thread-51 : ()
2020-05-26 23:32:43,492 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-26 23:32:43,492 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-26 23:32:43,493 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-26 23:32:43,494 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:43,494 INFO sqlalchemy.engine.base.Engine Thread-51 : (127,)
2020-05-26 23:32:43,494 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:43,495 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (131, 'BaU Firewall Change', 'BaU Firewall Change', 127, 0, 0, 1)
2020-05-26 23:32:43,495 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:32:43,495 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:32:43,495 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:32:43,496 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:43,496 INFO sqlalchemy.engine.base.Engine Thread-51 : (105,)
2020-05-26 23:32:43,496 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:43,497 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:32:43,497 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:32:43,498 INFO sqlalchemy.engine.base.Engine Thread-51 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_type=%s WHERE datesofinterest.id = %s
2020-05-26 23:32:43,498 INFO sqlalchemy.engine.base.Engine Thread-51 : ('12', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 130, 12)
2020-05-26 23:32:43,499 INFO sqlalchemy.engine.base.Engine Thread-51 : COMMIT
2020-05-26 23:32:43,539 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-05-26 23:32:43,540 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:32:43,540 INFO sqlalchemy.engine.base.Engine Thread-52 : (1, 1)
2020-05-26 23:32:43,541 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:43,541 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:43,543 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:43,543 INFO sqlalchemy.engine.base.Engine Thread-52 : ('philip', 1, 1)
2020-05-26 23:32:43,544 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:43,545 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:43,553 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-05-26 23:32:43,553 INFO sqlalchemy.engine.base.Engine Thread-52 : ()
2020-05-26 23:32:43,554 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-05-26 23:32:43,554 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:32:43,554 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:32:43,554 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:32:43,554 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:32:43,554 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:32:43,555 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'No')
2020-05-26 23:32:43,555 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:32:43,555 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'No')
2020-05-26 23:32:43,555 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-05-26 23:32:43,555 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Yes')
2020-05-26 23:32:43,559 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:43,559 INFO sqlalchemy.engine.base.Engine Thread-52 : ('philip', 1, 1)
2020-05-26 23:32:43,560 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:43,560 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:43,563 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-05-26 23:32:46,031 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-05-26 23:32:46,032 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-05-26 23:32:46,032 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-05-26 23:32:46,033 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:46,033 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:46,036 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:46,036 INFO sqlalchemy.engine.base.Engine Thread-62 : ('philip', 1, 1)
2020-05-26 23:32:46,037 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:46,037 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:46,038 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-05-26 23:32:46,038 INFO sqlalchemy.engine.base.Engine Thread-62 : ('12', 1)
2020-05-26 23:32:46,039 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-05-26 23:32:46,039 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 130, '1', 106)
2020-05-26 23:32:46,044 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:46,044 INFO sqlalchemy.engine.base.Engine Thread-62 : (82,)
2020-05-26 23:32:46,045 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:46,045 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-05-26 23:32:46,045 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-05-26 23:32:46,046 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-05-26 23:32:46,047 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-05-26 23:32:46,047 INFO sqlalchemy.engine.base.Engine Thread-62 : (1,)
2020-05-26 23:32:46,048 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:46,048 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-05-26 23:32:46,048 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-05-26 23:32:46,049 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-05-26 23:32:46,049 INFO sqlalchemy.engine.base.Engine Thread-62 : ()
2020-05-26 23:32:46,050 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-05-26 23:32:46,050 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-05-26 23:32:46,050 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-05-26 23:32:46,052 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:46,052 INFO sqlalchemy.engine.base.Engine Thread-62 : (127,)
2020-05-26 23:32:46,052 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:46,052 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (131, 'BaU Firewall Change', 'BaU Firewall Change', 127, 0, 0, 1)
2020-05-26 23:32:46,053 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (129, 'Heightened Awareness Period (HAP)', 'Heightened Awareness Period (HAP)', 127, 0, 0, 1)
2020-05-26 23:32:46,053 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (128, 'Informational', 'Informational', 127, 0, 0, 1)
2020-05-26 23:32:46,053 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (130, 'No Changes Allowed', 'No Changes Allowed', 127, 0, 0, 1)
2020-05-26 23:32:46,054 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-05-26 23:32:46,054 INFO sqlalchemy.engine.base.Engine Thread-62 : (105,)
2020-05-26 23:32:46,055 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-05-26 23:32:46,055 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-05-26 23:32:46,055 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-05-26 23:32:46,059 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-05-26 23:32:46,060 INFO sqlalchemy.engine.base.Engine Thread-62 : ('philip', 1, 1)
2020-05-26 23:32:46,060 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-05-26 23:32:46,060 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-05-26 23:32:46,063 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
