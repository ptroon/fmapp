2020-06-08 00:02:20,417 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 00:02:20,419 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:02:20,421 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:02:20,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 00:02:20,423 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 00:02:20,423 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:02:20,424 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:02:20,424 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 00:02:20,425 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 00:02:20,425 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:02:20,425 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 00:02:20,425 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 00:02:20,426 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 00:02:20,426 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:02:20,427 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 00:02:20,427 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 00:02:20,428 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 00:02:20,429 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:02:20,429 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 00:02:20,429 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:02:20,430 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 00:02:20,430 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:02:20,431 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 00:02:20,435 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:02:20,435 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 00:02:20,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:02:20,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:02:20,448 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:02:20,448 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:02:20,449 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:02:20,450 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:02:20,450 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:02:20,450 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:02:20,489 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 00:02:21,524 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 00:02:21,525 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:02:21,526 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 00:02:21,526 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:02:21,527 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:02:21,531 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:02:21,531 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 00:02:21,531 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:02:21,531 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:05:18,218 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 00:05:18,218 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:05:18,219 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:05:18,220 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 00:05:18,220 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 00:05:18,220 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:05:18,221 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:05:18,221 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 00:05:18,221 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 00:05:18,222 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:05:18,222 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 00:05:18,222 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 00:05:18,222 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 00:05:18,222 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:05:18,223 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 00:05:18,223 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 00:05:18,224 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 00:05:18,224 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:05:18,225 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 00:05:18,225 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:05:18,225 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 00:05:18,225 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:05:18,226 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 00:05:18,228 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:05:18,228 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 00:05:18,229 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:05:18,229 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:05:18,237 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:05:18,238 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:05:18,238 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:05:18,239 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:05:18,239 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:05:18,239 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:05:18,265 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 00:05:19,149 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 00:05:19,150 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:05:19,150 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 00:05:19,151 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:05:19,151 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:05:19,154 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:05:19,154 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 00:05:19,155 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:05:19,155 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:06:15,839 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 00:06:15,839 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:06:15,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:06:15,841 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 00:06:15,841 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 00:06:15,842 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:06:15,842 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:06:15,842 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 00:06:15,843 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 00:06:15,843 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:06:15,843 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 00:06:15,843 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 00:06:15,843 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 00:06:15,843 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:06:15,844 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 00:06:15,844 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 00:06:15,845 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 00:06:15,845 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:06:15,845 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 00:06:15,845 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:06:15,846 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 00:06:15,846 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:06:15,846 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 00:06:15,850 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:06:15,850 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 00:06:15,850 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:06:15,851 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:06:15,855 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:06:15,855 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 00:06:15,856 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:06:15,856 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:06:16,395 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 00:06:16,397 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 00:06:16,398 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:06:16,398 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 00:06:16,399 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:06:16,399 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:06:16,409 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 00:06:16,410 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 00:06:16,411 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 00:06:16,412 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 00:06:16,412 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 00:06:16,417 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:06:16,417 INFO sqlalchemy.engine.base.Engine Thread-3 : (100,)
2020-06-08 00:06:16,418 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:06:16,418 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 00:06:16,418 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 00:06:16,418 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 00:06:16,418 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 00:06:16,418 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 00:06:16,432 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 00:06:18,741 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 00:06:18,742 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:06:18,742 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 00:06:18,742 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:06:18,743 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:06:18,751 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:06:18,751 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:06:18,752 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:06:18,752 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:06:18,752 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:06:18,752 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:06:18,773 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 00:06:19,538 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 00:06:19,539 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:06:19,539 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 00:06:19,539 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:06:19,540 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:06:19,543 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:06:19,543 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 00:06:19,544 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:06:19,544 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:07:09,434 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 00:07:09,434 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:09,435 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:07:09,435 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 00:07:09,436 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 00:07:09,436 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:09,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:07:09,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 00:07:09,437 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 00:07:09,437 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:09,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 00:07:09,438 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 00:07:09,438 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 00:07:09,438 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:09,439 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 00:07:09,439 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 00:07:09,439 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 00:07:09,439 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:09,440 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 00:07:09,440 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:09,441 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 00:07:09,441 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:09,441 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 00:07:09,444 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:07:09,444 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 00:07:09,444 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:07:09,445 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:07:09,449 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:07:09,449 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 00:07:09,450 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:07:09,450 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:07:09,454 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:07:09,454 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 00:07:09,485 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:07:09,496 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 00:07:17,555 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 00:07:17,556 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:07:17,556 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 00:07:17,557 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:07:17,557 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:07:17,564 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:07:17,565 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-08 00:07:17,565 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:07:17,566 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:07:17,566 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (21, 'Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-08 00:07:17,566 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-08 00:07:17,586 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 00:07:19,727 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 00:07:19,728 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:07:19,728 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 00:07:19,729 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:07:19,730 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:07:19,734 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:07:19,734 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:07:19,734 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:07:19,734 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:07:19,735 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:07:19,735 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:07:19,737 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 00:07:20,872 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 00:07:20,874 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:07:20,875 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 00:07:20,875 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:07:20,875 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:07:20,879 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:07:20,879 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 00:07:20,879 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:07:20,879 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:07:20,883 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:07:20,883 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 00:07:20,883 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:07:20,885 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 00:07:44,719 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 00:07:44,719 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:44,720 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:07:44,721 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 00:07:44,721 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 00:07:44,721 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:44,722 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 00:07:44,722 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 00:07:44,722 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 00:07:44,722 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:44,723 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 00:07:44,723 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 00:07:44,723 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 00:07:44,723 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:44,724 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 00:07:44,724 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 00:07:44,725 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 00:07:44,725 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:44,726 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 00:07:44,726 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:44,726 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 00:07:44,726 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 00:07:44,727 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 00:07:44,729 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:07:44,730 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 00:07:44,730 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:07:44,731 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:07:44,740 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:07:44,740 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:07:44,741 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:07:44,742 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:07:44,742 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:07:44,742 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:07:44,769 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 00:07:46,239 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 00:07:46,240 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:07:46,240 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 00:07:46,241 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:07:46,241 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:07:46,244 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:07:46,245 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 00:07:46,245 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:07:46,245 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:07:46,249 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:07:46,249 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 00:07:46,250 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:07:46,255 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 00:10:50,019 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 00:10:50,021 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:10:50,021 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 00:10:50,023 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:10:50,023 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:10:50,029 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:10:50,029 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:10:50,030 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:10:50,031 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:10:50,031 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:10:50,031 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:10:50,033 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 00:10:51,089 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 00:10:51,090 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:10:51,090 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 00:10:51,093 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:10:51,093 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:10:51,096 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:10:51,096 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 00:10:51,097 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:10:51,097 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:10:51,101 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:10:51,101 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 00:10:51,101 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:10:51,111 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 00:11:16,229 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 00:11:16,230 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:11:16,230 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-08 00:11:16,231 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:11:16,231 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:11:16,235 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:11:16,235 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:11:16,236 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:11:16,236 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:11:16,236 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:11:16,236 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:11:16,238 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 00:11:16,839 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-08 00:11:16,840 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:11:16,840 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-08 00:11:16,841 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:11:16,841 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:11:16,845 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:11:16,845 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-08 00:11:16,846 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:11:16,846 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:11:16,846 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (21, 'Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-08 00:11:16,846 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-08 00:11:16,848 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-08 00:11:18,622 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-08 00:11:18,623 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:11:18,623 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-08 00:11:18,623 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:11:18,624 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:11:18,629 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:11:18,629 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:11:18,630 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:11:18,630 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:11:18,630 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:11:18,630 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:11:18,632 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-08 00:11:19,910 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-08 00:11:19,912 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:11:19,912 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-08 00:11:19,912 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:11:19,913 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:11:19,916 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:11:19,916 INFO sqlalchemy.engine.base.Engine Thread-9 : (20,)
2020-06-08 00:11:19,917 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:11:19,917 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:11:19,922 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:11:19,922 INFO sqlalchemy.engine.base.Engine Thread-9 : (20,)
2020-06-08 00:11:19,922 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:11:19,930 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-08 00:11:41,729 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-08 00:11:41,731 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:11:41,731 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-08 00:11:41,732 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:11:41,732 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:11:41,736 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:11:41,736 INFO sqlalchemy.engine.base.Engine Thread-10 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:11:41,737 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:11:41,737 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:11:41,737 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:11:41,737 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:11:41,739 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-08 00:11:43,145 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-08 00:11:43,146 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:11:43,146 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-08 00:11:43,147 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:11:43,147 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:11:43,151 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:11:43,151 INFO sqlalchemy.engine.base.Engine Thread-11 : (20,)
2020-06-08 00:11:43,152 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:11:43,152 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:11:43,155 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:11:43,156 INFO sqlalchemy.engine.base.Engine Thread-11 : (20,)
2020-06-08 00:11:43,156 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:11:43,158 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-08 00:12:33,877 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 00:12:33,878 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:12:33,879 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 00:12:33,879 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:12:33,880 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:12:33,884 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:12:33,884 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:12:33,884 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:12:33,885 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:12:33,885 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:12:33,885 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:12:33,887 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 00:12:35,792 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 00:12:35,793 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:12:35,794 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 00:12:35,794 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:12:35,795 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:12:35,799 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:12:35,799 INFO sqlalchemy.engine.base.Engine Thread-13 : (20,)
2020-06-08 00:12:35,799 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:12:35,800 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:12:35,803 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:12:35,803 INFO sqlalchemy.engine.base.Engine Thread-13 : (20,)
2020-06-08 00:12:35,804 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:12:35,812 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 00:13:36,358 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 00:13:36,359 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:13:36,359 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 00:13:36,360 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:13:36,360 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:13:36,365 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:13:36,366 INFO sqlalchemy.engine.base.Engine Thread-14 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:13:36,366 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:13:36,366 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:13:36,367 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:13:36,367 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:13:36,369 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 00:13:37,388 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 00:13:37,389 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:13:37,389 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 00:13:37,390 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:13:37,390 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:13:37,393 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:13:37,393 INFO sqlalchemy.engine.base.Engine Thread-15 : (20,)
2020-06-08 00:13:37,394 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:13:37,394 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:13:37,398 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:13:37,398 INFO sqlalchemy.engine.base.Engine Thread-15 : (20,)
2020-06-08 00:13:37,399 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:13:37,407 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 00:14:03,254 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 00:14:03,256 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:14:03,256 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 00:14:03,257 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:14:03,257 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:14:03,261 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:14:03,262 INFO sqlalchemy.engine.base.Engine Thread-16 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:14:03,262 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:14:03,262 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:14:03,263 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:14:03,263 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:14:03,265 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 00:14:04,393 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 00:14:04,395 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:14:04,395 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 00:14:04,396 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:14:04,396 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:14:04,400 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:14:04,400 INFO sqlalchemy.engine.base.Engine Thread-17 : (20,)
2020-06-08 00:14:04,400 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:14:04,401 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:14:04,405 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:14:04,405 INFO sqlalchemy.engine.base.Engine Thread-17 : (20,)
2020-06-08 00:14:04,405 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:14:04,414 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 00:14:17,110 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-08 00:14:17,112 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:14:17,112 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-08 00:14:17,113 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:14:17,113 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:14:17,119 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:14:17,119 INFO sqlalchemy.engine.base.Engine Thread-18 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:14:17,120 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:14:17,121 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:14:17,121 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:14:17,121 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:14:17,123 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-08 00:14:17,949 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-08 00:14:17,953 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:14:17,953 INFO sqlalchemy.engine.base.Engine Thread-19 : (1, 1)
2020-06-08 00:14:17,953 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:14:17,954 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:14:17,957 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:14:17,957 INFO sqlalchemy.engine.base.Engine Thread-19 : (20,)
2020-06-08 00:14:17,958 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:14:17,958 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:14:17,962 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:14:17,962 INFO sqlalchemy.engine.base.Engine Thread-19 : (20,)
2020-06-08 00:14:17,963 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:14:17,972 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-06-08 00:14:40,778 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-08 00:14:40,779 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:14:40,779 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-08 00:14:40,780 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:14:40,781 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:14:40,785 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:14:40,785 INFO sqlalchemy.engine.base.Engine Thread-20 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:14:40,786 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:14:40,786 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:14:40,786 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:14:40,786 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:14:40,788 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-08 00:14:41,797 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-08 00:14:41,798 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:14:41,798 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-08 00:14:41,799 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:14:41,799 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:14:41,803 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:14:41,803 INFO sqlalchemy.engine.base.Engine Thread-21 : (20,)
2020-06-08 00:14:41,804 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:14:41,804 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:14:41,808 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:14:41,808 INFO sqlalchemy.engine.base.Engine Thread-21 : (20,)
2020-06-08 00:14:41,808 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:14:41,810 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-08 00:17:49,097 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-08 00:17:49,098 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:17:49,098 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-08 00:17:49,100 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:17:49,100 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:17:49,106 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:17:49,106 INFO sqlalchemy.engine.base.Engine Thread-23 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:17:49,107 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:17:49,107 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:17:49,107 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:17:49,107 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:17:49,110 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-08 00:17:50,369 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-08 00:17:50,370 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:17:50,370 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-08 00:17:50,371 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:17:50,371 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:17:50,375 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:17:50,375 INFO sqlalchemy.engine.base.Engine Thread-24 : (20,)
2020-06-08 00:17:50,375 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:17:50,376 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:17:50,379 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:17:50,379 INFO sqlalchemy.engine.base.Engine Thread-24 : (20,)
2020-06-08 00:17:50,380 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:17:51,742 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-06-08 00:17:51,745 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-06-08 00:17:51,746 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:17:51,746 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-06-08 00:17:51,747 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:17:51,747 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:17:51,751 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:17:51,751 INFO sqlalchemy.engine.base.Engine Thread-25 : (20,)
2020-06-08 00:17:51,751 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:17:51,751 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:17:51,755 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:17:51,755 INFO sqlalchemy.engine.base.Engine Thread-25 : (20,)
2020-06-08 00:17:51,756 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:48:15,248 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-08 00:48:15,254 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-08 00:48:15,255 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:48:15,255 INFO sqlalchemy.engine.base.Engine Thread-26 : (1, 1)
2020-06-08 00:48:15,256 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:48:15,257 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:48:15,263 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 00:48:15,263 INFO sqlalchemy.engine.base.Engine Thread-26 : (20,)
2020-06-08 00:48:15,264 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:48:15,264 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:48:15,267 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 00:48:15,268 INFO sqlalchemy.engine.base.Engine Thread-26 : (20,)
2020-06-08 00:48:15,268 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 00:48:16,254 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-08 00:48:16,256 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-08 00:48:16,257 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:48:16,257 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-08 00:48:16,258 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:48:16,260 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:48:16,269 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 00:48:16,269 INFO sqlalchemy.engine.base.Engine Thread-27 : ()
2020-06-08 00:48:16,270 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 00:48:16,271 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 00:48:16,271 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 00:48:16,273 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:48:16,273 INFO sqlalchemy.engine.base.Engine Thread-27 : (100,)
2020-06-08 00:48:16,274 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:48:16,274 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 00:48:16,274 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 00:48:16,275 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 00:48:16,275 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 00:48:16,275 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 00:48:16,283 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-08 00:48:19,147 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-08 00:48:19,149 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:48:19,149 INFO sqlalchemy.engine.base.Engine Thread-28 : ('philip', 1, 1)
2020-06-08 00:48:19,150 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:48:19,150 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:48:19,159 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-06-08 00:48:19,159 INFO sqlalchemy.engine.base.Engine Thread-28 : (108,)
2020-06-08 00:48:19,160 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-06-08 00:48:19,160 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'Made Up CheckPoint', 'YYYYYYY', '02:00', '04:00', 'CheckPoint CMA', 'CheckPoint', 108, 'IND', 'Active')
2020-06-08 00:48:19,161 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-08 00:48:21,840 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-08 00:48:21,842 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:48:21,842 INFO sqlalchemy.engine.base.Engine Thread-29 : ('philip', 1, 1)
2020-06-08 00:48:21,849 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:48:21,849 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:48:21,857 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-06-08 00:48:21,857 INFO sqlalchemy.engine.base.Engine Thread-29 : (101,)
2020-06-08 00:48:21,858 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-06-08 00:48:21,858 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (2, 'Made Up Fortigate', 'YYYYYYY', '02:00', '04:00', 'Fortigate FortiManager', 'Fortigate', 101, 'GBR', 'Active')
2020-06-08 00:48:21,859 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-08 00:48:27,394 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-08 00:48:27,396 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:48:27,396 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-08 00:48:27,396 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:48:27,397 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:48:27,402 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:48:27,402 INFO sqlalchemy.engine.base.Engine Thread-30 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:48:27,403 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:48:27,403 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:48:27,403 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:48:27,403 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:48:27,405 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-08 00:48:29,084 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-08 00:48:29,085 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:48:29,085 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-08 00:48:29,086 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:48:29,086 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:48:29,090 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 00:48:29,090 INFO sqlalchemy.engine.base.Engine Thread-31 : ()
2020-06-08 00:48:29,091 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 00:48:29,092 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 00:48:29,092 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 00:48:29,094 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:48:29,094 INFO sqlalchemy.engine.base.Engine Thread-31 : (100,)
2020-06-08 00:48:29,094 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:48:29,094 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 00:48:29,094 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 00:48:29,095 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 00:48:29,095 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 00:48:29,095 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 00:48:29,097 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-08 00:48:31,557 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-08 00:48:31,558 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:48:31,559 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-08 00:48:31,559 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:48:31,559 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:48:31,564 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 00:48:31,564 INFO sqlalchemy.engine.base.Engine Thread-32 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 00:48:31,564 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 00:48:31,565 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 00:48:31,565 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 00:48:31,565 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 00:48:31,567 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-08 00:49:44,802 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-06-08 00:49:44,804 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:49:44,804 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-06-08 00:49:44,805 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:49:44,805 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:49:44,808 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:49:44,808 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-06-08 00:49:44,809 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:49:44,809 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:49:44,817 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 00:49:44,818 INFO sqlalchemy.engine.base.Engine Thread-33 : ()
2020-06-08 00:49:44,818 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 00:49:44,819 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 00:49:44,820 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 00:49:44,820 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 00:49:44,820 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 00:49:44,893 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:49:44,893 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-06-08 00:49:44,894 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:49:44,894 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:49:44,899 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-06-08 00:49:48,045 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-06-08 00:49:48,046 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:49:48,046 INFO sqlalchemy.engine.base.Engine Thread-43 : (1, 1)
2020-06-08 00:49:48,047 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:49:48,047 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:49:48,050 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:49:48,050 INFO sqlalchemy.engine.base.Engine Thread-43 : ('philip', 1, 1)
2020-06-08 00:49:48,050 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:49:48,051 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:49:48,053 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 00:49:48,053 INFO sqlalchemy.engine.base.Engine Thread-43 : ('0', 1)
2020-06-08 00:49:48,054 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 00:49:48,056 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:49:48,057 INFO sqlalchemy.engine.base.Engine Thread-43 : (82,)
2020-06-08 00:49:48,057 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:49:48,057 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 00:49:48,057 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 00:49:48,058 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 00:49:48,059 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 00:49:48,059 INFO sqlalchemy.engine.base.Engine Thread-43 : (1,)
2020-06-08 00:49:48,059 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:49:48,059 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 00:49:48,060 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 00:49:48,062 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 00:49:48,062 INFO sqlalchemy.engine.base.Engine Thread-43 : ()
2020-06-08 00:49:48,062 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 00:49:48,063 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 00:49:48,063 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 00:49:48,064 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:49:48,064 INFO sqlalchemy.engine.base.Engine Thread-43 : (127,)
2020-06-08 00:49:48,065 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:49:48,065 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:49:48,065 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:49:48,065 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:49:48,065 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 00:49:48,066 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:49:48,067 INFO sqlalchemy.engine.base.Engine Thread-43 : (105,)
2020-06-08 00:49:48,067 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:49:48,067 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 00:49:48,067 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 00:49:48,102 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:49:48,102 INFO sqlalchemy.engine.base.Engine Thread-43 : ('philip', 1, 1)
2020-06-08 00:49:48,103 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:49:48,103 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:49:48,107 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-06-08 00:50:24,386 INFO sqlalchemy.engine.base.Engine Thread-53 : BEGIN (implicit)
2020-06-08 00:50:24,387 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:50:24,387 INFO sqlalchemy.engine.base.Engine Thread-53 : (1, 1)
2020-06-08 00:50:24,388 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:50:24,388 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:50:24,390 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:50:24,390 INFO sqlalchemy.engine.base.Engine Thread-53 : ('philip', 1, 1)
2020-06-08 00:50:24,391 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:50:24,391 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:50:24,392 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 00:50:24,392 INFO sqlalchemy.engine.base.Engine Thread-53 : ('0', 1)
2020-06-08 00:50:24,393 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 00:50:24,397 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:50:24,397 INFO sqlalchemy.engine.base.Engine Thread-53 : (82,)
2020-06-08 00:50:24,397 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:50:24,397 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 00:50:24,398 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 00:50:24,398 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 00:50:24,399 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 00:50:24,399 INFO sqlalchemy.engine.base.Engine Thread-53 : (1,)
2020-06-08 00:50:24,399 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:50:24,400 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 00:50:24,400 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 00:50:24,401 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 00:50:24,401 INFO sqlalchemy.engine.base.Engine Thread-53 : ()
2020-06-08 00:50:24,401 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 00:50:24,402 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 00:50:24,402 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 00:50:24,403 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:50:24,403 INFO sqlalchemy.engine.base.Engine Thread-53 : (127,)
2020-06-08 00:50:24,403 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:50:24,404 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:50:24,404 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:50:24,404 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:50:24,404 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 00:50:24,405 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:50:24,405 INFO sqlalchemy.engine.base.Engine Thread-53 : (105,)
2020-06-08 00:50:24,405 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:50:24,406 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 00:50:24,406 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 00:50:24,412 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:50:24,412 INFO sqlalchemy.engine.base.Engine Thread-53 : ('philip', 1, 1)
2020-06-08 00:50:24,413 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:50:24,413 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:50:24,417 INFO sqlalchemy.engine.base.Engine Thread-53 : ROLLBACK
2020-06-08 00:52:46,022 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-06-08 00:52:46,023 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 00:52:46,023 INFO sqlalchemy.engine.base.Engine Thread-63 : (1, 1)
2020-06-08 00:52:46,025 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:52:46,025 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:52:46,028 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:52:46,028 INFO sqlalchemy.engine.base.Engine Thread-63 : ('philip', 1, 1)
2020-06-08 00:52:46,029 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:52:46,029 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:52:46,031 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 00:52:46,031 INFO sqlalchemy.engine.base.Engine Thread-63 : ('0', 1)
2020-06-08 00:52:46,031 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 00:52:46,034 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:52:46,034 INFO sqlalchemy.engine.base.Engine Thread-63 : (82,)
2020-06-08 00:52:46,035 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:52:46,035 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 00:52:46,035 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 00:52:46,035 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 00:52:46,037 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 00:52:46,037 INFO sqlalchemy.engine.base.Engine Thread-63 : (1,)
2020-06-08 00:52:46,037 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:52:46,037 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 00:52:46,037 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 00:52:46,039 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 00:52:46,039 INFO sqlalchemy.engine.base.Engine Thread-63 : ()
2020-06-08 00:52:46,039 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 00:52:46,039 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 00:52:46,039 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 00:52:46,040 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:52:46,041 INFO sqlalchemy.engine.base.Engine Thread-63 : (127,)
2020-06-08 00:52:46,041 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:52:46,041 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:52:46,041 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:52:46,041 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 00:52:46,042 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 00:52:46,043 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 00:52:46,043 INFO sqlalchemy.engine.base.Engine Thread-63 : (105,)
2020-06-08 00:52:46,043 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 00:52:46,044 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 00:52:46,044 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 00:52:46,048 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 00:52:46,049 INFO sqlalchemy.engine.base.Engine Thread-63 : ('philip', 1, 1)
2020-06-08 00:52:46,049 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 00:52:46,049 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 00:52:46,053 INFO sqlalchemy.engine.base.Engine Thread-63 : ROLLBACK
2020-06-08 01:40:39,170 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-06-08 01:40:39,173 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:40:39,173 INFO sqlalchemy.engine.base.Engine Thread-74 : (1, 1)
2020-06-08 01:40:39,176 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:40:39,176 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:40:39,179 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:40:39,179 INFO sqlalchemy.engine.base.Engine Thread-74 : ('philip', 1, 1)
2020-06-08 01:40:39,180 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:40:39,180 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:40:39,181 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 01:40:39,181 INFO sqlalchemy.engine.base.Engine Thread-74 : ('0', 1)
2020-06-08 01:40:39,188 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 01:40:39,191 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:40:39,191 INFO sqlalchemy.engine.base.Engine Thread-74 : (82,)
2020-06-08 01:40:39,192 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:40:39,192 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 01:40:39,192 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 01:40:39,193 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 01:40:39,194 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 01:40:39,194 INFO sqlalchemy.engine.base.Engine Thread-74 : (1,)
2020-06-08 01:40:39,195 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:40:39,195 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 01:40:39,195 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 01:40:39,196 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 01:40:39,196 INFO sqlalchemy.engine.base.Engine Thread-74 : ()
2020-06-08 01:40:39,197 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 01:40:39,197 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 01:40:39,197 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 01:40:39,198 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:40:39,199 INFO sqlalchemy.engine.base.Engine Thread-74 : (127,)
2020-06-08 01:40:39,199 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:40:39,199 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:40:39,199 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:40:39,200 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:40:39,200 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 01:40:39,201 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:40:39,201 INFO sqlalchemy.engine.base.Engine Thread-74 : (105,)
2020-06-08 01:40:39,202 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:40:39,202 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 01:40:39,202 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 01:40:39,208 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:40:39,208 INFO sqlalchemy.engine.base.Engine Thread-74 : ('philip', 1, 1)
2020-06-08 01:40:39,209 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:40:39,209 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:40:39,214 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-06-08 01:46:05,954 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 01:46:05,954 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:46:05,956 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 01:46:05,956 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 01:46:05,957 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 01:46:05,957 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:46:05,957 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 01:46:05,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 01:46:05,958 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 01:46:05,958 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:46:05,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 01:46:05,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 01:46:05,959 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 01:46:05,959 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:46:05,960 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 01:46:05,960 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 01:46:05,961 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 01:46:05,961 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:46:05,961 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 01:46:05,961 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:46:05,962 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 01:46:05,962 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:46:05,962 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 01:46:05,965 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:46:05,965 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 01:46:05,966 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:05,966 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:05,969 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:05,969 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 01:46:05,970 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:05,970 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:05,972 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 01:46:05,972 INFO sqlalchemy.engine.base.Engine Thread-2 : ('0', 1)
2020-06-08 01:46:05,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 01:46:05,978 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:05,978 INFO sqlalchemy.engine.base.Engine Thread-2 : (82,)
2020-06-08 01:46:05,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:05,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 01:46:05,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 01:46:05,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 01:46:05,980 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 01:46:05,980 INFO sqlalchemy.engine.base.Engine Thread-2 : (1,)
2020-06-08 01:46:05,981 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:05,981 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 01:46:05,981 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 01:46:05,983 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 01:46:05,983 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:46:05,984 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 01:46:05,984 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 01:46:05,984 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 01:46:05,985 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:05,985 INFO sqlalchemy.engine.base.Engine Thread-2 : (127,)
2020-06-08 01:46:05,986 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:05,986 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:05,986 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:05,986 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:05,986 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 01:46:05,988 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:05,988 INFO sqlalchemy.engine.base.Engine Thread-2 : (105,)
2020-06-08 01:46:05,988 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:05,988 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 01:46:05,988 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 01:46:06,084 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:06,084 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 01:46:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:06,085 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:06,090 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 01:46:09,525 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 01:46:09,526 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:46:09,526 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 01:46:09,526 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:09,527 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:09,530 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:09,530 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-06-08 01:46:09,530 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:09,531 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:09,532 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 01:46:09,532 INFO sqlalchemy.engine.base.Engine Thread-13 : ('0', 1)
2020-06-08 01:46:09,533 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 01:46:09,536 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:09,536 INFO sqlalchemy.engine.base.Engine Thread-13 : (82,)
2020-06-08 01:46:09,537 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:09,537 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 01:46:09,537 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 01:46:09,537 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 01:46:09,539 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 01:46:09,539 INFO sqlalchemy.engine.base.Engine Thread-13 : (1,)
2020-06-08 01:46:09,540 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:09,540 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 01:46:09,540 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 01:46:09,541 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 01:46:09,541 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-06-08 01:46:09,542 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 01:46:09,542 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 01:46:09,542 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 01:46:09,543 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:09,543 INFO sqlalchemy.engine.base.Engine Thread-13 : (127,)
2020-06-08 01:46:09,544 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:09,544 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:09,544 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:09,544 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:09,544 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 01:46:09,546 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:09,546 INFO sqlalchemy.engine.base.Engine Thread-13 : (105,)
2020-06-08 01:46:09,546 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:09,547 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 01:46:09,547 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 01:46:09,551 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:09,551 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-06-08 01:46:09,552 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:09,552 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:09,556 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 01:46:13,479 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-08 01:46:13,481 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:46:13,481 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-08 01:46:13,482 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:13,482 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:13,484 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:13,484 INFO sqlalchemy.engine.base.Engine Thread-23 : ('philip', 1, 1)
2020-06-08 01:46:13,485 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:13,485 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:13,494 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 01:46:13,494 INFO sqlalchemy.engine.base.Engine Thread-23 : ()
2020-06-08 01:46:13,495 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 01:46:13,495 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 01:46:13,495 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 01:46:13,496 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 01:46:13,497 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 01:46:13,516 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:13,516 INFO sqlalchemy.engine.base.Engine Thread-23 : ('philip', 1, 1)
2020-06-08 01:46:13,517 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:13,517 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:13,521 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-08 01:46:14,871 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-06-08 01:46:14,873 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:46:14,873 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-06-08 01:46:14,874 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:14,874 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:14,876 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:14,877 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-06-08 01:46:14,877 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:14,878 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:14,879 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 01:46:14,879 INFO sqlalchemy.engine.base.Engine Thread-33 : ('0', 1)
2020-06-08 01:46:14,880 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 01:46:14,882 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:14,882 INFO sqlalchemy.engine.base.Engine Thread-33 : (82,)
2020-06-08 01:46:14,883 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:14,883 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 01:46:14,883 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 01:46:14,883 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 01:46:14,884 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 01:46:14,884 INFO sqlalchemy.engine.base.Engine Thread-33 : (1,)
2020-06-08 01:46:14,885 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:14,885 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 01:46:14,885 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 01:46:14,887 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 01:46:14,887 INFO sqlalchemy.engine.base.Engine Thread-33 : ()
2020-06-08 01:46:14,887 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 01:46:14,888 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 01:46:14,888 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 01:46:14,889 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:14,889 INFO sqlalchemy.engine.base.Engine Thread-33 : (127,)
2020-06-08 01:46:14,890 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:14,890 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:14,890 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:14,890 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:14,890 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 01:46:14,892 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:14,892 INFO sqlalchemy.engine.base.Engine Thread-33 : (105,)
2020-06-08 01:46:14,893 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:14,893 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 01:46:14,893 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 01:46:14,897 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:14,897 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-06-08 01:46:14,898 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:14,898 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:14,902 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-06-08 01:46:45,836 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-06-08 01:46:45,837 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:46:45,837 INFO sqlalchemy.engine.base.Engine Thread-43 : (1, 1)
2020-06-08 01:46:45,838 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:45,838 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:45,841 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:45,841 INFO sqlalchemy.engine.base.Engine Thread-43 : ('philip', 1, 1)
2020-06-08 01:46:45,841 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:45,842 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:45,843 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 01:46:45,843 INFO sqlalchemy.engine.base.Engine Thread-43 : ('0', 1)
2020-06-08 01:46:45,843 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 01:46:45,845 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:45,846 INFO sqlalchemy.engine.base.Engine Thread-43 : (82,)
2020-06-08 01:46:45,846 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:45,846 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 01:46:45,847 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 01:46:45,847 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 01:46:45,848 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 01:46:45,848 INFO sqlalchemy.engine.base.Engine Thread-43 : (1,)
2020-06-08 01:46:45,848 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:45,849 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 01:46:45,849 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 01:46:45,850 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 01:46:45,850 INFO sqlalchemy.engine.base.Engine Thread-43 : ()
2020-06-08 01:46:45,851 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 01:46:45,851 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 01:46:45,851 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 01:46:45,852 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:45,852 INFO sqlalchemy.engine.base.Engine Thread-43 : (127,)
2020-06-08 01:46:45,853 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:45,853 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:45,853 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:45,853 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:46:45,853 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 01:46:45,854 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:46:45,855 INFO sqlalchemy.engine.base.Engine Thread-43 : (105,)
2020-06-08 01:46:45,855 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:46:45,855 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 01:46:45,855 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 01:46:45,859 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:46:45,859 INFO sqlalchemy.engine.base.Engine Thread-43 : ('philip', 1, 1)
2020-06-08 01:46:45,860 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:45,860 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:45,864 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-06-08 01:46:45,985 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-08 01:46:45,986 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:46:45,986 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-08 01:46:45,986 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:46:45,987 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:46:45,998 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-08 01:47:23,788 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-08 01:47:23,789 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:47:23,789 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-08 01:47:23,790 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:47:23,790 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:47:23,792 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:47:23,792 INFO sqlalchemy.engine.base.Engine Thread-45 : ('philip', 1, 1)
2020-06-08 01:47:23,793 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:47:23,793 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:47:23,795 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 01:47:23,795 INFO sqlalchemy.engine.base.Engine Thread-45 : ('0', 1)
2020-06-08 01:47:23,795 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 01:47:23,798 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:47:23,798 INFO sqlalchemy.engine.base.Engine Thread-45 : (82,)
2020-06-08 01:47:23,799 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:47:23,799 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 01:47:23,799 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 01:47:23,799 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 01:47:23,801 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 01:47:23,801 INFO sqlalchemy.engine.base.Engine Thread-45 : (1,)
2020-06-08 01:47:23,801 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:47:23,801 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 01:47:23,801 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 01:47:23,803 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 01:47:23,803 INFO sqlalchemy.engine.base.Engine Thread-45 : ()
2020-06-08 01:47:23,803 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 01:47:23,803 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 01:47:23,803 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 01:47:23,805 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:47:23,805 INFO sqlalchemy.engine.base.Engine Thread-45 : (127,)
2020-06-08 01:47:23,805 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:47:23,806 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:47:23,806 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:47:23,806 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:47:23,806 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 01:47:23,808 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:47:23,808 INFO sqlalchemy.engine.base.Engine Thread-45 : (105,)
2020-06-08 01:47:23,808 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:47:23,808 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 01:47:23,809 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 01:47:23,842 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:47:23,842 INFO sqlalchemy.engine.base.Engine Thread-45 : ('philip', 1, 1)
2020-06-08 01:47:23,843 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:47:23,843 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:47:23,846 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-08 01:47:58,447 INFO sqlalchemy.engine.base.Engine Thread-55 : BEGIN (implicit)
2020-06-08 01:47:58,448 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:47:58,448 INFO sqlalchemy.engine.base.Engine Thread-55 : (1, 1)
2020-06-08 01:47:58,449 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:47:58,449 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:47:58,451 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:47:58,451 INFO sqlalchemy.engine.base.Engine Thread-55 : ('philip', 1, 1)
2020-06-08 01:47:58,452 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:47:58,452 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:47:58,453 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 01:47:58,454 INFO sqlalchemy.engine.base.Engine Thread-55 : ('0', 1)
2020-06-08 01:47:58,454 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 01:47:58,457 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:47:58,457 INFO sqlalchemy.engine.base.Engine Thread-55 : (82,)
2020-06-08 01:47:58,457 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:47:58,458 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 01:47:58,458 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 01:47:58,458 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 01:47:58,459 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 01:47:58,459 INFO sqlalchemy.engine.base.Engine Thread-55 : (1,)
2020-06-08 01:47:58,460 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:47:58,461 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 01:47:58,461 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 01:47:58,462 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 01:47:58,462 INFO sqlalchemy.engine.base.Engine Thread-55 : ()
2020-06-08 01:47:58,463 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 01:47:58,463 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 01:47:58,463 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 01:47:58,464 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:47:58,465 INFO sqlalchemy.engine.base.Engine Thread-55 : (127,)
2020-06-08 01:47:58,465 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:47:58,465 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:47:58,466 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:47:58,466 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 01:47:58,466 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 01:47:58,467 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:47:58,467 INFO sqlalchemy.engine.base.Engine Thread-55 : (105,)
2020-06-08 01:47:58,468 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:47:58,468 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 01:47:58,468 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 01:47:58,471 INFO sqlalchemy.engine.base.Engine Thread-55 : INSERT INTO datesofinterest (id, doi_name, doi_priority, doi_comment, doi_start_dt, doi_end_dt, doi_regions, doi_type, doi_filter, doi_hap) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
2020-06-08 01:47:58,471 INFO sqlalchemy.engine.base.Engine Thread-55 : ('0', 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1,2', 107)
2020-06-08 01:47:58,472 INFO sqlalchemy.engine.base.Engine Thread-55 : COMMIT
2020-06-08 01:47:58,534 INFO sqlalchemy.engine.base.Engine Thread-56 : BEGIN (implicit)
2020-06-08 01:47:58,535 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:47:58,535 INFO sqlalchemy.engine.base.Engine Thread-56 : (1, 1)
2020-06-08 01:47:58,535 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:47:58,536 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:47:58,538 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:47:58,538 INFO sqlalchemy.engine.base.Engine Thread-56 : ('philip', 1, 1)
2020-06-08 01:47:58,539 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:47:58,539 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:47:58,548 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 01:47:58,548 INFO sqlalchemy.engine.base.Engine Thread-56 : ()
2020-06-08 01:47:58,549 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 01:47:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 01:47:58,551 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 01:47:58,551 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 01:47:58,551 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 01:47:58,551 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 01:47:58,551 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 01:47:58,555 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:47:58,555 INFO sqlalchemy.engine.base.Engine Thread-56 : ('philip', 1, 1)
2020-06-08 01:47:58,556 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:47:58,556 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:47:58,560 INFO sqlalchemy.engine.base.Engine Thread-56 : ROLLBACK
2020-06-08 01:48:00,727 INFO sqlalchemy.engine.base.Engine Thread-66 : BEGIN (implicit)
2020-06-08 01:48:00,734 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:48:00,734 INFO sqlalchemy.engine.base.Engine Thread-66 : ()
2020-06-08 01:48:00,735 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:48:00,736 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:48:00,736 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:48:00,737 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:48:00,737 INFO sqlalchemy.engine.base.Engine Thread-66 : (100,)
2020-06-08 01:48:00,738 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:48:00,738 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:48:00,738 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:48:00,738 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:48:00,738 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:48:00,738 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:48:00,740 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:48:00,740 INFO sqlalchemy.engine.base.Engine Thread-66 : (1, 1)
2020-06-08 01:48:00,741 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:00,741 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:00,751 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:48:00,751 INFO sqlalchemy.engine.base.Engine Thread-66 : ('philip', 1, 1)
2020-06-08 01:48:00,752 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:00,752 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:00,754 INFO sqlalchemy.engine.base.Engine Thread-66 : ROLLBACK
2020-06-08 01:48:01,038 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-06-08 01:48:01,040 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 01:48:01,040 INFO sqlalchemy.engine.base.Engine Thread-76 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 01:48:01,041 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 01:48:01,042 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 01:48:01,042 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 01:48:01,042 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 01:48:01,042 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 01:48:01,042 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 01:48:01,042 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 01:48:01,046 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 01:48:01,046 INFO sqlalchemy.engine.base.Engine Thread-76 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 01:48:01,047 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 01:48:01,047 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 01:48:01,051 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 01:48:01,051 INFO sqlalchemy.engine.base.Engine Thread-76 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 01:48:01,052 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 01:48:01,053 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-06-08 01:48:01,081 INFO sqlalchemy.engine.base.Engine Thread-77 : BEGIN (implicit)
2020-06-08 01:48:01,082 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 01:48:01,082 INFO sqlalchemy.engine.base.Engine Thread-77 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 01:48:01,083 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 01:48:01,083 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 01:48:01,083 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 01:48:01,083 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 01:48:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 01:48:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 01:48:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 01:48:01,088 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 01:48:01,088 INFO sqlalchemy.engine.base.Engine Thread-77 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 01:48:01,089 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 01:48:01,089 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 01:48:01,093 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 01:48:01,093 INFO sqlalchemy.engine.base.Engine Thread-77 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 01:48:01,094 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 01:48:01,095 INFO sqlalchemy.engine.base.Engine Thread-77 : ROLLBACK
2020-06-08 01:48:04,716 INFO sqlalchemy.engine.base.Engine Thread-78 : BEGIN (implicit)
2020-06-08 01:48:04,717 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:48:04,717 INFO sqlalchemy.engine.base.Engine Thread-78 : (1, 1)
2020-06-08 01:48:04,717 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:04,718 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:04,724 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:48:04,724 INFO sqlalchemy.engine.base.Engine Thread-78 : (datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59))
2020-06-08 01:48:04,725 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:48:04,747 INFO sqlalchemy.engine.base.Engine Thread-78 : ROLLBACK
2020-06-08 01:48:07,149 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-06-08 01:48:07,150 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:48:07,150 INFO sqlalchemy.engine.base.Engine Thread-79 : (1, 1)
2020-06-08 01:48:07,151 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:07,152 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:07,157 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:48:07,157 INFO sqlalchemy.engine.base.Engine Thread-79 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:48:07,157 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:48:07,158 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:48:07,158 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:48:07,158 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:48:07,158 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:48:07,160 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-06-08 01:48:12,779 INFO sqlalchemy.engine.base.Engine Thread-80 : BEGIN (implicit)
2020-06-08 01:48:12,780 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:48:12,780 INFO sqlalchemy.engine.base.Engine Thread-80 : (1, 1)
2020-06-08 01:48:12,780 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:12,781 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:12,784 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:48:12,784 INFO sqlalchemy.engine.base.Engine Thread-80 : (23,)
2020-06-08 01:48:12,785 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:48:12,785 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:48:12,790 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:48:12,790 INFO sqlalchemy.engine.base.Engine Thread-80 : (23,)
2020-06-08 01:48:12,790 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:48:13,832 INFO sqlalchemy.engine.base.Engine Thread-81 : ROLLBACK
2020-06-08 01:48:13,834 INFO sqlalchemy.engine.base.Engine Thread-81 : BEGIN (implicit)
2020-06-08 01:48:13,835 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:48:13,835 INFO sqlalchemy.engine.base.Engine Thread-81 : (1, 1)
2020-06-08 01:48:13,836 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:13,836 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:13,840 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:48:13,841 INFO sqlalchemy.engine.base.Engine Thread-81 : (20,)
2020-06-08 01:48:13,841 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:48:13,841 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:48:13,845 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:48:13,845 INFO sqlalchemy.engine.base.Engine Thread-81 : (20,)
2020-06-08 01:48:13,845 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:48:14,623 INFO sqlalchemy.engine.base.Engine Thread-82 : ROLLBACK
2020-06-08 01:48:14,625 INFO sqlalchemy.engine.base.Engine Thread-82 : BEGIN (implicit)
2020-06-08 01:48:14,626 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:48:14,627 INFO sqlalchemy.engine.base.Engine Thread-82 : (1, 1)
2020-06-08 01:48:14,627 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:14,627 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:14,631 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:48:14,631 INFO sqlalchemy.engine.base.Engine Thread-82 : ()
2020-06-08 01:48:14,632 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:48:14,633 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:48:14,633 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:48:14,634 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:48:14,634 INFO sqlalchemy.engine.base.Engine Thread-82 : (100,)
2020-06-08 01:48:14,635 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:48:14,635 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:48:14,635 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:48:14,635 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:48:14,635 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:48:14,635 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:48:14,644 INFO sqlalchemy.engine.base.Engine Thread-82 : ROLLBACK
2020-06-08 01:48:54,454 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 01:48:54,455 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:48:54,456 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 01:48:54,456 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 01:48:54,457 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 01:48:54,457 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:48:54,458 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 01:48:54,458 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 01:48:54,458 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 01:48:54,458 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:48:54,459 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 01:48:54,459 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 01:48:54,459 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 01:48:54,459 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:48:54,460 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 01:48:54,460 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 01:48:54,461 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 01:48:54,461 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:48:54,462 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 01:48:54,462 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:48:54,463 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 01:48:54,463 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:48:54,463 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 01:48:54,466 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:48:54,467 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 01:48:54,468 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:54,468 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:54,478 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:48:54,478 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:48:54,479 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:48:54,479 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:48:54,479 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:48:54,479 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:48:54,479 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:48:54,509 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 01:48:55,805 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 01:48:55,806 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:48:55,806 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 01:48:55,807 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:48:55,807 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:48:55,811 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:48:55,811 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 01:48:55,811 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:48:55,811 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:48:55,815 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:48:55,815 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 01:48:55,816 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:48:55,826 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:48:55,826 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 01:48:55,827 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:48:55,828 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:48:55,828 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:48:55,830 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:48:55,830 INFO sqlalchemy.engine.base.Engine Thread-3 : (100,)
2020-06-08 01:48:55,830 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:48:55,831 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:48:55,831 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:48:55,831 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:48:55,831 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:48:55,831 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:49:14,412 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 01:49:14,412 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:49:14,413 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 01:49:14,414 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 01:49:14,414 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 01:49:14,414 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:49:14,415 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 01:49:14,415 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 01:49:14,415 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 01:49:14,415 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:49:14,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 01:49:14,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 01:49:14,416 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 01:49:14,416 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:49:14,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 01:49:14,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 01:49:14,418 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 01:49:14,418 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:49:14,418 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 01:49:14,418 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:49:14,419 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 01:49:14,419 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:49:14,419 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 01:49:14,422 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:49:14,422 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 01:49:14,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:49:14,423 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:49:14,431 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:49:14,431 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:49:14,431 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:49:14,432 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:49:14,432 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:49:14,432 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:49:14,432 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:49:14,459 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 01:49:15,547 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 01:49:15,548 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:49:15,548 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 01:49:15,549 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:49:15,549 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:49:15,553 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:49:15,553 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 01:49:15,554 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:49:15,554 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:49:15,558 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:49:15,558 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 01:49:15,558 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:49:15,568 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:49:15,568 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 01:49:15,570 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:49:15,570 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:49:15,570 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:49:15,572 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:49:15,573 INFO sqlalchemy.engine.base.Engine Thread-3 : (100,)
2020-06-08 01:49:15,573 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:49:15,573 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:49:15,574 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:49:15,574 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:49:15,574 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:49:15,574 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:49:15,586 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 01:49:17,846 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 01:49:17,847 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:49:17,848 INFO sqlalchemy.engine.base.Engine Thread-4 : ('philip', 1, 1)
2020-06-08 01:49:17,848 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:49:17,849 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:49:17,858 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-06-08 01:49:17,858 INFO sqlalchemy.engine.base.Engine Thread-4 : (108,)
2020-06-08 01:49:17,858 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-06-08 01:49:17,859 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 'YYYYYYY', '02:00', '04:00', 'CheckPoint CMA', 'CheckPoint', 108, 'IND', 'Active')
2020-06-08 01:49:17,860 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 01:49:20,265 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 01:49:20,266 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:49:20,266 INFO sqlalchemy.engine.base.Engine Thread-5 : ('philip', 1, 1)
2020-06-08 01:49:20,267 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:49:20,267 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:49:20,275 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-06-08 01:49:20,275 INFO sqlalchemy.engine.base.Engine Thread-5 : (104,)
2020-06-08 01:49:20,276 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-06-08 01:49:20,277 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 01:49:21,971 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 01:49:21,972 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 01:49:21,972 INFO sqlalchemy.engine.base.Engine Thread-6 : ('philip', 1, 1)
2020-06-08 01:49:21,973 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:49:21,973 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:49:21,982 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-06-08 01:49:21,982 INFO sqlalchemy.engine.base.Engine Thread-6 : (101,)
2020-06-08 01:49:21,982 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-06-08 01:49:21,982 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Made Up Fortigate', 'YYYYYYY', '02:00', '04:00', 'Fortigate FortiManager', 'Fortigate', 101, 'GBR', 'Active')
2020-06-08 01:49:21,983 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 01:49:26,349 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-08 01:49:26,350 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:49:26,350 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-08 01:49:26,350 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:49:26,351 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:49:26,355 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:49:26,355 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:49:26,356 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:49:26,356 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:49:26,356 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:49:26,356 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:49:26,356 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:49:26,358 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-08 01:50:06,527 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-08 01:50:06,528 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:50:06,528 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-08 01:50:06,530 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:50:06,530 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:50:06,535 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:50:06,535 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:50:06,536 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:50:06,536 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:50:06,536 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:50:06,536 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:50:06,536 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:50:06,560 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-08 01:50:51,932 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-08 01:50:51,933 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:50:51,933 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-08 01:50:51,934 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:50:51,935 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:50:51,939 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:50:51,939 INFO sqlalchemy.engine.base.Engine Thread-9 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:50:51,940 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:50:51,940 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:50:51,940 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:50:51,940 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:50:51,940 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:50:51,961 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-08 01:51:35,866 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-08 01:51:35,867 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:51:35,867 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-08 01:51:35,868 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:51:35,868 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:51:35,872 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:51:35,873 INFO sqlalchemy.engine.base.Engine Thread-10 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:51:35,873 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:51:35,873 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:51:35,873 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:51:35,873 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:51:35,874 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:51:35,894 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-08 01:51:37,928 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-08 01:51:37,929 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:51:37,929 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-08 01:51:37,930 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:51:37,930 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:51:37,933 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:51:37,933 INFO sqlalchemy.engine.base.Engine Thread-11 : (20,)
2020-06-08 01:51:37,934 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:51:37,934 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:51:37,938 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:51:37,938 INFO sqlalchemy.engine.base.Engine Thread-11 : (20,)
2020-06-08 01:51:37,938 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:51:37,942 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:51:37,942 INFO sqlalchemy.engine.base.Engine Thread-11 : ()
2020-06-08 01:51:37,943 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:51:37,943 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:51:37,943 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:51:37,945 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:51:37,945 INFO sqlalchemy.engine.base.Engine Thread-11 : (100,)
2020-06-08 01:51:37,945 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:51:37,946 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:51:37,946 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:51:37,946 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:51:37,946 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:51:37,946 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:51:37,948 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-08 01:51:40,104 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 01:51:40,105 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:51:40,105 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 01:51:40,105 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:51:40,106 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:51:40,110 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:51:40,110 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:51:40,111 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:51:40,111 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:51:40,111 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:51:40,111 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:51:40,111 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:51:40,113 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 01:51:41,093 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 01:51:41,094 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:51:41,094 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 01:51:41,095 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:51:41,095 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:51:41,101 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:51:41,101 INFO sqlalchemy.engine.base.Engine Thread-13 : (23,)
2020-06-08 01:51:41,101 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:51:41,101 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:51:41,105 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:51:41,105 INFO sqlalchemy.engine.base.Engine Thread-13 : (23,)
2020-06-08 01:51:41,106 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:51:41,109 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:51:41,109 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-06-08 01:51:41,110 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:51:41,110 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:51:41,110 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:51:41,111 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:51:41,111 INFO sqlalchemy.engine.base.Engine Thread-13 : (100,)
2020-06-08 01:51:41,112 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:51:41,112 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:51:41,112 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:51:41,112 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:51:41,112 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:51:41,112 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:51:41,115 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 01:51:44,025 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 01:51:44,026 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:51:44,026 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 01:51:44,027 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:51:44,028 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:51:44,032 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:51:44,032 INFO sqlalchemy.engine.base.Engine Thread-14 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:51:44,033 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:51:44,033 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:51:44,033 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:51:44,033 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:51:44,033 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:51:44,035 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 01:51:58,742 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 01:51:58,743 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:51:58,743 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 01:51:58,744 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:51:58,744 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:51:58,748 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:51:58,748 INFO sqlalchemy.engine.base.Engine Thread-15 : (23,)
2020-06-08 01:51:58,749 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:51:58,749 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:51:58,753 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:51:58,753 INFO sqlalchemy.engine.base.Engine Thread-15 : (23,)
2020-06-08 01:51:58,753 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:51:58,757 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:51:58,757 INFO sqlalchemy.engine.base.Engine Thread-15 : ()
2020-06-08 01:51:58,758 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:51:58,758 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:51:58,758 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:51:58,760 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:51:58,760 INFO sqlalchemy.engine.base.Engine Thread-15 : (100,)
2020-06-08 01:51:58,760 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:51:58,760 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:51:58,761 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:51:58,761 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:51:58,761 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:51:58,761 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:51:58,763 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 01:52:05,765 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 01:52:05,766 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:52:05,766 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 01:52:05,767 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:52:05,767 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:52:05,772 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:52:05,773 INFO sqlalchemy.engine.base.Engine Thread-16 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:52:05,773 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:52:05,774 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:52:05,774 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:52:05,774 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:52:05,774 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:52:05,776 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 01:52:07,887 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 01:52:07,888 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:52:07,888 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 01:52:07,889 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:52:07,889 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:52:07,893 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:52:07,893 INFO sqlalchemy.engine.base.Engine Thread-17 : (23,)
2020-06-08 01:52:07,894 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:52:07,894 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:52:07,898 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:52:07,899 INFO sqlalchemy.engine.base.Engine Thread-17 : (23,)
2020-06-08 01:52:07,899 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:52:07,903 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:52:07,903 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 01:52:07,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:52:07,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:52:07,904 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:52:07,905 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:52:07,906 INFO sqlalchemy.engine.base.Engine Thread-17 : (100,)
2020-06-08 01:52:07,906 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:52:07,906 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:52:07,906 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:52:07,907 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:52:07,907 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:52:07,907 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:52:07,909 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 01:55:27,786 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 01:55:27,786 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:55:27,788 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 01:55:27,788 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 01:55:27,789 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 01:55:27,789 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:55:27,789 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 01:55:27,789 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 01:55:27,789 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 01:55:27,790 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:55:27,790 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 01:55:27,790 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 01:55:27,790 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 01:55:27,790 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:55:27,791 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 01:55:27,791 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 01:55:27,792 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 01:55:27,792 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:55:27,792 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 01:55:27,793 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:55:27,793 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 01:55:27,793 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 01:55:27,794 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 01:55:27,796 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:55:27,796 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 01:55:27,797 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:55:27,797 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:55:27,806 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:55:27,806 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:55:27,807 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:55:27,807 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:55:27,807 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:55:27,807 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:55:27,807 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:55:27,834 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 01:55:30,633 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 01:55:30,634 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:55:30,635 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 01:55:30,635 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:55:30,636 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:55:30,639 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:55:30,639 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 01:55:30,640 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:55:30,640 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:55:30,644 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:55:30,644 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 01:55:30,644 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:55:30,654 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:55:30,654 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 01:55:30,656 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:55:30,656 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:55:30,656 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:55:30,658 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:55:30,658 INFO sqlalchemy.engine.base.Engine Thread-3 : (100,)
2020-06-08 01:55:30,659 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:55:30,659 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:55:30,659 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:55:30,659 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:55:30,659 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:55:30,660 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:55:30,671 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 01:55:33,977 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 01:55:33,978 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:55:33,978 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 01:55:33,979 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:55:33,979 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:55:33,983 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:55:33,983 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:55:33,984 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:55:33,984 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:55:33,984 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:55:33,984 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:55:33,984 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:55:33,986 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 01:55:36,353 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 01:55:36,354 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:55:36,354 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 01:55:36,355 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:55:36,355 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:55:36,359 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 01:55:36,359 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 01:55:36,359 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:55:36,359 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:55:36,362 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 01:55:36,362 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 01:55:36,363 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 01:55:36,366 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 01:55:36,367 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 01:55:36,367 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 01:55:36,368 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 01:55:36,368 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 01:55:36,369 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 01:55:36,369 INFO sqlalchemy.engine.base.Engine Thread-5 : (100,)
2020-06-08 01:55:36,370 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 01:55:36,370 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 01:55:36,370 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 01:55:36,370 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 01:55:36,370 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 01:55:36,370 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 01:55:36,372 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 01:55:41,387 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 01:55:41,388 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 01:55:41,388 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-08 01:55:41,389 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 01:55:41,389 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 01:55:41,394 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 01:55:41,394 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 01:55:41,395 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 01:55:41,395 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 01:55:41,395 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 01:55:41,395 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 01:55:41,395 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 01:55:41,398 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 08:41:21,430 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 08:41:21,432 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:41:21,432 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 08:41:21,433 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:41:21,434 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:41:21,439 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:41:21,440 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:41:21,441 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:41:21,441 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:41:21,441 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:41:21,441 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:41:21,441 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:41:21,445 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 08:41:25,076 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 08:41:25,077 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:41:25,077 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 08:41:25,078 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:41:25,078 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:41:25,082 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 08:41:25,082 INFO sqlalchemy.engine.base.Engine Thread-13 : (23,)
2020-06-08 08:41:25,083 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:41:25,083 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:41:25,087 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 08:41:25,087 INFO sqlalchemy.engine.base.Engine Thread-13 : (23,)
2020-06-08 08:41:25,088 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 08:41:25,092 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 08:41:25,092 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-06-08 08:41:25,093 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 08:41:25,094 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 08:41:25,094 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 08:41:25,095 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 08:41:25,095 INFO sqlalchemy.engine.base.Engine Thread-13 : (100,)
2020-06-08 08:41:25,096 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 08:41:25,096 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 08:41:25,096 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 08:41:25,096 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 08:41:25,096 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 08:41:25,097 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 08:41:25,099 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 08:43:19,531 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 08:43:19,532 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:43:19,532 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 08:43:19,533 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:43:19,534 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:43:19,539 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:43:19,539 INFO sqlalchemy.engine.base.Engine Thread-14 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:43:19,540 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:43:19,540 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:43:19,540 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:43:19,540 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:43:19,540 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:43:19,543 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 08:43:21,014 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 08:43:21,016 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:43:21,016 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 08:43:21,016 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:43:21,017 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:43:21,020 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 08:43:21,020 INFO sqlalchemy.engine.base.Engine Thread-15 : (23,)
2020-06-08 08:43:21,020 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:43:21,021 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:43:21,024 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 08:43:21,025 INFO sqlalchemy.engine.base.Engine Thread-15 : (23,)
2020-06-08 08:43:21,025 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 08:43:21,029 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 08:43:21,029 INFO sqlalchemy.engine.base.Engine Thread-15 : ()
2020-06-08 08:43:21,030 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 08:43:21,030 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 08:43:21,030 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 08:43:21,031 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 08:43:21,032 INFO sqlalchemy.engine.base.Engine Thread-15 : (100,)
2020-06-08 08:43:21,032 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 08:43:21,032 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 08:43:21,032 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 08:43:21,032 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 08:43:21,033 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 08:43:21,033 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 08:43:21,047 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 08:43:43,972 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 08:43:43,973 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:43:43,973 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 08:43:43,974 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:43:43,974 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:43:43,979 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:43:43,979 INFO sqlalchemy.engine.base.Engine Thread-16 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:43:43,980 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:43:43,980 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:43:43,980 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:43:43,980 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:43:43,980 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:43:43,982 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 08:43:45,448 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 08:43:45,449 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:43:45,449 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 08:43:45,450 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:43:45,450 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:43:45,453 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 08:43:45,454 INFO sqlalchemy.engine.base.Engine Thread-17 : (20,)
2020-06-08 08:43:45,454 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:43:45,454 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:43:45,458 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 08:43:45,458 INFO sqlalchemy.engine.base.Engine Thread-17 : (20,)
2020-06-08 08:43:45,459 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 08:43:45,462 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 08:43:45,462 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 08:43:45,463 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 08:43:45,464 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 08:43:45,464 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 08:43:45,465 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 08:43:45,465 INFO sqlalchemy.engine.base.Engine Thread-17 : (100,)
2020-06-08 08:43:45,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 08:43:45,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 08:43:45,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 08:43:45,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 08:43:45,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 08:43:45,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 08:43:45,480 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 08:45:45,510 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-08 08:45:45,512 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:45:45,512 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-08 08:45:45,513 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:45:45,514 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:45:45,519 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:45:45,519 INFO sqlalchemy.engine.base.Engine Thread-18 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:45:45,520 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:45:45,521 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:45:45,521 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:45:45,521 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:45:45,521 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:45:45,524 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-08 08:45:56,712 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-08 08:45:56,713 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:45:56,713 INFO sqlalchemy.engine.base.Engine Thread-19 : (1, 1)
2020-06-08 08:45:56,714 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:45:56,714 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:45:56,719 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:45:56,719 INFO sqlalchemy.engine.base.Engine Thread-19 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:45:56,720 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:45:56,720 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:45:56,720 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:45:56,720 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:45:56,720 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:45:56,723 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-06-08 08:45:59,696 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-08 08:45:59,697 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:45:59,697 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-08 08:45:59,698 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:45:59,698 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:45:59,704 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 08:45:59,704 INFO sqlalchemy.engine.base.Engine Thread-20 : ()
2020-06-08 08:45:59,705 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 08:45:59,706 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 08:45:59,706 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 08:45:59,707 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 08:45:59,707 INFO sqlalchemy.engine.base.Engine Thread-20 : (100,)
2020-06-08 08:45:59,708 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 08:45:59,708 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 08:45:59,708 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 08:45:59,708 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 08:45:59,708 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 08:45:59,708 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 08:45:59,718 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-08 08:46:11,099 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-08 08:46:11,101 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 08:46:11,101 INFO sqlalchemy.engine.base.Engine Thread-21 : ()
2020-06-08 08:46:11,102 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 08:46:11,103 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 08:46:11,103 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 08:46:11,104 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 08:46:11,104 INFO sqlalchemy.engine.base.Engine Thread-21 : (100,)
2020-06-08 08:46:11,105 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 08:46:11,105 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 08:46:11,105 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 08:46:11,105 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 08:46:11,106 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 08:46:11,106 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 08:46:11,107 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:46:11,108 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-08 08:46:11,108 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:46:11,108 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:46:11,172 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 08:46:11,172 INFO sqlalchemy.engine.base.Engine Thread-21 : ('philip', 1, 1)
2020-06-08 08:46:11,173 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:46:11,173 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:46:11,175 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-08 08:46:11,499 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-08 08:46:11,500 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 08:46:11,501 INFO sqlalchemy.engine.base.Engine Thread-45 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:11,502 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 08:46:11,502 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 08:46:11,502 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 08:46:11,502 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:11,502 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 08:46:11,502 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:11,503 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:11,507 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 08:46:11,507 INFO sqlalchemy.engine.base.Engine Thread-45 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:11,508 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 08:46:11,508 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 08:46:11,512 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 08:46:11,512 INFO sqlalchemy.engine.base.Engine Thread-45 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:11,513 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 08:46:11,514 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-08 08:46:11,542 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-06-08 08:46:11,543 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 08:46:11,544 INFO sqlalchemy.engine.base.Engine Thread-46 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:11,545 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 08:46:11,545 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 08:46:11,545 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 08:46:11,545 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:11,545 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 08:46:11,546 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:11,546 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:11,551 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 08:46:11,552 INFO sqlalchemy.engine.base.Engine Thread-46 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:11,553 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 08:46:11,553 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 08:46:11,558 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 08:46:11,558 INFO sqlalchemy.engine.base.Engine Thread-46 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:11,559 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 08:46:11,560 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-06-08 08:46:30,371 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-06-08 08:46:30,373 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 08:46:30,374 INFO sqlalchemy.engine.base.Engine Thread-48 : ()
2020-06-08 08:46:30,374 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 08:46:30,375 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 08:46:30,375 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 08:46:30,376 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 08:46:30,376 INFO sqlalchemy.engine.base.Engine Thread-48 : (100,)
2020-06-08 08:46:30,377 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 08:46:30,377 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 08:46:30,377 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 08:46:30,377 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 08:46:30,377 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 08:46:30,378 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 08:46:30,380 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:46:30,380 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-06-08 08:46:30,380 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:46:30,381 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:46:30,385 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 08:46:30,385 INFO sqlalchemy.engine.base.Engine Thread-48 : ('philip', 1, 1)
2020-06-08 08:46:30,385 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:46:30,386 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:46:30,388 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-06-08 08:46:30,790 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-08 08:46:30,791 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 08:46:30,791 INFO sqlalchemy.engine.base.Engine Thread-58 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:30,792 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 08:46:30,793 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 08:46:30,793 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 08:46:30,793 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:30,793 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 08:46:30,793 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:30,793 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:30,800 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 08:46:30,800 INFO sqlalchemy.engine.base.Engine Thread-58 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:30,801 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 08:46:30,801 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 08:46:30,805 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 08:46:30,805 INFO sqlalchemy.engine.base.Engine Thread-58 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:30,806 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 08:46:30,807 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-08 08:46:30,843 INFO sqlalchemy.engine.base.Engine Thread-60 : BEGIN (implicit)
2020-06-08 08:46:30,844 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 08:46:30,844 INFO sqlalchemy.engine.base.Engine Thread-60 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:30,845 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 08:46:30,846 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 08:46:30,846 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 08:46:30,846 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:30,846 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 08:46:30,846 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:30,846 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 08:46:30,852 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 08:46:30,852 INFO sqlalchemy.engine.base.Engine Thread-60 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:30,853 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 08:46:30,853 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 08:46:30,857 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 08:46:30,857 INFO sqlalchemy.engine.base.Engine Thread-60 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 08:46:30,858 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 08:46:30,859 INFO sqlalchemy.engine.base.Engine Thread-60 : ROLLBACK
2020-06-08 08:46:34,583 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-06-08 08:46:34,585 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:46:34,585 INFO sqlalchemy.engine.base.Engine Thread-61 : (1, 1)
2020-06-08 08:46:34,585 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:46:34,586 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:46:34,590 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:46:34,591 INFO sqlalchemy.engine.base.Engine Thread-61 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:46:34,591 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:46:34,592 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:46:34,592 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:46:34,592 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:46:34,592 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:46:34,594 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-06-08 08:46:38,177 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-06-08 08:46:38,178 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:46:38,178 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-06-08 08:46:38,179 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:46:38,179 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:46:38,184 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:46:38,184 INFO sqlalchemy.engine.base.Engine Thread-62 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-08 08:46:38,185 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:46:38,185 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:46:38,187 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-06-08 08:46:42,843 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-06-08 08:46:42,844 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:46:42,844 INFO sqlalchemy.engine.base.Engine Thread-63 : (1, 1)
2020-06-08 08:46:42,845 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:46:42,845 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:46:42,849 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:46:42,850 INFO sqlalchemy.engine.base.Engine Thread-63 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:46:42,850 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:46:42,851 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:46:42,851 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:46:42,851 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:46:42,851 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:46:42,853 INFO sqlalchemy.engine.base.Engine Thread-63 : ROLLBACK
2020-06-08 08:46:47,056 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-06-08 08:46:47,058 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:46:47,058 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-06-08 08:46:47,058 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:46:47,059 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:46:47,063 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:46:47,063 INFO sqlalchemy.engine.base.Engine Thread-64 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:46:47,063 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:46:47,063 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:46:47,064 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:46:47,064 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:46:47,064 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:46:47,066 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-06-08 08:47:01,339 INFO sqlalchemy.engine.base.Engine Thread-65 : BEGIN (implicit)
2020-06-08 08:47:01,341 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 08:47:01,341 INFO sqlalchemy.engine.base.Engine Thread-65 : (1, 1)
2020-06-08 08:47:01,342 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 08:47:01,342 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 08:47:01,347 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 08:47:01,347 INFO sqlalchemy.engine.base.Engine Thread-65 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 08:47:01,348 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 08:47:01,348 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 08:47:01,348 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 08:47:01,348 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 08:47:01,348 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 08:47:01,351 INFO sqlalchemy.engine.base.Engine Thread-65 : ROLLBACK
2020-06-08 11:50:45,752 INFO sqlalchemy.engine.base.Engine Thread-69 : BEGIN (implicit)
2020-06-08 11:50:45,754 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 11:50:45,754 INFO sqlalchemy.engine.base.Engine Thread-69 : (1, 1)
2020-06-08 11:50:45,755 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 11:50:45,756 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 11:50:45,761 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 11:50:45,761 INFO sqlalchemy.engine.base.Engine Thread-69 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 11:50:45,762 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 11:50:45,762 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 11:50:45,763 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 11:50:45,763 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 11:50:45,763 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 11:50:45,766 INFO sqlalchemy.engine.base.Engine Thread-69 : ROLLBACK
2020-06-08 11:50:47,310 INFO sqlalchemy.engine.base.Engine Thread-70 : BEGIN (implicit)
2020-06-08 11:50:47,311 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 11:50:47,311 INFO sqlalchemy.engine.base.Engine Thread-70 : (1, 1)
2020-06-08 11:50:47,312 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 11:50:47,312 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 11:50:47,316 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 11:50:47,316 INFO sqlalchemy.engine.base.Engine Thread-70 : (20,)
2020-06-08 11:50:47,316 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 11:50:47,316 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 11:50:47,320 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 11:50:47,320 INFO sqlalchemy.engine.base.Engine Thread-70 : (20,)
2020-06-08 11:50:47,321 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 11:50:47,325 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 11:50:47,325 INFO sqlalchemy.engine.base.Engine Thread-70 : ()
2020-06-08 11:50:47,326 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 11:50:47,327 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 11:50:47,327 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 11:50:47,328 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 11:50:47,328 INFO sqlalchemy.engine.base.Engine Thread-70 : (100,)
2020-06-08 11:50:47,329 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 11:50:47,329 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 11:50:47,329 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 11:50:47,329 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 11:50:47,330 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 11:50:47,330 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 11:50:47,332 INFO sqlalchemy.engine.base.Engine Thread-70 : ROLLBACK
2020-06-08 14:45:35,928 INFO sqlalchemy.engine.base.Engine Thread-72 : BEGIN (implicit)
2020-06-08 14:45:35,930 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 14:45:35,930 INFO sqlalchemy.engine.base.Engine Thread-72 : (1, 1)
2020-06-08 14:45:35,931 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:45:35,932 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:45:35,937 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 14:45:35,937 INFO sqlalchemy.engine.base.Engine Thread-72 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-08 14:45:35,938 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 14:45:35,938 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 14:45:35,941 INFO sqlalchemy.engine.base.Engine Thread-72 : ROLLBACK
2020-06-08 14:45:37,489 INFO sqlalchemy.engine.base.Engine Thread-73 : BEGIN (implicit)
2020-06-08 14:45:37,490 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 14:45:37,490 INFO sqlalchemy.engine.base.Engine Thread-73 : (1, 1)
2020-06-08 14:45:37,492 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:45:37,492 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:45:37,496 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 14:45:37,496 INFO sqlalchemy.engine.base.Engine Thread-73 : ()
2020-06-08 14:45:37,497 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 14:45:37,498 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 14:45:37,498 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 14:45:37,499 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 14:45:37,500 INFO sqlalchemy.engine.base.Engine Thread-73 : (100,)
2020-06-08 14:45:37,500 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 14:45:37,500 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 14:45:37,500 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 14:45:37,501 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 14:45:37,501 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 14:45:37,501 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 14:45:37,503 INFO sqlalchemy.engine.base.Engine Thread-73 : ROLLBACK
2020-06-08 14:48:11,252 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-06-08 14:48:11,254 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 14:48:11,254 INFO sqlalchemy.engine.base.Engine Thread-74 : (1, 1)
2020-06-08 14:48:11,255 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:48:11,256 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:48:11,260 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 14:48:11,261 INFO sqlalchemy.engine.base.Engine Thread-74 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 14:48:11,261 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 14:48:11,262 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 14:48:11,262 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 14:48:11,262 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 14:48:11,262 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 14:48:11,265 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-06-08 14:48:12,913 INFO sqlalchemy.engine.base.Engine Thread-75 : BEGIN (implicit)
2020-06-08 14:48:12,914 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 14:48:12,914 INFO sqlalchemy.engine.base.Engine Thread-75 : (1, 1)
2020-06-08 14:48:12,915 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:48:12,915 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:48:12,918 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 14:48:12,918 INFO sqlalchemy.engine.base.Engine Thread-75 : (23,)
2020-06-08 14:48:12,919 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 14:48:12,919 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 14:48:12,923 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 14:48:12,923 INFO sqlalchemy.engine.base.Engine Thread-75 : (23,)
2020-06-08 14:48:12,924 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 14:48:12,927 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 14:48:12,928 INFO sqlalchemy.engine.base.Engine Thread-75 : ()
2020-06-08 14:48:12,929 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 14:48:12,929 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 14:48:12,929 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 14:48:12,930 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 14:48:12,931 INFO sqlalchemy.engine.base.Engine Thread-75 : (100,)
2020-06-08 14:48:12,931 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 14:48:12,931 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 14:48:12,931 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 14:48:12,932 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 14:48:12,932 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 14:48:12,932 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 14:48:12,934 INFO sqlalchemy.engine.base.Engine Thread-75 : ROLLBACK
2020-06-08 14:50:44,626 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-06-08 14:50:44,627 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 14:50:44,627 INFO sqlalchemy.engine.base.Engine Thread-76 : ('philip', 1, 1)
2020-06-08 14:50:44,629 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:50:44,629 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:50:44,641 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-06-08 14:50:44,641 INFO sqlalchemy.engine.base.Engine Thread-76 : (108,)
2020-06-08 14:50:44,642 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-06-08 14:50:44,643 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'Made Up CheckPoint', 'YYYYYYY', '02:00', '04:00', 'CheckPoint CMA', 'CheckPoint', 108, 'IND', 'Active')
2020-06-08 14:50:44,644 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-06-08 14:50:57,179 INFO sqlalchemy.engine.base.Engine Thread-77 : BEGIN (implicit)
2020-06-08 14:50:57,180 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 14:50:57,180 INFO sqlalchemy.engine.base.Engine Thread-77 : (1, 1)
2020-06-08 14:50:57,181 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:50:57,181 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:50:57,186 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 14:50:57,186 INFO sqlalchemy.engine.base.Engine Thread-77 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 14:50:57,187 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 14:50:57,187 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 14:50:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 14:50:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 14:50:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 14:50:57,190 INFO sqlalchemy.engine.base.Engine Thread-77 : ROLLBACK
2020-06-08 14:50:58,077 INFO sqlalchemy.engine.base.Engine Thread-78 : BEGIN (implicit)
2020-06-08 14:50:58,078 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 14:50:58,078 INFO sqlalchemy.engine.base.Engine Thread-78 : (1, 1)
2020-06-08 14:50:58,079 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:50:58,080 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:50:58,084 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 14:50:58,084 INFO sqlalchemy.engine.base.Engine Thread-78 : ()
2020-06-08 14:50:58,085 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 14:50:58,085 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 14:50:58,086 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 14:50:58,087 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 14:50:58,087 INFO sqlalchemy.engine.base.Engine Thread-78 : (100,)
2020-06-08 14:50:58,088 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 14:50:58,088 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 14:50:58,088 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 14:50:58,089 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 14:50:58,089 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 14:50:58,089 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 14:50:58,092 INFO sqlalchemy.engine.base.Engine Thread-78 : ROLLBACK
2020-06-08 14:51:01,453 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-06-08 14:51:01,454 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 14:51:01,454 INFO sqlalchemy.engine.base.Engine Thread-79 : ('philip', 1, 1)
2020-06-08 14:51:01,455 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:51:01,455 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:51:01,464 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-06-08 14:51:01,464 INFO sqlalchemy.engine.base.Engine Thread-79 : (108,)
2020-06-08 14:51:01,465 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-06-08 14:51:01,465 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'Made Up CheckPoint', 'YYYYYYY', '02:00', '04:00', 'CheckPoint CMA', 'CheckPoint', 108, 'IND', 'Active')
2020-06-08 14:51:01,466 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-06-08 14:51:02,894 INFO sqlalchemy.engine.base.Engine Thread-80 : BEGIN (implicit)
2020-06-08 14:51:02,897 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-06-08 14:51:02,897 INFO sqlalchemy.engine.base.Engine Thread-80 : ('0', 1)
2020-06-08 14:51:02,898 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 14:51:02,905 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 14:51:02,905 INFO sqlalchemy.engine.base.Engine Thread-80 : ()
2020-06-08 14:51:02,906 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 14:51:02,907 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 14:51:02,907 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 14:51:02,908 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 14:51:02,909 INFO sqlalchemy.engine.base.Engine Thread-80 : (97,)
2020-06-08 14:51:02,909 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 14:51:02,909 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-06-08 14:51:02,910 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-06-08 14:51:02,913 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-06-08 14:51:02,913 INFO sqlalchemy.engine.base.Engine Thread-80 : (1, 1)
2020-06-08 14:51:02,914 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 14:51:02,914 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 14:51:02,917 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 14:51:02,917 INFO sqlalchemy.engine.base.Engine Thread-80 : (1, 1)
2020-06-08 14:51:02,917 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:51:02,917 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:51:02,980 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 14:51:02,980 INFO sqlalchemy.engine.base.Engine Thread-80 : ('philip', 1, 1)
2020-06-08 14:51:02,980 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:51:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:51:02,986 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 14:51:02,986 INFO sqlalchemy.engine.base.Engine Thread-80 : ('philip', 1, 1)
2020-06-08 14:51:02,986 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 14:51:02,986 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 14:51:02,988 INFO sqlalchemy.engine.base.Engine Thread-80 : ROLLBACK
2020-06-08 15:00:46,368 INFO sqlalchemy.engine.base.Engine Thread-91 : BEGIN (implicit)
2020-06-08 15:00:46,371 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 15:00:46,372 INFO sqlalchemy.engine.base.Engine Thread-91 : ()
2020-06-08 15:00:46,375 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 15:00:46,375 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 15:00:46,375 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 15:00:46,377 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 15:00:46,377 INFO sqlalchemy.engine.base.Engine Thread-91 : (100,)
2020-06-08 15:00:46,378 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 15:00:46,378 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 15:00:46,378 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 15:00:46,378 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 15:00:46,378 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 15:00:46,379 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 15:00:46,381 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 15:00:46,381 INFO sqlalchemy.engine.base.Engine Thread-91 : (1, 1)
2020-06-08 15:00:46,382 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 15:00:46,382 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 15:00:46,388 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 15:00:46,388 INFO sqlalchemy.engine.base.Engine Thread-91 : ('philip', 1, 1)
2020-06-08 15:00:46,388 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 15:00:46,389 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 15:00:46,392 INFO sqlalchemy.engine.base.Engine Thread-91 : ROLLBACK
2020-06-08 15:00:46,697 INFO sqlalchemy.engine.base.Engine Thread-101 : BEGIN (implicit)
2020-06-08 15:00:46,698 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 15:00:46,698 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 15:00:46,701 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 15:00:46,701 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 15:00:46,701 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 15:00:46,701 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 15:00:46,701 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 15:00:46,701 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 15:00:46,701 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 15:00:46,706 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 15:00:46,706 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 15:00:46,707 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 15:00:46,707 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 15:00:46,711 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 15:00:46,712 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 15:00:46,712 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 15:00:46,714 INFO sqlalchemy.engine.base.Engine Thread-101 : ROLLBACK
2020-06-08 15:00:46,741 INFO sqlalchemy.engine.base.Engine Thread-102 : BEGIN (implicit)
2020-06-08 15:00:46,743 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 15:00:46,743 INFO sqlalchemy.engine.base.Engine Thread-102 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 15:00:46,744 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 15:00:46,744 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 15:00:46,744 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 15:00:46,744 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 15:00:46,745 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 15:00:46,745 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 15:00:46,745 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 15:00:46,751 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 15:00:46,752 INFO sqlalchemy.engine.base.Engine Thread-102 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 15:00:46,753 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 15:00:46,753 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 15:00:46,757 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 15:00:46,757 INFO sqlalchemy.engine.base.Engine Thread-102 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 15:00:46,758 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 15:00:46,759 INFO sqlalchemy.engine.base.Engine Thread-102 : ROLLBACK
2020-06-08 15:00:48,310 INFO sqlalchemy.engine.base.Engine Thread-103 : BEGIN (implicit)
2020-06-08 15:00:48,311 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 15:00:48,311 INFO sqlalchemy.engine.base.Engine Thread-103 : (1, 1)
2020-06-08 15:00:48,312 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 15:00:48,312 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 15:00:48,317 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 15:00:48,317 INFO sqlalchemy.engine.base.Engine Thread-103 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 15:00:48,318 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 15:00:48,318 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 15:00:48,318 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 15:00:48,318 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 15:00:48,318 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 15:00:48,321 INFO sqlalchemy.engine.base.Engine Thread-103 : ROLLBACK
2020-06-08 15:00:49,475 INFO sqlalchemy.engine.base.Engine Thread-104 : BEGIN (implicit)
2020-06-08 15:00:49,476 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 15:00:49,477 INFO sqlalchemy.engine.base.Engine Thread-104 : (1, 1)
2020-06-08 15:00:49,477 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 15:00:49,478 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 15:00:49,482 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 15:00:49,482 INFO sqlalchemy.engine.base.Engine Thread-104 : (23,)
2020-06-08 15:00:49,482 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 15:00:49,483 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 15:00:49,487 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 15:00:49,487 INFO sqlalchemy.engine.base.Engine Thread-104 : (23,)
2020-06-08 15:00:49,487 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 15:00:49,491 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 15:00:49,491 INFO sqlalchemy.engine.base.Engine Thread-104 : ()
2020-06-08 15:00:49,492 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 15:00:49,492 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 15:00:49,493 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 15:00:49,494 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 15:00:49,494 INFO sqlalchemy.engine.base.Engine Thread-104 : (100,)
2020-06-08 15:00:49,495 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 15:00:49,495 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 15:00:49,495 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 15:00:49,495 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 15:00:49,495 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 15:00:49,495 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 15:00:49,498 INFO sqlalchemy.engine.base.Engine Thread-104 : ROLLBACK
2020-06-08 17:10:48,772 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 17:10:48,772 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:10:48,774 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 17:10:48,774 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 17:10:48,775 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 17:10:48,775 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:10:48,775 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 17:10:48,775 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 17:10:48,776 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 17:10:48,776 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:10:48,776 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 17:10:48,776 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 17:10:48,777 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 17:10:48,777 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:10:48,778 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 17:10:48,778 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 17:10:48,779 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 17:10:48,779 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:10:48,779 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 17:10:48,780 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:10:48,780 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 17:10:48,781 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:10:48,781 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 17:10:48,784 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:10:48,784 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 17:10:48,785 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:10:48,785 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:10:48,795 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 17:10:48,795 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 17:10:48,796 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:10:48,796 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 17:10:48,796 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 17:10:48,797 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 17:10:48,797 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:10:48,828 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 17:10:50,254 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 17:10:50,255 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:10:50,255 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 17:10:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:10:50,256 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:10:50,260 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:10:50,260 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 17:10:50,261 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:10:50,261 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:10:50,265 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:10:50,266 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 17:10:50,266 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:10:50,270 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:10:50,270 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 17:10:50,271 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:10:50,271 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:10:50,271 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:10:50,282 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:10:50,282 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 17:10:50,284 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:10:50,284 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:10:50,285 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:11:29,257 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 17:11:29,261 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 17:11:29,262 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:11:29,262 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 17:11:29,263 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:11:29,264 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:11:29,269 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:11:29,269 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 17:11:29,270 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:11:29,270 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:11:29,274 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:11:29,274 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 17:11:29,275 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:11:29,277 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:11:29,277 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 17:11:29,278 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:11:29,278 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:11:29,278 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:11:29,282 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:11:29,282 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 17:11:29,283 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:11:29,283 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:11:29,283 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:11:38,212 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 17:11:38,215 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 17:11:38,216 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:11:38,216 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 17:11:38,217 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:11:38,217 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:11:38,221 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:11:38,221 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 17:11:38,222 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:11:38,223 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:11:38,227 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:11:38,227 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 17:11:38,227 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:11:38,229 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:11:38,229 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 17:11:38,230 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:11:38,230 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:11:38,230 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:11:38,233 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:11:38,233 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 17:11:38,235 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:11:38,235 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:11:38,235 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:12:06,508 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 17:12:06,508 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,510 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 17:12:06,510 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 17:12:06,511 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 17:12:06,511 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 17:12:06,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 17:12:06,512 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 17:12:06,512 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 17:12:06,513 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 17:12:06,513 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 17:12:06,513 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,514 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 17:12:06,514 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 17:12:06,515 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 17:12:06,515 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,516 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 17:12:06,516 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,516 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 17:12:06,516 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,517 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 17:12:06,519 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:12:06,520 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 17:12:06,521 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:12:06,521 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:12:06,526 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:12:06,527 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 17:12:06,527 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:12:06,528 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:12:06,532 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:12:06,532 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 17:12:06,533 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:12:06,536 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:12:06,536 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,537 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:12:06,537 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:12:06,537 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:12:06,546 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:12:06,546 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:12:06,548 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:12:06,548 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:12:06,548 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:12:06,570 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 17:14:38,765 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 17:14:38,765 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:14:38,766 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 17:14:38,767 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 17:14:38,768 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 17:14:38,768 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:14:38,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 17:14:38,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 17:14:38,769 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 17:14:38,769 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:14:38,769 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 17:14:38,769 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 17:14:38,770 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 17:14:38,770 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:14:38,771 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 17:14:38,771 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 17:14:38,772 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 17:14:38,772 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:14:38,772 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 17:14:38,772 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:14:38,773 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 17:14:38,773 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:14:38,774 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 17:14:38,776 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:14:38,777 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 17:14:38,778 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:14:38,778 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:14:38,787 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 17:14:38,787 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 17:14:38,788 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:14:38,789 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 17:14:38,789 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 17:14:38,789 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 17:14:38,789 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:14:38,820 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 17:14:47,558 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 17:14:47,559 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:14:47,559 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 17:14:47,560 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:14:47,560 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:14:47,564 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:14:47,564 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 17:14:47,567 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:14:47,567 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:14:47,572 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:14:47,572 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 17:14:47,572 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 17:14:47,573 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:14:47,573 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 17:14:47,574 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:14:47,574 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:14:47,577 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:14:47,577 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:14:47,577 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 17:14:47,582 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:14:47,582 INFO sqlalchemy.engine.base.Engine Thread-4 : (20,)
2020-06-08 17:14:47,583 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:14:47,583 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 17:14:47,586 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:14:47,587 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:14:47,587 INFO sqlalchemy.engine.base.Engine Thread-4 : (20,)
2020-06-08 17:14:47,587 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:14:47,587 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:14:47,593 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:14:47,596 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:14:47,598 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:14:47,598 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 17:14:47,598 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 17:14:47,599 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:14:47,599 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:14:47,599 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:14:47,602 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:14:47,603 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:14:47,603 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 17:14:47,604 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:14:47,604 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:14:47,605 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:14:47,605 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:14:47,606 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:14:47,620 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 17:14:47,634 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 17:14:53,201 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 17:14:53,202 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:14:53,202 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 17:14:53,203 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:14:53,203 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:14:53,208 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 17:14:53,208 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 17:14:53,209 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:14:53,209 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 17:14:53,209 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 17:14:53,209 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 17:14:53,209 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:14:53,212 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 17:14:54,431 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 17:14:54,432 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:14:54,432 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-08 17:14:54,433 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:14:54,434 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:14:54,438 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:14:54,438 INFO sqlalchemy.engine.base.Engine Thread-6 : (23,)
2020-06-08 17:14:54,438 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:14:54,438 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:14:54,442 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:14:54,442 INFO sqlalchemy.engine.base.Engine Thread-6 : (23,)
2020-06-08 17:14:54,442 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:14:54,444 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:14:54,444 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-06-08 17:14:54,445 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:14:54,445 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:14:54,445 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:14:54,448 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:14:54,448 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-06-08 17:14:54,449 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:14:54,450 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:14:54,450 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:14:54,452 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 17:15:18,792 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-08 17:15:18,795 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-08 17:15:18,796 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:15:18,798 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-08 17:15:18,798 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:15:18,799 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-08 17:15:18,800 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:15:18,800 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:15:18,803 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:15:18,804 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:15:18,811 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-08 17:15:18,812 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:15:18,818 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-08 17:15:18,818 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-08 17:15:18,830 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:15:18,830 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-08 17:15:18,838 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-08 17:15:18,840 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-08 17:15:18,840 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:15:18,840 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:15:18,843 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:15:18,842 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:15:18,841 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-08 17:15:18,850 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:15:18,848 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-08 17:15:18,850 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-08 17:15:18,846 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-08 17:15:18,851 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:15:18,852 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:15:18,854 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-08 17:15:23,999 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 17:15:24,000 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:15:24,001 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 17:15:24,001 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:15:24,001 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:15:24,006 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 17:15:24,006 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 17:15:24,007 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:15:24,007 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 17:15:24,007 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 17:15:24,007 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 17:15:24,007 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:15:24,009 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 17:15:25,095 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 17:15:25,096 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:15:25,096 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 17:15:25,097 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:15:25,097 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:15:25,101 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:15:25,101 INFO sqlalchemy.engine.base.Engine Thread-13 : (23,)
2020-06-08 17:15:25,102 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:15:25,102 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:15:25,105 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:15:25,105 INFO sqlalchemy.engine.base.Engine Thread-13 : (23,)
2020-06-08 17:15:25,106 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:15:25,108 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:15:25,108 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-06-08 17:15:25,109 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:15:25,109 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:15:25,110 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:15:25,112 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:15:25,113 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-06-08 17:15:25,114 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:15:25,114 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:15:25,114 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:15:25,116 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 17:16:18,277 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 17:16:18,277 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:16:18,279 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 17:16:18,279 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 17:16:18,280 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 17:16:18,280 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:16:18,281 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 17:16:18,281 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 17:16:18,281 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 17:16:18,281 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:16:18,282 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 17:16:18,282 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 17:16:18,282 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 17:16:18,282 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:16:18,283 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 17:16:18,283 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 17:16:18,284 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 17:16:18,284 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:16:18,285 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 17:16:18,285 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:16:18,286 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 17:16:18,286 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 17:16:18,286 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 17:16:18,289 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:18,289 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 17:16:18,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:18,291 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:18,300 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 17:16:18,300 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 17:16:18,301 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:16:18,301 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 17:16:18,301 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 17:16:18,301 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 17:16:18,301 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:16:18,334 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 17:16:19,627 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 17:16:19,629 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:19,629 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 17:16:19,629 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:19,630 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:19,634 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:16:19,634 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 17:16:19,635 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:16:19,635 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:16:19,639 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:16:19,639 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 17:16:19,640 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:16:19,643 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:16:19,643 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 17:16:19,644 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:16:19,644 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:16:19,644 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:16:19,654 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:16:19,654 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 17:16:19,656 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:16:19,656 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:16:19,656 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:16:19,670 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 17:16:28,955 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 17:16:28,957 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:16:28,957 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 17:16:28,958 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:16:28,959 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:16:28,959 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:16:28,962 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 17:16:28,962 INFO sqlalchemy.engine.base.Engine Thread-4 : (100,)
2020-06-08 17:16:28,962 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 17:16:28,963 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 17:16:28,963 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 17:16:28,963 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 17:16:28,963 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 17:16:28,963 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 17:16:28,965 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:28,965 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 17:16:28,966 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:28,966 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:29,033 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 17:16:29,033 INFO sqlalchemy.engine.base.Engine Thread-4 : ('philip', 1, 1)
2020-06-08 17:16:29,034 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:29,034 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:29,037 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 17:16:29,305 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 17:16:29,306 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:29,306 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 17:16:29,312 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:29,315 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 17:16:29,315 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:29,316 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 17:16:29,316 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 17:16:29,332 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:29,332 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 17:16:29,331 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 17:16:29,329 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:29,317 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:29,332 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 17:16:29,333 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 17:16:29,338 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:29,337 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-08 17:16:29,339 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:29,335 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:29,343 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:29,342 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 17:16:29,342 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:29,340 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:29,346 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-08 17:16:29,345 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:29,345 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 17:16:29,348 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:29,349 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 17:16:29,350 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:29,353 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-08 17:16:29,388 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-08 17:16:29,390 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 17:16:29,390 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 17:16:29,391 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 17:16:29,391 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 17:16:29,392 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 17:16:29,392 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 17:16:29,392 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 17:16:29,392 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 17:16:29,392 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 17:16:29,397 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 17:16:29,397 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 17:16:29,398 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 17:16:29,398 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 17:16:29,402 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 17:16:29,402 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 17:16:29,403 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 17:16:29,404 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-06-08 17:16:29,431 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-08 17:16:29,432 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 17:16:29,433 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 17:16:29,434 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 17:16:29,435 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 17:16:29,435 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 17:16:29,435 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 17:16:29,435 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 17:16:29,435 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 17:16:29,435 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 17:16:29,440 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 17:16:29,441 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 17:16:29,442 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 17:16:29,442 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 17:16:29,446 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 17:16:29,446 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 17:16:29,449 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 17:16:29,451 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-08 17:16:30,859 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-08 17:16:30,860 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:30,860 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-08 17:16:30,861 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:30,861 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:30,868 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 17:16:30,868 INFO sqlalchemy.engine.base.Engine Thread-22 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 17:16:30,869 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:16:30,869 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 17:16:30,869 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 17:16:30,869 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 17:16:30,869 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 17:16:30,872 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-08 17:16:31,965 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-08 17:16:31,966 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 17:16:31,966 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-08 17:16:31,966 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 17:16:31,967 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 17:16:31,970 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 17:16:31,970 INFO sqlalchemy.engine.base.Engine Thread-23 : (20,)
2020-06-08 17:16:31,971 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 17:16:31,971 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 17:16:31,975 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 17:16:31,975 INFO sqlalchemy.engine.base.Engine Thread-23 : (20,)
2020-06-08 17:16:31,976 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 17:16:31,978 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 17:16:31,978 INFO sqlalchemy.engine.base.Engine Thread-23 : ()
2020-06-08 17:16:31,978 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 17:16:31,979 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 17:16:31,979 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 17:16:31,982 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 17:16:31,982 INFO sqlalchemy.engine.base.Engine Thread-23 : ()
2020-06-08 17:16:31,983 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 17:16:31,983 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 17:16:31,983 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 17:16:31,986 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-08 19:13:43,541 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:13:43,541 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:13:43,543 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:13:43,543 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:13:43,544 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:13:43,544 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:13:43,544 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:13:43,545 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:13:43,545 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:13:43,545 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:13:43,545 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:13:43,545 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:13:43,546 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:13:43,546 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:13:43,547 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:13:43,547 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:13:43,548 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:13:43,548 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:13:43,549 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:13:43,549 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:13:43,549 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:13:43,549 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:13:43,550 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:13:43,553 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:13:43,553 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:13:43,554 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:13:43,554 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:13:43,563 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 19:13:43,563 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 19:13:43,564 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:13:43,565 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 19:13:43,565 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 19:13:43,565 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 19:13:43,565 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:13:43,596 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:13:44,882 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 19:13:44,883 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:13:44,883 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 19:13:44,884 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:13:44,885 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:13:44,889 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 19:13:44,889 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 19:13:44,889 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:13:44,890 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:13:44,894 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 19:13:44,894 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 19:13:44,895 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 19:15:59,684 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:15:59,684 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:15:59,686 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:15:59,686 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:15:59,687 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:15:59,687 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:15:59,687 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:15:59,687 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:15:59,688 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:15:59,688 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:15:59,688 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:15:59,688 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:15:59,688 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:15:59,688 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:15:59,689 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:15:59,689 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:15:59,690 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:15:59,690 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:15:59,690 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:15:59,690 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:15:59,691 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:15:59,691 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:15:59,692 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:15:59,694 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:15:59,694 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:15:59,695 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:15:59,696 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:15:59,701 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 19:15:59,701 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 19:15:59,702 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:15:59,702 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:15:59,707 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 19:15:59,707 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 19:15:59,708 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 19:18:10,104 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:18:10,104 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:18:10,106 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:18:10,106 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:18:10,107 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:18:10,107 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:18:10,107 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:18:10,108 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:18:10,108 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:18:10,108 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:18:10,108 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:18:10,108 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:18:10,109 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:18:10,109 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:18:10,110 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:18:10,110 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:18:10,111 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:18:10,111 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:18:10,111 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:18:10,111 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:18:10,112 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:18:10,112 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:18:10,113 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:18:10,115 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:10,115 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:18:10,116 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:10,116 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:10,124 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 19:18:10,124 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 19:18:10,125 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:18:10,126 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 19:18:10,126 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 19:18:10,126 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 19:18:10,126 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:18:10,152 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:18:11,143 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 19:18:11,144 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:11,144 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 19:18:11,145 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:11,145 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:11,149 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 19:18:11,149 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 19:18:11,150 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:18:11,150 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:18:11,154 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 19:18:11,154 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 19:18:11,155 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 19:18:11,158 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 19:18:11,158 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 19:18:11,159 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:18:11,159 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:18:11,159 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:18:11,170 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 19:18:11,170 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 19:18:11,172 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 19:18:11,172 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 19:18:11,172 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 19:18:11,174 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s ORDER BY complexgroups.group_name
2020-06-08 19:18:11,174 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 19:18:11,174 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:18:11,190 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 19:18:44,397 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 19:18:44,400 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 19:18:44,400 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 19:18:44,401 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 19:18:44,402 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 19:18:44,402 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 19:18:44,405 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:18:44,405 INFO sqlalchemy.engine.base.Engine Thread-4 : (100,)
2020-06-08 19:18:44,405 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:18:44,406 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 19:18:44,406 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 19:18:44,406 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 19:18:44,406 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 19:18:44,406 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 19:18:44,408 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:44,408 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 19:18:44,408 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:44,409 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:44,471 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:18:44,471 INFO sqlalchemy.engine.base.Engine Thread-4 : ('philip', 1, 1)
2020-06-08 19:18:44,472 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:44,472 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:44,475 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 19:18:44,732 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 19:18:44,733 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:44,733 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 19:18:44,734 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:44,734 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:44,747 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 19:18:44,820 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 19:18:44,824 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:44,824 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 19:18:44,826 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 19:18:44,829 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:44,832 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 19:18:44,832 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:44,832 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-08 19:18:44,833 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:44,834 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:44,839 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 19:18:44,845 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:44,855 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:44,854 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:44,857 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 19:18:44,850 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-08 19:18:44,856 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 19:18:44,857 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-08 19:18:44,862 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 19:18:44,859 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 19:18:44,860 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:44,864 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:44,862 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:18:44,860 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:44,866 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-08 19:18:44,867 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:44,869 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 19:18:44,870 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 19:18:44,871 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 19:18:44,871 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 19:18:44,871 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:18:44,871 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 19:18:44,871 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:18:44,871 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:18:44,876 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 19:18:44,876 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:18:44,877 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 19:18:44,877 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 19:18:44,882 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 19:18:44,882 INFO sqlalchemy.engine.base.Engine Thread-19 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:18:44,883 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 19:18:44,883 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-06-08 19:18:44,917 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-08 19:18:44,919 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 19:18:44,919 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:18:44,920 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 19:18:44,920 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 19:18:44,920 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 19:18:44,921 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:18:44,921 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 19:18:44,921 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:18:44,921 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:18:44,925 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 19:18:44,925 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:18:44,926 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 19:18:44,926 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 19:18:44,933 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 19:18:44,933 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:18:44,934 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 19:18:44,935 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-08 19:18:48,798 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-08 19:18:48,799 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:48,799 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-08 19:18:48,800 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:48,800 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:48,802 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:18:48,802 INFO sqlalchemy.engine.base.Engine Thread-22 : ('philip', 1, 1)
2020-06-08 19:18:48,803 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:48,803 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:48,808 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 19:18:48,808 INFO sqlalchemy.engine.base.Engine Thread-22 : ()
2020-06-08 19:18:48,808 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 19:18:48,809 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 19:18:48,809 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 19:18:48,825 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:18:48,825 INFO sqlalchemy.engine.base.Engine Thread-22 : ('philip', 1, 1)
2020-06-08 19:18:48,825 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:48,826 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:48,829 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-08 19:18:49,066 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-08 19:18:49,067 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:49,067 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-08 19:18:49,068 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:49,069 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:49,071 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-08 19:18:49,142 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-06-08 19:18:49,143 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:49,143 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-06-08 19:18:49,146 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-06-08 19:18:49,147 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:49,148 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:49,148 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-06-08 19:18:49,151 INFO sqlalchemy.engine.base.Engine Thread-35 : BEGIN (implicit)
2020-06-08 19:18:49,151 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:49,154 INFO sqlalchemy.engine.base.Engine Thread-36 : BEGIN (implicit)
2020-06-08 19:18:49,155 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:49,156 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:49,158 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-06-08 19:18:49,159 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:49,159 INFO sqlalchemy.engine.base.Engine Thread-35 : (1, 1)
2020-06-08 19:18:49,160 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:49,160 INFO sqlalchemy.engine.base.Engine Thread-36 : (1, 1)
2020-06-08 19:18:49,162 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:49,162 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:49,165 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-06-08 19:18:49,166 INFO sqlalchemy.engine.base.Engine Thread-35 : ROLLBACK
2020-06-08 19:18:49,167 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:49,168 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:49,170 INFO sqlalchemy.engine.base.Engine Thread-36 : ROLLBACK
2020-06-08 19:18:50,468 INFO sqlalchemy.engine.base.Engine Thread-39 : BEGIN (implicit)
2020-06-08 19:18:50,469 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:50,469 INFO sqlalchemy.engine.base.Engine Thread-39 : (1, 1)
2020-06-08 19:18:50,470 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:50,470 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:50,472 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:18:50,472 INFO sqlalchemy.engine.base.Engine Thread-39 : ('philip', 1, 1)
2020-06-08 19:18:50,473 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:50,473 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:50,475 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 19:18:50,475 INFO sqlalchemy.engine.base.Engine Thread-39 : ('2', 1)
2020-06-08 19:18:50,476 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:18:50,476 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:18:50,481 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 19:18:50,481 INFO sqlalchemy.engine.base.Engine Thread-39 : ()
2020-06-08 19:18:50,482 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 19:18:50,482 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 19:18:50,483 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 19:18:50,484 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:18:50,484 INFO sqlalchemy.engine.base.Engine Thread-39 : (66,)
2020-06-08 19:18:50,485 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:18:50,485 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 19:18:50,485 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 19:18:50,486 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:18:50,486 INFO sqlalchemy.engine.base.Engine Thread-39 : (105,)
2020-06-08 19:18:50,487 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:18:50,487 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:18:50,487 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:18:50,512 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:18:50,513 INFO sqlalchemy.engine.base.Engine Thread-39 : ('philip', 1, 1)
2020-06-08 19:18:50,513 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:50,513 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:50,517 INFO sqlalchemy.engine.base.Engine Thread-39 : ROLLBACK
2020-06-08 19:18:50,745 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-06-08 19:18:50,746 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:50,747 INFO sqlalchemy.engine.base.Engine Thread-49 : (1, 1)
2020-06-08 19:18:50,747 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:50,748 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:50,750 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-06-08 19:18:50,813 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-06-08 19:18:50,814 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:50,814 INFO sqlalchemy.engine.base.Engine Thread-50 : (1, 1)
2020-06-08 19:18:50,817 INFO sqlalchemy.engine.base.Engine Thread-51 : BEGIN (implicit)
2020-06-08 19:18:50,818 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:50,825 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:50,823 INFO sqlalchemy.engine.base.Engine Thread-53 : BEGIN (implicit)
2020-06-08 19:18:50,824 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:50,820 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-06-08 19:18:50,827 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
2020-06-08 19:18:50,828 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:50,829 INFO sqlalchemy.engine.base.Engine Thread-51 : (1, 1)
2020-06-08 19:18:50,830 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:18:50,831 INFO sqlalchemy.engine.base.Engine Thread-52 : (1, 1)
2020-06-08 19:18:50,830 INFO sqlalchemy.engine.base.Engine Thread-53 : (1, 1)
2020-06-08 19:18:50,831 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:50,832 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:50,832 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:50,833 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:50,835 INFO sqlalchemy.engine.base.Engine Thread-51 : ROLLBACK
2020-06-08 19:18:50,835 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:18:50,836 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:18:50,838 INFO sqlalchemy.engine.base.Engine Thread-53 : ROLLBACK
2020-06-08 19:18:50,841 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-06-08 19:20:17,855 INFO sqlalchemy.engine.base.Engine Thread-54 : BEGIN (implicit)
2020-06-08 19:20:17,856 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:17,856 INFO sqlalchemy.engine.base.Engine Thread-54 : (1, 1)
2020-06-08 19:20:17,858 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:17,858 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:17,860 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:20:17,860 INFO sqlalchemy.engine.base.Engine Thread-54 : ('philip', 1, 1)
2020-06-08 19:20:17,861 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:17,861 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:17,866 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 19:20:17,866 INFO sqlalchemy.engine.base.Engine Thread-54 : ()
2020-06-08 19:20:17,867 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 19:20:17,868 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 19:20:17,868 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 19:20:17,872 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:20:17,872 INFO sqlalchemy.engine.base.Engine Thread-54 : ('philip', 1, 1)
2020-06-08 19:20:17,872 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:17,873 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:17,875 INFO sqlalchemy.engine.base.Engine Thread-54 : ROLLBACK
2020-06-08 19:20:18,110 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-06-08 19:20:18,111 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:18,111 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-06-08 19:20:18,112 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:18,112 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:18,114 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-06-08 19:20:18,194 INFO sqlalchemy.engine.base.Engine Thread-66 : BEGIN (implicit)
2020-06-08 19:20:18,196 INFO sqlalchemy.engine.base.Engine Thread-67 : BEGIN (implicit)
2020-06-08 19:20:18,198 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:18,204 INFO sqlalchemy.engine.base.Engine Thread-66 : (1, 1)
2020-06-08 19:20:18,202 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:18,204 INFO sqlalchemy.engine.base.Engine Thread-67 : (1, 1)
2020-06-08 19:20:18,200 INFO sqlalchemy.engine.base.Engine Thread-65 : BEGIN (implicit)
2020-06-08 19:20:18,206 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:18,205 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:18,207 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:18,207 INFO sqlalchemy.engine.base.Engine Thread-65 : (1, 1)
2020-06-08 19:20:18,204 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-06-08 19:20:18,209 INFO sqlalchemy.engine.base.Engine Thread-66 : ROLLBACK
2020-06-08 19:20:18,209 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:18,211 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:18,211 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:18,210 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:18,214 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:18,214 INFO sqlalchemy.engine.base.Engine Thread-68 : (1, 1)
2020-06-08 19:20:18,214 INFO sqlalchemy.engine.base.Engine Thread-67 : ROLLBACK
2020-06-08 19:20:18,215 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:18,215 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:18,218 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-06-08 19:20:18,220 INFO sqlalchemy.engine.base.Engine Thread-65 : ROLLBACK
2020-06-08 19:20:23,794 INFO sqlalchemy.engine.base.Engine Thread-69 : BEGIN (implicit)
2020-06-08 19:20:23,795 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:23,795 INFO sqlalchemy.engine.base.Engine Thread-69 : (1, 1)
2020-06-08 19:20:23,796 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:23,797 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:23,799 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:20:23,799 INFO sqlalchemy.engine.base.Engine Thread-69 : ('philip', 1, 1)
2020-06-08 19:20:23,800 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:23,800 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:23,810 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:20:23,810 INFO sqlalchemy.engine.base.Engine Thread-69 : ()
2020-06-08 19:20:23,811 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:20:23,811 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:20:23,811 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:20:23,811 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:20:23,811 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:20:23,811 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:20:23,812 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:20:23,831 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:20:23,831 INFO sqlalchemy.engine.base.Engine Thread-69 : ('philip', 1, 1)
2020-06-08 19:20:23,831 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:23,832 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:23,835 INFO sqlalchemy.engine.base.Engine Thread-69 : ROLLBACK
2020-06-08 19:20:24,068 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-06-08 19:20:24,069 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:24,069 INFO sqlalchemy.engine.base.Engine Thread-79 : (1, 1)
2020-06-08 19:20:24,070 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:24,070 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:24,073 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-06-08 19:20:24,140 INFO sqlalchemy.engine.base.Engine Thread-81 : BEGIN (implicit)
2020-06-08 19:20:24,141 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:24,142 INFO sqlalchemy.engine.base.Engine Thread-81 : (1, 1)
2020-06-08 19:20:24,142 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:24,143 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:24,146 INFO sqlalchemy.engine.base.Engine Thread-80 : BEGIN (implicit)
2020-06-08 19:20:24,148 INFO sqlalchemy.engine.base.Engine Thread-81 : ROLLBACK
2020-06-08 19:20:24,150 INFO sqlalchemy.engine.base.Engine Thread-82 : BEGIN (implicit)
2020-06-08 19:20:24,153 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:24,157 INFO sqlalchemy.engine.base.Engine Thread-80 : (1, 1)
2020-06-08 19:20:24,156 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:24,157 INFO sqlalchemy.engine.base.Engine Thread-82 : (1, 1)
2020-06-08 19:20:24,154 INFO sqlalchemy.engine.base.Engine Thread-83 : BEGIN (implicit)
2020-06-08 19:20:24,158 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:24,158 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:24,160 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:24,159 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:24,159 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:24,161 INFO sqlalchemy.engine.base.Engine Thread-83 : (1, 1)
2020-06-08 19:20:24,164 INFO sqlalchemy.engine.base.Engine Thread-82 : ROLLBACK
2020-06-08 19:20:24,164 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:24,164 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:24,167 INFO sqlalchemy.engine.base.Engine Thread-83 : ROLLBACK
2020-06-08 19:20:24,168 INFO sqlalchemy.engine.base.Engine Thread-80 : ROLLBACK
2020-06-08 19:20:25,924 INFO sqlalchemy.engine.base.Engine Thread-84 : BEGIN (implicit)
2020-06-08 19:20:25,925 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:25,925 INFO sqlalchemy.engine.base.Engine Thread-84 : (1, 1)
2020-06-08 19:20:25,925 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:25,926 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:25,928 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:20:25,928 INFO sqlalchemy.engine.base.Engine Thread-84 : ('philip', 1, 1)
2020-06-08 19:20:25,929 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:25,929 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:25,932 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:20:25,932 INFO sqlalchemy.engine.base.Engine Thread-84 : ('20', 1)
2020-06-08 19:20:25,933 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:20:25,933 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:20:25,936 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:20:25,936 INFO sqlalchemy.engine.base.Engine Thread-84 : (82,)
2020-06-08 19:20:25,936 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:20:25,937 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:20:25,937 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:20:25,937 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:20:25,938 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:20:25,938 INFO sqlalchemy.engine.base.Engine Thread-84 : (1,)
2020-06-08 19:20:25,939 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:20:25,939 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:20:25,939 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:20:25,940 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:20:25,941 INFO sqlalchemy.engine.base.Engine Thread-84 : ()
2020-06-08 19:20:25,941 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:20:25,941 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:20:25,942 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:20:25,943 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:20:25,943 INFO sqlalchemy.engine.base.Engine Thread-84 : (127,)
2020-06-08 19:20:25,944 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:20:25,944 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:20:25,944 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:20:25,944 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:20:25,944 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:20:25,946 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:20:25,946 INFO sqlalchemy.engine.base.Engine Thread-84 : (105,)
2020-06-08 19:20:25,946 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:20:25,947 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:20:25,947 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:20:25,986 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:20:25,986 INFO sqlalchemy.engine.base.Engine Thread-84 : ('philip', 1, 1)
2020-06-08 19:20:25,987 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:25,987 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:25,991 INFO sqlalchemy.engine.base.Engine Thread-84 : ROLLBACK
2020-06-08 19:20:26,215 INFO sqlalchemy.engine.base.Engine Thread-94 : BEGIN (implicit)
2020-06-08 19:20:26,216 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:26,216 INFO sqlalchemy.engine.base.Engine Thread-94 : (1, 1)
2020-06-08 19:20:26,217 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:26,217 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:26,219 INFO sqlalchemy.engine.base.Engine Thread-94 : ROLLBACK
2020-06-08 19:20:26,296 INFO sqlalchemy.engine.base.Engine Thread-95 : BEGIN (implicit)
2020-06-08 19:20:26,298 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:26,298 INFO sqlalchemy.engine.base.Engine Thread-95 : (1, 1)
2020-06-08 19:20:26,298 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:26,299 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:26,301 INFO sqlalchemy.engine.base.Engine Thread-96 : BEGIN (implicit)
2020-06-08 19:20:26,304 INFO sqlalchemy.engine.base.Engine Thread-97 : BEGIN (implicit)
2020-06-08 19:20:26,306 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:26,311 INFO sqlalchemy.engine.base.Engine Thread-96 : (1, 1)
2020-06-08 19:20:26,311 INFO sqlalchemy.engine.base.Engine Thread-97 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:26,313 INFO sqlalchemy.engine.base.Engine Thread-97 : (1, 1)
2020-06-08 19:20:26,310 INFO sqlalchemy.engine.base.Engine Thread-98 : BEGIN (implicit)
2020-06-08 19:20:26,313 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:26,314 DEBUG sqlalchemy.engine.base.Engine Thread-97 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:26,322 DEBUG sqlalchemy.engine.base.Engine Thread-97 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:26,315 INFO sqlalchemy.engine.base.Engine Thread-98 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:20:26,322 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:26,315 INFO sqlalchemy.engine.base.Engine Thread-95 : ROLLBACK
2020-06-08 19:20:26,324 INFO sqlalchemy.engine.base.Engine Thread-97 : ROLLBACK
2020-06-08 19:20:26,325 INFO sqlalchemy.engine.base.Engine Thread-98 : (1, 1)
2020-06-08 19:20:26,329 INFO sqlalchemy.engine.base.Engine Thread-96 : ROLLBACK
2020-06-08 19:20:26,331 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:20:26,331 DEBUG sqlalchemy.engine.base.Engine Thread-98 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:20:26,334 INFO sqlalchemy.engine.base.Engine Thread-98 : ROLLBACK
2020-06-08 19:21:16,696 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:21:16,696 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:16,697 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:21:16,698 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:21:16,698 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:21:16,699 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:16,699 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:21:16,699 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:21:16,700 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:21:16,700 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:16,700 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:21:16,700 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:21:16,700 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:21:16,701 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:16,701 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:21:16,701 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:21:16,702 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:21:16,702 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:16,703 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:21:16,703 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:16,704 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:21:16,704 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:16,704 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:21:16,707 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:16,707 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:21:16,708 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:16,708 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:16,711 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:16,711 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:21:16,712 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:16,713 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:16,716 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:21:16,716 INFO sqlalchemy.engine.base.Engine Thread-2 : ('20', 1)
2020-06-08 19:21:16,717 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:21:16,717 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:21:16,721 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:16,721 INFO sqlalchemy.engine.base.Engine Thread-2 : (82,)
2020-06-08 19:21:16,721 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:16,721 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:21:16,722 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:21:16,722 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:21:16,723 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:21:16,724 INFO sqlalchemy.engine.base.Engine Thread-2 : (1,)
2020-06-08 19:21:16,724 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:16,725 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:21:16,725 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:21:16,727 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:21:16,727 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:16,728 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:21:16,728 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:21:16,728 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:21:16,730 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:16,730 INFO sqlalchemy.engine.base.Engine Thread-2 : (127,)
2020-06-08 19:21:16,730 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:16,730 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:16,731 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:16,731 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:16,731 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:21:16,732 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:16,733 INFO sqlalchemy.engine.base.Engine Thread-2 : (105,)
2020-06-08 19:21:16,733 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:16,733 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:21:16,733 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:21:16,837 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:16,837 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:21:16,837 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:16,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:16,842 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:21:17,209 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 19:21:17,210 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:17,210 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 19:21:17,211 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:17,211 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:17,225 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 19:21:17,390 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 19:21:17,394 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:17,394 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 19:21:17,395 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:17,395 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 19:21:17,398 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:17,403 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:17,403 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 19:21:17,405 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 19:21:17,406 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 19:21:17,406 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 19:21:17,407 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:17,408 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:17,410 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:17,410 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 19:21:17,410 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:17,411 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 19:21:17,413 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 19:21:17,414 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:17,415 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:17,414 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:17,417 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:17,417 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 19:21:17,420 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 19:21:37,747 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-08 19:21:37,748 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:37,748 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-08 19:21:37,749 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:37,749 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:37,752 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:37,752 INFO sqlalchemy.engine.base.Engine Thread-18 : ('philip', 1, 1)
2020-06-08 19:21:37,752 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:37,753 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:37,754 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:21:37,754 INFO sqlalchemy.engine.base.Engine Thread-18 : ('20', 1)
2020-06-08 19:21:37,754 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:21:37,755 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:21:37,759 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:37,759 INFO sqlalchemy.engine.base.Engine Thread-18 : (82,)
2020-06-08 19:21:37,759 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:21:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:21:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:21:37,761 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:21:37,761 INFO sqlalchemy.engine.base.Engine Thread-18 : (1,)
2020-06-08 19:21:37,762 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:37,762 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:21:37,762 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:21:37,763 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:21:37,763 INFO sqlalchemy.engine.base.Engine Thread-18 : ()
2020-06-08 19:21:37,764 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:21:37,764 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:21:37,764 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:21:37,765 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:37,765 INFO sqlalchemy.engine.base.Engine Thread-18 : (127,)
2020-06-08 19:21:37,766 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:37,766 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:37,766 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:37,766 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:37,766 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:21:37,767 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:37,767 INFO sqlalchemy.engine.base.Engine Thread-18 : (105,)
2020-06-08 19:21:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:21:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:21:37,772 INFO sqlalchemy.engine.base.Engine Thread-18 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s WHERE datesofinterest.id = %s
2020-06-08 19:21:37,772 INFO sqlalchemy.engine.base.Engine Thread-18 : ('20', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 20)
2020-06-08 19:21:37,773 INFO sqlalchemy.engine.base.Engine Thread-18 : COMMIT
2020-06-08 19:21:37,810 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-08 19:21:37,811 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:37,811 INFO sqlalchemy.engine.base.Engine Thread-19 : (1, 1)
2020-06-08 19:21:37,812 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:37,812 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:37,814 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:37,814 INFO sqlalchemy.engine.base.Engine Thread-19 : ('philip', 1, 1)
2020-06-08 19:21:37,815 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:37,815 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:37,823 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:21:37,824 INFO sqlalchemy.engine.base.Engine Thread-19 : ()
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:21:37,825 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:21:37,826 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:21:37,826 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:21:37,826 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:21:37,826 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:21:37,826 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:21:37,844 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:37,844 INFO sqlalchemy.engine.base.Engine Thread-19 : ('philip', 1, 1)
2020-06-08 19:21:37,844 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:37,845 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:37,848 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-06-08 19:21:38,089 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-08 19:21:38,090 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:38,090 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-08 19:21:38,091 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:38,091 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:38,093 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-08 19:21:38,166 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-08 19:21:38,167 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:38,167 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-08 19:21:38,169 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:38,171 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-08 19:21:38,171 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:38,172 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:38,179 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-08 19:21:38,175 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-08 19:21:38,177 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-06-08 19:21:38,182 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:38,181 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:38,182 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-08 19:21:38,182 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-06-08 19:21:38,180 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-08 19:21:38,183 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:38,183 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:38,181 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:38,184 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:38,186 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-08 19:21:38,186 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:38,187 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:38,190 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-06-08 19:21:38,191 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-08 19:21:39,992 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-06-08 19:21:39,993 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:39,993 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-06-08 19:21:39,994 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:39,994 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:39,996 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:39,996 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip', 1, 1)
2020-06-08 19:21:39,996 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:39,997 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:39,998 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:21:39,998 INFO sqlalchemy.engine.base.Engine Thread-34 : ('20', 1)
2020-06-08 19:21:39,999 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:21:39,999 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:21:40,001 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:40,001 INFO sqlalchemy.engine.base.Engine Thread-34 : (82,)
2020-06-08 19:21:40,002 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:40,002 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:21:40,002 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:21:40,002 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:21:40,004 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:21:40,004 INFO sqlalchemy.engine.base.Engine Thread-34 : (1,)
2020-06-08 19:21:40,004 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:40,004 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:21:40,005 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:21:40,006 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:21:40,006 INFO sqlalchemy.engine.base.Engine Thread-34 : ()
2020-06-08 19:21:40,006 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:21:40,007 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:21:40,007 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:21:40,008 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:40,008 INFO sqlalchemy.engine.base.Engine Thread-34 : (127,)
2020-06-08 19:21:40,009 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:40,009 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:40,009 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:40,009 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:40,009 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:21:40,010 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:40,010 INFO sqlalchemy.engine.base.Engine Thread-34 : (105,)
2020-06-08 19:21:40,011 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:40,011 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:21:40,011 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:21:40,015 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:40,015 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip', 1, 1)
2020-06-08 19:21:40,016 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:40,016 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:40,021 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-06-08 19:21:40,241 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-08 19:21:40,242 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:40,242 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-08 19:21:40,243 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:40,243 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:40,245 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-08 19:21:40,315 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-08 19:21:40,316 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:40,316 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-08 19:21:40,318 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-06-08 19:21:40,320 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:40,320 INFO sqlalchemy.engine.base.Engine Thread-46 : (1, 1)
2020-06-08 19:21:40,321 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:40,321 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:40,323 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-08 19:21:40,323 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:40,326 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-06-08 19:21:40,327 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-08 19:21:40,328 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:40,329 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:40,332 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-06-08 19:21:40,332 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-06-08 19:21:40,330 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:40,333 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-08 19:21:40,334 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:40,334 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:40,336 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-06-08 19:21:40,333 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:40,337 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:40,339 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-06-08 19:21:47,433 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:21:47,434 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:47,435 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:21:47,435 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:21:47,436 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:21:47,436 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:47,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:21:47,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:21:47,437 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:21:47,437 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:47,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:21:47,438 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:21:47,438 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:21:47,438 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:47,439 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:21:47,439 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:21:47,440 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:21:47,440 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:47,440 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:21:47,440 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:47,441 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:21:47,441 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:47,442 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:21:47,445 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:47,445 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:21:47,446 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:47,446 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:47,449 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:47,449 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:21:47,449 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:47,450 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:47,453 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:21:47,453 INFO sqlalchemy.engine.base.Engine Thread-2 : ('20', 1)
2020-06-08 19:21:47,453 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:21:47,454 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:21:47,457 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:47,457 INFO sqlalchemy.engine.base.Engine Thread-2 : (82,)
2020-06-08 19:21:47,458 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:47,458 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:21:47,458 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:21:47,458 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:21:47,460 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:21:47,460 INFO sqlalchemy.engine.base.Engine Thread-2 : (1,)
2020-06-08 19:21:47,461 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:47,461 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:21:47,461 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:21:47,463 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:21:47,463 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:21:47,464 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:21:47,464 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:21:47,464 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:21:47,466 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:47,466 INFO sqlalchemy.engine.base.Engine Thread-2 : (127,)
2020-06-08 19:21:47,466 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:47,467 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:47,467 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:47,467 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:21:47,467 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:21:47,468 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:21:47,468 INFO sqlalchemy.engine.base.Engine Thread-2 : (105,)
2020-06-08 19:21:47,469 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:21:47,469 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:21:47,469 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:21:47,580 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:21:47,580 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:21:47,581 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:47,581 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:47,587 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:21:47,831 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 19:21:47,832 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:47,832 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 19:21:47,833 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:47,833 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:47,849 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 19:21:47,913 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 19:21:47,914 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:47,915 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 19:21:47,924 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:47,924 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:47,926 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 19:21:47,927 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 19:21:47,928 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:47,930 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 19:21:47,929 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 19:21:47,929 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 19:21:47,931 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:47,932 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:21:47,933 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 19:21:47,933 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 19:21:47,933 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:47,934 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:47,936 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:47,936 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:47,937 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:21:47,939 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:21:47,941 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 19:21:47,942 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 19:21:47,944 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 19:24:57,834 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:24:57,834 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:24:57,836 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:24:57,836 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:24:57,837 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:24:57,837 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:24:57,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:24:57,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:24:57,838 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:24:57,839 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:24:57,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:24:57,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:24:57,839 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:24:57,839 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:24:57,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:24:57,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:24:57,841 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:24:57,841 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:24:57,842 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:24:57,842 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:24:57,843 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:24:57,843 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:24:57,844 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:24:57,846 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:24:57,846 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:24:57,847 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:24:57,847 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:24:57,850 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:24:57,850 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:24:57,851 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:24:57,851 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:24:57,854 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:24:57,854 INFO sqlalchemy.engine.base.Engine Thread-2 : ('20', 1)
2020-06-08 19:24:57,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:24:57,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:24:57,860 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:24:57,860 INFO sqlalchemy.engine.base.Engine Thread-2 : (82,)
2020-06-08 19:24:57,861 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:24:57,861 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:24:57,861 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:24:57,862 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:24:57,863 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:24:57,863 INFO sqlalchemy.engine.base.Engine Thread-2 : (1,)
2020-06-08 19:24:57,864 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:24:57,864 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:24:57,864 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:24:57,866 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:24:57,867 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:24:57,867 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:24:57,867 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:24:57,867 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:24:57,869 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:24:57,869 INFO sqlalchemy.engine.base.Engine Thread-2 : (127,)
2020-06-08 19:24:57,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:24:57,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:24:57,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:24:57,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:24:57,870 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:24:57,872 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:24:57,872 INFO sqlalchemy.engine.base.Engine Thread-2 : (105,)
2020-06-08 19:24:57,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:24:57,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:24:57,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:24:57,981 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:24:57,982 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:24:57,982 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:24:57,982 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:24:57,987 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:24:58,337 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 19:24:58,338 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:24:58,339 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 19:24:58,339 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:24:58,340 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:24:58,353 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 19:24:58,424 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 19:24:58,428 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:24:58,428 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 19:24:58,431 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:24:58,431 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:24:58,437 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 19:24:58,437 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 19:24:58,438 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:24:58,438 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 19:24:58,439 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:24:58,439 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:24:58,442 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 19:24:58,442 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 19:24:58,443 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:24:58,443 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 19:24:58,444 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 19:24:58,444 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:24:58,445 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:24:58,446 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:24:58,446 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 19:24:58,448 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:24:58,449 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:24:58,451 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 19:24:58,452 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 19:25:02,965 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 19:25:02,966 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:02,966 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 19:25:02,967 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:02,968 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:02,970 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:25:02,970 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 19:25:02,970 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:02,970 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:02,979 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:25:02,979 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 19:25:02,980 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:25:02,981 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:25:02,982 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:25:02,982 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:25:02,982 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:25:02,982 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:25:03,001 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:25:03,001 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 19:25:03,002 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:03,002 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:03,005 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 19:25:03,248 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-08 19:25:03,249 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:03,249 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-08 19:25:03,250 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:03,250 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:03,252 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-08 19:25:03,335 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-08 19:25:03,336 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:03,336 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-06-08 19:25:03,339 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-08 19:25:03,340 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:03,340 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-08 19:25:03,341 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:03,341 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:03,343 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-08 19:25:03,344 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:03,347 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-08 19:25:03,347 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:03,349 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:03,354 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-08 19:25:03,354 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-08 19:25:03,353 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-08 19:25:03,355 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:03,356 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-08 19:25:03,356 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:03,357 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:03,358 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:03,359 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-08 19:25:03,360 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:03,363 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-08 19:25:04,327 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-08 19:25:04,328 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:04,328 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-08 19:25:04,329 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:04,329 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:04,331 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:25:04,332 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-08 19:25:04,332 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:04,333 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:04,334 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:25:04,334 INFO sqlalchemy.engine.base.Engine Thread-32 : ('20', 1)
2020-06-08 19:25:04,335 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:25:04,335 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:25:04,337 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:04,337 INFO sqlalchemy.engine.base.Engine Thread-32 : (82,)
2020-06-08 19:25:04,338 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:04,339 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:25:04,339 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:25:04,339 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:25:04,340 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:25:04,340 INFO sqlalchemy.engine.base.Engine Thread-32 : (1,)
2020-06-08 19:25:04,341 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:04,341 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:25:04,341 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:25:04,342 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:25:04,342 INFO sqlalchemy.engine.base.Engine Thread-32 : ()
2020-06-08 19:25:04,343 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:25:04,343 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:25:04,343 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:25:04,344 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:04,345 INFO sqlalchemy.engine.base.Engine Thread-32 : (127,)
2020-06-08 19:25:04,345 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:04,345 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:04,346 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:04,346 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:04,346 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:25:04,348 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:04,348 INFO sqlalchemy.engine.base.Engine Thread-32 : (105,)
2020-06-08 19:25:04,348 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:04,349 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:25:04,349 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:25:04,356 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:25:04,356 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-08 19:25:04,357 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:04,357 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:04,361 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-08 19:25:04,601 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-06-08 19:25:04,602 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:04,602 INFO sqlalchemy.engine.base.Engine Thread-42 : (1, 1)
2020-06-08 19:25:04,603 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:04,603 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:04,606 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-06-08 19:25:04,689 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-06-08 19:25:04,690 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:04,691 INFO sqlalchemy.engine.base.Engine Thread-43 : (1, 1)
2020-06-08 19:25:04,694 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-08 19:25:04,695 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:04,699 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:04,699 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-08 19:25:04,696 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:04,705 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-08 19:25:04,703 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-06-08 19:25:04,707 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:04,700 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:04,707 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-08 19:25:04,707 INFO sqlalchemy.engine.base.Engine Thread-46 : (1, 1)
2020-06-08 19:25:04,707 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:04,709 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:04,708 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:04,708 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:04,705 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-06-08 19:25:04,711 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-08 19:25:04,711 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:04,711 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:04,715 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-08 19:25:04,718 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-06-08 19:25:11,645 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-08 19:25:11,646 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:11,646 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-08 19:25:11,647 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:11,647 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:11,649 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:25:11,649 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-08 19:25:11,650 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:11,650 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:11,652 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:25:11,652 INFO sqlalchemy.engine.base.Engine Thread-47 : ('20', 1)
2020-06-08 19:25:11,652 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:25:11,652 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:25:11,655 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:11,655 INFO sqlalchemy.engine.base.Engine Thread-47 : (82,)
2020-06-08 19:25:11,656 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:11,656 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:25:11,656 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:25:11,656 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:25:11,657 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:25:11,657 INFO sqlalchemy.engine.base.Engine Thread-47 : (1,)
2020-06-08 19:25:11,658 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:11,658 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:25:11,658 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:25:11,659 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:25:11,659 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-06-08 19:25:11,660 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:25:11,660 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:25:11,660 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:25:11,662 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:11,662 INFO sqlalchemy.engine.base.Engine Thread-47 : (127,)
2020-06-08 19:25:11,662 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:11,662 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:11,662 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:11,663 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:11,663 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:25:11,664 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:11,664 INFO sqlalchemy.engine.base.Engine Thread-47 : (105,)
2020-06-08 19:25:11,664 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:11,665 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:25:11,665 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:25:11,669 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:25:11,670 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-08 19:25:11,670 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:11,670 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:11,674 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-06-08 19:25:11,908 INFO sqlalchemy.engine.base.Engine Thread-57 : BEGIN (implicit)
2020-06-08 19:25:11,909 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:11,909 INFO sqlalchemy.engine.base.Engine Thread-57 : (1, 1)
2020-06-08 19:25:11,909 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:11,910 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:11,912 INFO sqlalchemy.engine.base.Engine Thread-57 : ROLLBACK
2020-06-08 19:25:11,979 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-08 19:25:11,980 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:11,980 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-06-08 19:25:11,981 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:11,981 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:11,984 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-08 19:25:11,985 INFO sqlalchemy.engine.base.Engine Thread-59 : BEGIN (implicit)
2020-06-08 19:25:11,989 INFO sqlalchemy.engine.base.Engine Thread-60 : BEGIN (implicit)
2020-06-08 19:25:11,991 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:11,992 INFO sqlalchemy.engine.base.Engine Thread-60 : (1, 1)
2020-06-08 19:25:11,990 INFO sqlalchemy.engine.base.Engine Thread-59 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:11,992 INFO sqlalchemy.engine.base.Engine Thread-59 : (1, 1)
2020-06-08 19:25:11,993 DEBUG sqlalchemy.engine.base.Engine Thread-59 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:11,993 DEBUG sqlalchemy.engine.base.Engine Thread-59 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:11,993 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:11,994 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:11,997 INFO sqlalchemy.engine.base.Engine Thread-60 : ROLLBACK
2020-06-08 19:25:11,999 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-06-08 19:25:12,001 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:12,000 INFO sqlalchemy.engine.base.Engine Thread-59 : ROLLBACK
2020-06-08 19:25:12,002 INFO sqlalchemy.engine.base.Engine Thread-61 : (1, 1)
2020-06-08 19:25:12,003 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:12,003 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:12,005 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-06-08 19:25:48,201 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-06-08 19:25:48,202 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:48,202 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-06-08 19:25:48,203 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:48,203 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:48,206 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:25:48,206 INFO sqlalchemy.engine.base.Engine Thread-62 : ('philip', 1, 1)
2020-06-08 19:25:48,206 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:48,207 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:48,208 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:25:48,209 INFO sqlalchemy.engine.base.Engine Thread-62 : ('20', 1)
2020-06-08 19:25:48,209 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:25:48,210 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:25:48,212 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:48,213 INFO sqlalchemy.engine.base.Engine Thread-62 : (82,)
2020-06-08 19:25:48,213 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:48,214 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:25:48,214 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:25:48,214 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:25:48,215 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:25:48,215 INFO sqlalchemy.engine.base.Engine Thread-62 : (1,)
2020-06-08 19:25:48,216 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:48,216 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:25:48,216 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:25:48,217 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:25:48,217 INFO sqlalchemy.engine.base.Engine Thread-62 : ()
2020-06-08 19:25:48,218 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:25:48,218 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:25:48,218 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:25:48,219 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:48,219 INFO sqlalchemy.engine.base.Engine Thread-62 : (127,)
2020-06-08 19:25:48,220 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:48,220 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:48,220 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:48,220 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:25:48,220 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:25:48,222 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:25:48,222 INFO sqlalchemy.engine.base.Engine Thread-62 : (105,)
2020-06-08 19:25:48,222 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:25:48,222 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:25:48,223 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:25:48,227 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:25:48,227 INFO sqlalchemy.engine.base.Engine Thread-62 : ('philip', 1, 1)
2020-06-08 19:25:48,228 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:48,228 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:48,232 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-06-08 19:25:48,470 INFO sqlalchemy.engine.base.Engine Thread-72 : BEGIN (implicit)
2020-06-08 19:25:48,471 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:48,471 INFO sqlalchemy.engine.base.Engine Thread-72 : (1, 1)
2020-06-08 19:25:48,472 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:48,472 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:48,474 INFO sqlalchemy.engine.base.Engine Thread-72 : ROLLBACK
2020-06-08 19:25:48,551 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-06-08 19:25:48,553 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-06-08 19:25:48,557 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:48,560 INFO sqlalchemy.engine.base.Engine Thread-74 : (1, 1)
2020-06-08 19:25:48,560 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:48,560 INFO sqlalchemy.engine.base.Engine Thread-76 : (1, 1)
2020-06-08 19:25:48,558 INFO sqlalchemy.engine.base.Engine Thread-73 : BEGIN (implicit)
2020-06-08 19:25:48,561 INFO sqlalchemy.engine.base.Engine Thread-75 : BEGIN (implicit)
2020-06-08 19:25:48,563 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:48,564 INFO sqlalchemy.engine.base.Engine Thread-73 : (1, 1)
2020-06-08 19:25:48,564 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:25:48,564 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:48,565 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:48,565 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:48,568 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:48,563 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:48,569 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:48,565 INFO sqlalchemy.engine.base.Engine Thread-75 : (1, 1)
2020-06-08 19:25:48,568 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-06-08 19:25:48,571 INFO sqlalchemy.engine.base.Engine Thread-73 : ROLLBACK
2020-06-08 19:25:48,572 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-06-08 19:25:48,573 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:25:48,574 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:25:48,577 INFO sqlalchemy.engine.base.Engine Thread-75 : ROLLBACK
2020-06-08 19:30:37,027 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:30:37,027 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:30:37,029 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:30:37,029 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:30:37,030 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:30:37,030 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:30:37,031 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:30:37,031 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:30:37,031 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:30:37,031 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:30:37,032 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:30:37,032 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:30:37,032 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:30:37,032 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:30:37,033 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:30:37,033 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:30:37,034 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:30:37,034 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:30:37,035 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:30:37,035 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:30:37,036 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:30:37,036 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:30:37,036 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:30:37,039 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:37,039 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:30:37,040 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:37,040 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:37,043 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:30:37,043 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:30:37,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:37,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:37,047 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:30:37,047 INFO sqlalchemy.engine.base.Engine Thread-2 : ('20', 1)
2020-06-08 19:30:37,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:30:37,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:30:37,053 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:37,054 INFO sqlalchemy.engine.base.Engine Thread-2 : (82,)
2020-06-08 19:30:37,054 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:37,055 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:30:37,055 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:30:37,055 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:30:37,056 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:30:37,056 INFO sqlalchemy.engine.base.Engine Thread-2 : (1,)
2020-06-08 19:30:37,057 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:37,057 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:30:37,057 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:30:37,059 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:30:37,059 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:30:37,060 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:30:37,060 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:30:37,060 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:30:37,062 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:37,062 INFO sqlalchemy.engine.base.Engine Thread-2 : (127,)
2020-06-08 19:30:37,063 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:37,063 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:37,063 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:37,063 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:37,063 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:30:37,064 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:37,065 INFO sqlalchemy.engine.base.Engine Thread-2 : (105,)
2020-06-08 19:30:37,065 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:37,065 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:30:37,065 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:30:37,175 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:30:37,175 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:30:37,176 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:37,176 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:37,181 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:30:37,580 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 19:30:37,581 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:37,581 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 19:30:37,583 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:37,586 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:37,588 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 19:30:37,590 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:37,590 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 19:30:37,590 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 19:30:37,591 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:37,591 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 19:30:37,592 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:37,592 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:37,615 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 19:30:37,616 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 19:30:37,617 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:37,620 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 19:30:37,621 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:37,622 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:37,627 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 19:30:37,627 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 19:30:37,628 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:37,629 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 19:30:37,630 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:37,633 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:37,630 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 19:30:37,635 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 19:30:37,638 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:37,638 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:37,641 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 19:30:47,755 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 19:30:47,756 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:47,756 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 19:30:47,757 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:47,757 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:47,759 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:30:47,759 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 19:30:47,760 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:47,760 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:47,761 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:30:47,761 INFO sqlalchemy.engine.base.Engine Thread-17 : ('20', 1)
2020-06-08 19:30:47,762 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:30:47,762 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:30:47,765 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:47,765 INFO sqlalchemy.engine.base.Engine Thread-17 : (82,)
2020-06-08 19:30:47,766 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:47,766 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:30:47,766 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:30:47,766 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:30:47,767 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:30:47,767 INFO sqlalchemy.engine.base.Engine Thread-17 : (1,)
2020-06-08 19:30:47,768 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:47,768 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:30:47,768 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:30:47,769 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:30:47,769 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 19:30:47,770 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:30:47,770 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:30:47,770 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:30:47,771 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:47,771 INFO sqlalchemy.engine.base.Engine Thread-17 : (127,)
2020-06-08 19:30:47,772 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:47,772 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:47,772 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:47,772 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:47,772 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:30:47,773 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:47,773 INFO sqlalchemy.engine.base.Engine Thread-17 : (105,)
2020-06-08 19:30:47,774 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:47,774 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:30:47,774 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:30:47,778 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:30:47,778 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 19:30:47,779 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:47,779 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:47,783 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 19:30:48,132 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-08 19:30:48,133 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:48,133 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-08 19:30:48,133 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:48,134 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:48,136 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-08 19:30:48,220 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-08 19:30:48,222 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:48,222 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-08 19:30:48,225 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-08 19:30:48,226 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:48,226 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-08 19:30:48,229 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-08 19:30:48,230 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:48,230 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-06-08 19:30:48,231 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:48,231 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:48,232 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:48,235 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:48,232 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:48,232 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:48,238 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-08 19:30:48,240 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-08 19:30:48,242 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-08 19:30:48,243 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-08 19:30:48,244 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:48,244 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-08 19:30:48,246 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:48,246 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:48,249 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-08 19:30:51,269 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-08 19:30:51,270 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:51,270 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-08 19:30:51,271 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:51,271 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:51,273 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:30:51,273 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-08 19:30:51,274 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:51,274 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:51,275 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:30:51,275 INFO sqlalchemy.engine.base.Engine Thread-32 : ('20', 1)
2020-06-08 19:30:51,276 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:30:51,276 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:30:51,279 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:51,279 INFO sqlalchemy.engine.base.Engine Thread-32 : (82,)
2020-06-08 19:30:51,280 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:51,280 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:30:51,280 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:30:51,280 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:30:51,281 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:30:51,282 INFO sqlalchemy.engine.base.Engine Thread-32 : (1,)
2020-06-08 19:30:51,282 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:51,282 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:30:51,282 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:30:51,283 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:30:51,284 INFO sqlalchemy.engine.base.Engine Thread-32 : ()
2020-06-08 19:30:51,284 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:30:51,284 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:30:51,284 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:30:51,286 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:51,286 INFO sqlalchemy.engine.base.Engine Thread-32 : (127,)
2020-06-08 19:30:51,286 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:51,286 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:51,287 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:51,287 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:51,287 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:30:51,288 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:51,288 INFO sqlalchemy.engine.base.Engine Thread-32 : (105,)
2020-06-08 19:30:51,289 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:51,289 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:30:51,289 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:30:51,294 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:30:51,294 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-08 19:30:51,295 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:51,295 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:51,300 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-08 19:30:51,539 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-06-08 19:30:51,540 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:51,540 INFO sqlalchemy.engine.base.Engine Thread-42 : (1, 1)
2020-06-08 19:30:51,541 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:51,541 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:51,543 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-06-08 19:30:51,641 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-06-08 19:30:51,644 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-08 19:30:51,645 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:51,646 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:51,649 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-08 19:30:51,651 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-06-08 19:30:51,651 INFO sqlalchemy.engine.base.Engine Thread-43 : (1, 1)
2020-06-08 19:30:51,652 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-08 19:30:51,654 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:51,654 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:51,652 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:51,657 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-08 19:30:51,655 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:51,657 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:51,653 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:51,658 INFO sqlalchemy.engine.base.Engine Thread-46 : (1, 1)
2020-06-08 19:30:51,657 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-08 19:30:51,658 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:51,659 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:51,658 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:51,662 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:51,664 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-06-08 19:30:51,665 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-08 19:30:51,668 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-06-08 19:30:55,313 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-08 19:30:55,314 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:55,314 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-08 19:30:55,315 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:55,315 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:55,318 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:30:55,318 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-08 19:30:55,318 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:55,319 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:55,320 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:30:55,320 INFO sqlalchemy.engine.base.Engine Thread-47 : ('20', 1)
2020-06-08 19:30:55,321 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:30:55,321 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:30:55,324 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:55,324 INFO sqlalchemy.engine.base.Engine Thread-47 : (82,)
2020-06-08 19:30:55,325 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:55,325 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:30:55,325 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:30:55,325 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:30:55,327 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:30:55,327 INFO sqlalchemy.engine.base.Engine Thread-47 : (1,)
2020-06-08 19:30:55,327 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:55,327 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:30:55,328 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:30:55,329 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:30:55,329 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-06-08 19:30:55,329 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:30:55,330 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:30:55,330 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:30:55,331 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:55,331 INFO sqlalchemy.engine.base.Engine Thread-47 : (127,)
2020-06-08 19:30:55,332 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:55,332 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:55,332 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:55,332 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:30:55,332 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:30:55,333 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:30:55,334 INFO sqlalchemy.engine.base.Engine Thread-47 : (105,)
2020-06-08 19:30:55,334 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:30:55,334 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:30:55,334 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:30:55,339 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:30:55,340 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-08 19:30:55,340 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:55,340 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:55,345 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-06-08 19:30:55,689 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-08 19:30:55,690 INFO sqlalchemy.engine.base.Engine Thread-57 : BEGIN (implicit)
2020-06-08 19:30:55,693 INFO sqlalchemy.engine.base.Engine Thread-59 : BEGIN (implicit)
2020-06-08 19:30:55,697 INFO sqlalchemy.engine.base.Engine Thread-59 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:55,696 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:55,697 INFO sqlalchemy.engine.base.Engine Thread-57 : (1, 1)
2020-06-08 19:30:55,697 INFO sqlalchemy.engine.base.Engine Thread-59 : (1, 1)
2020-06-08 19:30:55,694 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:55,698 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-06-08 19:30:55,698 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:55,699 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:55,699 DEBUG sqlalchemy.engine.base.Engine Thread-59 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:55,702 DEBUG sqlalchemy.engine.base.Engine Thread-59 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:55,699 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:55,705 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:55,705 INFO sqlalchemy.engine.base.Engine Thread-59 : ROLLBACK
2020-06-08 19:30:55,702 INFO sqlalchemy.engine.base.Engine Thread-60 : BEGIN (implicit)
2020-06-08 19:30:55,707 INFO sqlalchemy.engine.base.Engine Thread-57 : ROLLBACK
2020-06-08 19:30:55,711 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:55,713 INFO sqlalchemy.engine.base.Engine Thread-60 : (1, 1)
2020-06-08 19:30:55,712 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-08 19:30:55,714 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:55,715 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-06-08 19:30:55,715 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:55,717 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:30:55,717 INFO sqlalchemy.engine.base.Engine Thread-61 : (1, 1)
2020-06-08 19:30:55,719 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:30:55,720 INFO sqlalchemy.engine.base.Engine Thread-60 : ROLLBACK
2020-06-08 19:30:55,720 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:30:55,723 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-06-08 19:31:00,809 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-06-08 19:31:00,810 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:00,810 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-06-08 19:31:00,811 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:00,811 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:00,814 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:31:00,814 INFO sqlalchemy.engine.base.Engine Thread-62 : ('philip', 1, 1)
2020-06-08 19:31:00,815 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:00,815 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:00,816 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:31:00,816 INFO sqlalchemy.engine.base.Engine Thread-62 : ('20', 1)
2020-06-08 19:31:00,817 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:31:00,817 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:31:00,820 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:00,821 INFO sqlalchemy.engine.base.Engine Thread-62 : (82,)
2020-06-08 19:31:00,821 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:00,821 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:31:00,822 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:31:00,822 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:31:00,823 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:31:00,823 INFO sqlalchemy.engine.base.Engine Thread-62 : (1,)
2020-06-08 19:31:00,824 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:00,824 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:31:00,824 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:31:00,825 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:31:00,825 INFO sqlalchemy.engine.base.Engine Thread-62 : ()
2020-06-08 19:31:00,826 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:31:00,826 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:31:00,826 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:31:00,827 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:00,827 INFO sqlalchemy.engine.base.Engine Thread-62 : (127,)
2020-06-08 19:31:00,828 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:00,828 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:00,828 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:00,828 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:00,828 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:31:00,829 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:00,830 INFO sqlalchemy.engine.base.Engine Thread-62 : (105,)
2020-06-08 19:31:00,830 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:00,830 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:31:00,830 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:31:00,835 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:31:00,835 INFO sqlalchemy.engine.base.Engine Thread-62 : ('philip', 1, 1)
2020-06-08 19:31:00,836 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:00,836 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:00,840 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-06-08 19:31:01,072 INFO sqlalchemy.engine.base.Engine Thread-72 : BEGIN (implicit)
2020-06-08 19:31:01,074 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:01,074 INFO sqlalchemy.engine.base.Engine Thread-72 : (1, 1)
2020-06-08 19:31:01,074 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:01,075 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:01,077 INFO sqlalchemy.engine.base.Engine Thread-72 : ROLLBACK
2020-06-08 19:31:01,170 INFO sqlalchemy.engine.base.Engine Thread-73 : BEGIN (implicit)
2020-06-08 19:31:01,172 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:01,175 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-06-08 19:31:01,175 INFO sqlalchemy.engine.base.Engine Thread-73 : (1, 1)
2020-06-08 19:31:01,178 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:01,180 INFO sqlalchemy.engine.base.Engine Thread-74 : (1, 1)
2020-06-08 19:31:01,179 INFO sqlalchemy.engine.base.Engine Thread-75 : BEGIN (implicit)
2020-06-08 19:31:01,184 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:01,181 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:01,185 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:01,185 INFO sqlalchemy.engine.base.Engine Thread-75 : (1, 1)
2020-06-08 19:31:01,180 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:01,184 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-06-08 19:31:01,187 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:01,187 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:01,191 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:01,189 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-06-08 19:31:01,191 INFO sqlalchemy.engine.base.Engine Thread-73 : ROLLBACK
2020-06-08 19:31:01,188 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:01,194 INFO sqlalchemy.engine.base.Engine Thread-76 : (1, 1)
2020-06-08 19:31:01,193 INFO sqlalchemy.engine.base.Engine Thread-75 : ROLLBACK
2020-06-08 19:31:01,195 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:01,196 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:01,198 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-06-08 19:31:09,379 INFO sqlalchemy.engine.base.Engine Thread-77 : BEGIN (implicit)
2020-06-08 19:31:09,380 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:09,380 INFO sqlalchemy.engine.base.Engine Thread-77 : (1, 1)
2020-06-08 19:31:09,381 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:09,381 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:09,383 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:31:09,383 INFO sqlalchemy.engine.base.Engine Thread-77 : ('philip', 1, 1)
2020-06-08 19:31:09,384 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:09,384 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:09,385 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:31:09,385 INFO sqlalchemy.engine.base.Engine Thread-77 : ('20', 1)
2020-06-08 19:31:09,386 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:31:09,386 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:31:09,388 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:09,389 INFO sqlalchemy.engine.base.Engine Thread-77 : (82,)
2020-06-08 19:31:09,389 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:09,389 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:31:09,389 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:31:09,389 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:31:09,391 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:31:09,391 INFO sqlalchemy.engine.base.Engine Thread-77 : (1,)
2020-06-08 19:31:09,391 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:09,393 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:31:09,393 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:31:09,394 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:31:09,394 INFO sqlalchemy.engine.base.Engine Thread-77 : ()
2020-06-08 19:31:09,395 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:31:09,395 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:31:09,395 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:31:09,396 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:09,396 INFO sqlalchemy.engine.base.Engine Thread-77 : (127,)
2020-06-08 19:31:09,397 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:09,397 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:09,397 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:09,397 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:09,397 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:31:09,398 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:09,398 INFO sqlalchemy.engine.base.Engine Thread-77 : (105,)
2020-06-08 19:31:09,399 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:09,399 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:31:09,399 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:31:09,404 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:31:09,404 INFO sqlalchemy.engine.base.Engine Thread-77 : ('philip', 1, 1)
2020-06-08 19:31:09,404 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:09,405 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:09,408 INFO sqlalchemy.engine.base.Engine Thread-77 : ROLLBACK
2020-06-08 19:31:09,743 INFO sqlalchemy.engine.base.Engine Thread-87 : BEGIN (implicit)
2020-06-08 19:31:09,744 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:09,744 INFO sqlalchemy.engine.base.Engine Thread-87 : (1, 1)
2020-06-08 19:31:09,745 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:09,745 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:09,747 INFO sqlalchemy.engine.base.Engine Thread-87 : ROLLBACK
2020-06-08 19:31:09,805 INFO sqlalchemy.engine.base.Engine Thread-88 : BEGIN (implicit)
2020-06-08 19:31:09,806 INFO sqlalchemy.engine.base.Engine Thread-88 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:09,806 INFO sqlalchemy.engine.base.Engine Thread-88 : (1, 1)
2020-06-08 19:31:09,807 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:09,807 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:09,809 INFO sqlalchemy.engine.base.Engine Thread-88 : ROLLBACK
2020-06-08 19:31:09,811 INFO sqlalchemy.engine.base.Engine Thread-89 : BEGIN (implicit)
2020-06-08 19:31:09,812 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:09,812 INFO sqlalchemy.engine.base.Engine Thread-89 : (1, 1)
2020-06-08 19:31:09,815 INFO sqlalchemy.engine.base.Engine Thread-90 : BEGIN (implicit)
2020-06-08 19:31:09,817 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:09,817 INFO sqlalchemy.engine.base.Engine Thread-90 : (1, 1)
2020-06-08 19:31:09,817 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:09,817 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:09,820 INFO sqlalchemy.engine.base.Engine Thread-91 : BEGIN (implicit)
2020-06-08 19:31:09,821 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:09,821 INFO sqlalchemy.engine.base.Engine Thread-91 : (1, 1)
2020-06-08 19:31:09,822 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:09,822 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:09,824 INFO sqlalchemy.engine.base.Engine Thread-91 : ROLLBACK
2020-06-08 19:31:09,826 INFO sqlalchemy.engine.base.Engine Thread-89 : ROLLBACK
2020-06-08 19:31:09,828 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:09,828 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:09,830 INFO sqlalchemy.engine.base.Engine Thread-90 : ROLLBACK
2020-06-08 19:31:35,354 INFO sqlalchemy.engine.base.Engine Thread-92 : BEGIN (implicit)
2020-06-08 19:31:35,356 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:35,356 INFO sqlalchemy.engine.base.Engine Thread-92 : (1, 1)
2020-06-08 19:31:35,356 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:35,357 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:35,359 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:31:35,359 INFO sqlalchemy.engine.base.Engine Thread-92 : ('philip', 1, 1)
2020-06-08 19:31:35,360 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:35,360 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:35,361 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:31:35,361 INFO sqlalchemy.engine.base.Engine Thread-92 : ('20', 1)
2020-06-08 19:31:35,362 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:31:35,362 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:31:35,365 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:35,365 INFO sqlalchemy.engine.base.Engine Thread-92 : (82,)
2020-06-08 19:31:35,365 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:35,365 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:31:35,366 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:31:35,366 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:31:35,367 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:31:35,367 INFO sqlalchemy.engine.base.Engine Thread-92 : (1,)
2020-06-08 19:31:35,367 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:35,368 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:31:35,368 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:31:35,369 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:31:35,369 INFO sqlalchemy.engine.base.Engine Thread-92 : ()
2020-06-08 19:31:35,369 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:31:35,370 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:31:35,370 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:31:35,371 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:35,371 INFO sqlalchemy.engine.base.Engine Thread-92 : (127,)
2020-06-08 19:31:35,371 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:35,372 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:35,372 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:35,372 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:31:35,372 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:31:35,373 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:31:35,373 INFO sqlalchemy.engine.base.Engine Thread-92 : (105,)
2020-06-08 19:31:35,374 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:31:35,374 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:31:35,374 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:31:35,379 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:31:35,379 INFO sqlalchemy.engine.base.Engine Thread-92 : ('philip', 1, 1)
2020-06-08 19:31:35,380 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:35,380 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:35,384 INFO sqlalchemy.engine.base.Engine Thread-92 : ROLLBACK
2020-06-08 19:31:35,517 INFO sqlalchemy.engine.base.Engine Thread-93 : BEGIN (implicit)
2020-06-08 19:31:35,518 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:31:35,518 INFO sqlalchemy.engine.base.Engine Thread-93 : (1, 1)
2020-06-08 19:31:35,519 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:31:35,519 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:31:35,521 INFO sqlalchemy.engine.base.Engine Thread-93 : ROLLBACK
2020-06-08 19:33:16,891 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:33:16,891 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:33:16,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:33:16,893 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:33:16,894 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:33:16,894 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:33:16,894 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:33:16,894 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:33:16,895 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:33:16,895 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:33:16,895 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:33:16,895 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:33:16,896 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:33:16,896 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:33:16,896 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:33:16,897 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:33:16,897 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:33:16,898 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:33:16,898 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:33:16,898 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:33:16,899 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:33:16,899 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:33:16,899 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:33:16,902 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:16,902 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:33:16,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:16,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:16,906 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:33:16,906 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:33:16,907 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:16,907 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:16,917 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:33:16,917 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:33:16,918 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:33:16,918 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:33:16,918 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:33:16,918 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:33:16,919 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:33:16,995 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:33:16,995 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:33:16,996 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:16,996 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:17,000 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:33:17,266 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 19:33:17,267 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:17,267 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 19:33:17,268 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:17,268 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:17,280 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 19:33:17,355 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 19:33:17,356 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:17,356 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 19:33:17,357 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:17,357 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:17,359 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 19:33:17,366 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 19:33:17,370 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:17,370 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 19:33:17,370 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:17,371 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:17,373 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 19:33:17,374 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 19:33:17,375 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:17,375 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 19:33:17,375 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 19:33:17,377 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:17,377 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 19:33:17,378 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:17,378 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:17,380 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:17,381 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 19:33:17,381 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:17,384 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 19:33:18,441 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 19:33:18,442 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:18,443 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 19:33:18,443 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:18,444 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:18,446 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:33:18,446 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 19:33:18,447 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:18,447 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:18,449 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:33:18,449 INFO sqlalchemy.engine.base.Engine Thread-17 : ('20', 1)
2020-06-08 19:33:18,450 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:33:18,450 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:33:18,454 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:33:18,454 INFO sqlalchemy.engine.base.Engine Thread-17 : (82,)
2020-06-08 19:33:18,454 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:33:18,454 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:33:18,455 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:33:18,455 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:33:18,456 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:33:18,456 INFO sqlalchemy.engine.base.Engine Thread-17 : (1,)
2020-06-08 19:33:18,457 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:33:18,457 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:33:18,457 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:33:18,459 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:33:18,459 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 19:33:18,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:33:18,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:33:18,466 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:33:18,468 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:33:18,468 INFO sqlalchemy.engine.base.Engine Thread-17 : (127,)
2020-06-08 19:33:18,469 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:33:18,469 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:33:18,469 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:33:18,469 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:33:18,470 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:33:18,471 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:33:18,471 INFO sqlalchemy.engine.base.Engine Thread-17 : (105,)
2020-06-08 19:33:18,472 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:33:18,472 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:33:18,472 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:33:18,510 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:33:18,511 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 19:33:18,511 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:18,512 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:18,515 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 19:33:18,855 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-08 19:33:18,856 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:18,856 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-06-08 19:33:18,859 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-08 19:33:18,860 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:18,863 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-08 19:33:18,864 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-08 19:33:18,864 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:18,865 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:18,870 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:18,870 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:18,871 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:18,870 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-08 19:33:18,873 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:18,873 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-08 19:33:18,870 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-08 19:33:18,875 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-08 19:33:18,876 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:18,877 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:18,877 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:18,879 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:18,879 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-08 19:33:18,882 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-08 19:33:18,885 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-08 19:33:18,887 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-08 19:33:18,889 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:18,889 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-08 19:33:18,890 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:18,890 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:18,892 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-08 19:33:24,891 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-08 19:33:24,892 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:24,892 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-08 19:33:24,893 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:24,893 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:24,896 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:33:24,896 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-08 19:33:24,897 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:24,897 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:24,898 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:33:24,898 INFO sqlalchemy.engine.base.Engine Thread-32 : ('20', 1)
2020-06-08 19:33:24,899 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:33:24,899 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:33:24,903 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:33:24,903 INFO sqlalchemy.engine.base.Engine Thread-32 : (82,)
2020-06-08 19:33:24,904 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:33:24,904 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:33:24,904 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:33:24,904 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:33:24,905 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:33:24,906 INFO sqlalchemy.engine.base.Engine Thread-32 : (1,)
2020-06-08 19:33:24,906 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:33:24,906 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:33:24,906 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:33:24,907 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:33:24,907 INFO sqlalchemy.engine.base.Engine Thread-32 : ()
2020-06-08 19:33:24,908 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:33:24,908 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:33:24,908 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:33:24,909 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:33:24,910 INFO sqlalchemy.engine.base.Engine Thread-32 : (127,)
2020-06-08 19:33:24,910 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:33:24,910 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:33:24,910 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:33:24,910 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:33:24,911 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:33:24,912 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:33:24,912 INFO sqlalchemy.engine.base.Engine Thread-32 : (105,)
2020-06-08 19:33:24,912 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:33:24,913 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:33:24,913 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:33:24,919 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:33:24,919 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-08 19:33:24,920 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:24,920 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:24,924 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-08 19:33:25,188 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-06-08 19:33:25,189 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:25,189 INFO sqlalchemy.engine.base.Engine Thread-42 : (1, 1)
2020-06-08 19:33:25,190 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:25,190 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:25,192 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-06-08 19:33:25,260 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-06-08 19:33:25,261 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:25,261 INFO sqlalchemy.engine.base.Engine Thread-43 : (1, 1)
2020-06-08 19:33:25,265 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-08 19:33:25,267 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-08 19:33:25,267 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:25,272 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:25,271 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-06-08 19:33:25,272 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:25,276 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-08 19:33:25,275 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:25,276 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-06-08 19:33:25,269 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:33:25,277 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-08 19:33:25,276 INFO sqlalchemy.engine.base.Engine Thread-46 : (1, 1)
2020-06-08 19:33:25,277 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:25,278 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:25,279 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:25,279 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:25,278 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:33:25,283 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:33:25,286 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-08 19:33:25,284 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-08 19:33:25,281 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-06-08 19:34:01,858 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-08 19:34:01,859 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:34:01,859 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-08 19:34:01,860 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:34:01,860 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:34:01,862 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:34:01,862 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-08 19:34:01,863 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:34:01,863 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:34:01,864 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:34:01,865 INFO sqlalchemy.engine.base.Engine Thread-47 : ('20', 1)
2020-06-08 19:34:01,865 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:34:01,865 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:34:01,868 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:34:01,868 INFO sqlalchemy.engine.base.Engine Thread-47 : (82,)
2020-06-08 19:34:01,868 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:34:01,869 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:34:01,869 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:34:01,869 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:34:01,870 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:34:01,870 INFO sqlalchemy.engine.base.Engine Thread-47 : (1,)
2020-06-08 19:34:01,871 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:34:01,871 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:34:01,871 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:34:01,872 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:34:01,872 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-06-08 19:34:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:34:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:34:01,873 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:34:01,874 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:34:01,874 INFO sqlalchemy.engine.base.Engine Thread-47 : (127,)
2020-06-08 19:34:01,875 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:34:01,875 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:34:01,875 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:34:01,875 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:34:01,875 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:34:01,876 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:34:01,877 INFO sqlalchemy.engine.base.Engine Thread-47 : (105,)
2020-06-08 19:34:01,877 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:34:01,877 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:34:01,877 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:34:01,882 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:34:01,882 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-08 19:34:01,883 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:34:01,883 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:34:01,887 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-06-08 19:34:02,021 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-06-08 19:34:02,022 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:34:02,022 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-06-08 19:34:02,022 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:34:02,023 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:34:02,024 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-06-08 19:35:09,389 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:35:09,389 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:35:09,390 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:35:09,390 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:35:09,391 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:35:09,391 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:35:09,392 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:35:09,392 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:35:09,392 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:35:09,392 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:35:09,392 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:35:09,393 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:35:09,393 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:35:09,393 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:35:09,394 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:35:09,394 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:35:09,395 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:35:09,395 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:35:09,395 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:35:09,395 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:35:09,396 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:35:09,396 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:35:09,397 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:35:09,399 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:09,399 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:35:09,400 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:09,400 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:09,403 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:09,403 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:35:09,404 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:09,404 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:09,415 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:35:09,415 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:35:09,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:35:09,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:09,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:09,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:35:09,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:09,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:35:09,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:09,500 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:09,500 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 19:35:09,501 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:09,501 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:09,506 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:35:09,878 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 19:35:09,880 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:09,880 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 19:35:09,881 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:09,881 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:09,893 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 19:35:10,088 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 19:35:10,089 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:10,089 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 19:35:10,092 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:10,092 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:10,098 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 19:35:10,100 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 19:35:10,102 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:10,102 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 19:35:10,103 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 19:35:10,104 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:10,104 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 19:35:10,104 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:10,105 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:10,105 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:10,105 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:10,109 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 19:35:10,110 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 19:35:10,110 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 19:35:10,111 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:10,111 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 19:35:10,112 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:10,113 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:10,115 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 19:35:11,026 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 19:35:11,027 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:11,027 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 19:35:11,028 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:11,028 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:11,031 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:11,031 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 19:35:11,031 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:11,031 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:11,034 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:35:11,034 INFO sqlalchemy.engine.base.Engine Thread-17 : ('20', 1)
2020-06-08 19:35:11,034 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:35:11,035 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:35:11,038 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:11,038 INFO sqlalchemy.engine.base.Engine Thread-17 : (82,)
2020-06-08 19:35:11,038 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:11,039 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:35:11,039 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:35:11,039 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:35:11,040 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:35:11,040 INFO sqlalchemy.engine.base.Engine Thread-17 : (1,)
2020-06-08 19:35:11,041 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:11,041 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:35:11,041 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:35:11,043 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:35:11,044 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 19:35:11,044 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:35:11,044 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:35:11,044 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:35:11,046 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:11,046 INFO sqlalchemy.engine.base.Engine Thread-17 : (127,)
2020-06-08 19:35:11,046 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:11,047 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:11,047 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:11,047 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:11,047 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:35:11,048 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:11,048 INFO sqlalchemy.engine.base.Engine Thread-17 : (105,)
2020-06-08 19:35:11,049 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:11,049 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:35:11,049 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:35:11,089 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:11,089 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 19:35:11,090 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:11,091 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:11,095 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 19:35:11,429 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-08 19:35:11,430 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:11,430 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-08 19:35:11,433 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-06-08 19:35:11,434 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:11,434 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-06-08 19:35:11,435 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:11,435 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:11,435 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:11,436 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:11,439 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-08 19:35:11,443 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-08 19:35:11,445 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:11,446 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-06-08 19:35:11,449 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-08 19:35:11,450 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-08 19:35:11,453 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-08 19:35:11,456 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:11,457 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-08 19:35:11,456 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:11,455 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:11,457 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:11,457 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-08 19:35:11,459 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:11,460 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-06-08 19:35:11,467 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:11,467 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:11,468 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:11,471 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-06-08 19:35:11,472 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-08 19:35:13,227 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-08 19:35:13,228 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:13,228 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-08 19:35:13,229 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,229 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,231 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:13,231 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-08 19:35:13,232 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,232 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,234 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:35:13,234 INFO sqlalchemy.engine.base.Engine Thread-32 : ('20', 1)
2020-06-08 19:35:13,235 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:35:13,235 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:35:13,240 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:13,240 INFO sqlalchemy.engine.base.Engine Thread-32 : (82,)
2020-06-08 19:35:13,241 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:13,241 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:35:13,241 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:35:13,241 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:35:13,243 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:35:13,243 INFO sqlalchemy.engine.base.Engine Thread-32 : (1,)
2020-06-08 19:35:13,243 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:13,243 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:35:13,244 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:35:13,245 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:35:13,245 INFO sqlalchemy.engine.base.Engine Thread-32 : ()
2020-06-08 19:35:13,245 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:35:13,246 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:35:13,246 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:35:13,247 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:13,247 INFO sqlalchemy.engine.base.Engine Thread-32 : (127,)
2020-06-08 19:35:13,248 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:13,248 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:13,248 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:13,248 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:13,248 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:35:13,249 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:13,250 INFO sqlalchemy.engine.base.Engine Thread-32 : (105,)
2020-06-08 19:35:13,250 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:13,250 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:35:13,250 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:35:13,255 INFO sqlalchemy.engine.base.Engine Thread-32 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-08 19:35:13,255 INFO sqlalchemy.engine.base.Engine Thread-32 : ('20', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 1, 20)
2020-06-08 19:35:13,256 INFO sqlalchemy.engine.base.Engine Thread-32 : COMMIT
2020-06-08 19:35:13,322 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-06-08 19:35:13,323 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:13,323 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-06-08 19:35:13,324 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,324 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,327 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:13,327 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-06-08 19:35:13,328 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,328 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,338 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:35:13,338 INFO sqlalchemy.engine.base.Engine Thread-33 : ()
2020-06-08 19:35:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:35:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:35:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:13,339 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:13,340 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:35:13,340 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:13,340 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:13,340 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:13,340 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:13,340 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:35:13,340 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:13,344 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:13,345 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-06-08 19:35:13,345 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,345 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,349 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-06-08 19:35:13,588 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-06-08 19:35:13,589 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:13,589 INFO sqlalchemy.engine.base.Engine Thread-43 : (1, 1)
2020-06-08 19:35:13,590 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,590 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,593 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-06-08 19:35:13,665 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-08 19:35:13,666 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:13,666 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-08 19:35:13,667 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,667 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,671 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-08 19:35:13,673 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-08 19:35:13,674 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:13,674 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-08 19:35:13,677 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-06-08 19:35:13,679 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:13,679 INFO sqlalchemy.engine.base.Engine Thread-46 : (1, 1)
2020-06-08 19:35:13,680 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,680 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,681 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,682 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,683 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-08 19:35:13,686 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-08 19:35:13,687 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:13,687 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-08 19:35:13,688 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:13,689 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:13,691 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-06-08 19:35:13,693 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-06-08 19:35:15,900 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-06-08 19:35:15,900 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:15,901 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-06-08 19:35:15,901 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:15,901 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:15,903 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:15,904 INFO sqlalchemy.engine.base.Engine Thread-48 : ('philip', 1, 1)
2020-06-08 19:35:15,904 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:15,904 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:15,906 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:35:15,906 INFO sqlalchemy.engine.base.Engine Thread-48 : ('20', 1)
2020-06-08 19:35:15,906 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:35:15,906 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:35:15,909 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:15,909 INFO sqlalchemy.engine.base.Engine Thread-48 : (82,)
2020-06-08 19:35:15,909 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:15,909 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:35:15,909 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:35:15,909 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:35:15,911 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:35:15,911 INFO sqlalchemy.engine.base.Engine Thread-48 : (1,)
2020-06-08 19:35:15,911 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:15,912 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:35:15,912 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:35:15,913 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:35:15,913 INFO sqlalchemy.engine.base.Engine Thread-48 : ()
2020-06-08 19:35:15,914 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:35:15,914 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:35:15,914 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:35:15,915 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:15,915 INFO sqlalchemy.engine.base.Engine Thread-48 : (127,)
2020-06-08 19:35:15,916 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:15,916 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:15,916 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:15,916 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:15,916 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:35:15,918 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:15,918 INFO sqlalchemy.engine.base.Engine Thread-48 : (105,)
2020-06-08 19:35:15,918 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:15,918 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:35:15,918 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:35:15,922 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:15,922 INFO sqlalchemy.engine.base.Engine Thread-48 : ('philip', 1, 1)
2020-06-08 19:35:15,923 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:15,923 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:15,927 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-06-08 19:35:16,271 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-08 19:35:16,274 INFO sqlalchemy.engine.base.Engine Thread-59 : BEGIN (implicit)
2020-06-08 19:35:16,275 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:16,277 INFO sqlalchemy.engine.base.Engine Thread-59 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:16,277 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-06-08 19:35:16,280 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-06-08 19:35:16,281 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:16,282 INFO sqlalchemy.engine.base.Engine Thread-61 : (1, 1)
2020-06-08 19:35:16,282 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:16,280 INFO sqlalchemy.engine.base.Engine Thread-59 : (1, 1)
2020-06-08 19:35:16,282 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:16,283 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:16,283 DEBUG sqlalchemy.engine.base.Engine Thread-59 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:16,285 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:16,286 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-08 19:35:16,286 DEBUG sqlalchemy.engine.base.Engine Thread-59 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:16,289 INFO sqlalchemy.engine.base.Engine Thread-60 : BEGIN (implicit)
2020-06-08 19:35:16,291 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-06-08 19:35:16,294 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-06-08 19:35:16,298 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:16,297 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:16,299 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-06-08 19:35:16,296 INFO sqlalchemy.engine.base.Engine Thread-59 : ROLLBACK
2020-06-08 19:35:16,299 INFO sqlalchemy.engine.base.Engine Thread-60 : (1, 1)
2020-06-08 19:35:16,300 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:16,301 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:16,301 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:16,303 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-06-08 19:35:16,304 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:16,306 INFO sqlalchemy.engine.base.Engine Thread-60 : ROLLBACK
2020-06-08 19:35:19,352 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-06-08 19:35:19,353 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:19,354 INFO sqlalchemy.engine.base.Engine Thread-63 : (1, 1)
2020-06-08 19:35:19,354 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,355 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,357 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:19,357 INFO sqlalchemy.engine.base.Engine Thread-63 : ('philip', 1, 1)
2020-06-08 19:35:19,358 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,358 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,360 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:35:19,360 INFO sqlalchemy.engine.base.Engine Thread-63 : ('20', 1)
2020-06-08 19:35:19,360 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:35:19,361 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:35:19,364 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:19,364 INFO sqlalchemy.engine.base.Engine Thread-63 : (82,)
2020-06-08 19:35:19,364 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:19,365 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:35:19,365 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:35:19,365 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:35:19,366 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:35:19,366 INFO sqlalchemy.engine.base.Engine Thread-63 : (1,)
2020-06-08 19:35:19,367 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:19,367 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:35:19,367 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:35:19,368 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:35:19,368 INFO sqlalchemy.engine.base.Engine Thread-63 : ()
2020-06-08 19:35:19,369 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:35:19,369 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:35:19,369 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:35:19,370 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:19,371 INFO sqlalchemy.engine.base.Engine Thread-63 : (127,)
2020-06-08 19:35:19,371 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:19,371 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:19,371 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:19,371 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:19,372 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:35:19,373 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:19,373 INFO sqlalchemy.engine.base.Engine Thread-63 : (105,)
2020-06-08 19:35:19,373 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:19,374 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:35:19,374 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:35:19,375 INFO sqlalchemy.engine.base.Engine Thread-63 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-08 19:35:19,375 INFO sqlalchemy.engine.base.Engine Thread-63 : ('20', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 2, 20)
2020-06-08 19:35:19,376 INFO sqlalchemy.engine.base.Engine Thread-63 : COMMIT
2020-06-08 19:35:19,427 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-06-08 19:35:19,428 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:19,428 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-06-08 19:35:19,428 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,429 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,431 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:19,431 INFO sqlalchemy.engine.base.Engine Thread-64 : ('philip', 1, 1)
2020-06-08 19:35:19,432 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,432 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,442 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:35:19,442 INFO sqlalchemy.engine.base.Engine Thread-64 : ()
2020-06-08 19:35:19,443 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:35:19,443 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:19,443 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:19,444 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:35:19,445 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:19,449 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:19,449 INFO sqlalchemy.engine.base.Engine Thread-64 : ('philip', 1, 1)
2020-06-08 19:35:19,450 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,450 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,454 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-06-08 19:35:19,773 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-06-08 19:35:19,774 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:19,774 INFO sqlalchemy.engine.base.Engine Thread-74 : (1, 1)
2020-06-08 19:35:19,777 INFO sqlalchemy.engine.base.Engine Thread-75 : BEGIN (implicit)
2020-06-08 19:35:19,778 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,779 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:19,781 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,782 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-06-08 19:35:19,792 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:19,792 INFO sqlalchemy.engine.base.Engine Thread-76 : (1, 1)
2020-06-08 19:35:19,788 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-06-08 19:35:19,783 INFO sqlalchemy.engine.base.Engine Thread-75 : (1, 1)
2020-06-08 19:35:19,785 INFO sqlalchemy.engine.base.Engine Thread-77 : BEGIN (implicit)
2020-06-08 19:35:19,793 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,795 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,794 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,798 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,793 INFO sqlalchemy.engine.base.Engine Thread-78 : BEGIN (implicit)
2020-06-08 19:35:19,799 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:19,795 INFO sqlalchemy.engine.base.Engine Thread-77 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:19,802 INFO sqlalchemy.engine.base.Engine Thread-77 : (1, 1)
2020-06-08 19:35:19,799 INFO sqlalchemy.engine.base.Engine Thread-78 : (1, 1)
2020-06-08 19:35:19,798 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-06-08 19:35:19,801 INFO sqlalchemy.engine.base.Engine Thread-75 : ROLLBACK
2020-06-08 19:35:19,803 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,803 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:19,804 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,805 DEBUG sqlalchemy.engine.base.Engine Thread-77 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:19,807 INFO sqlalchemy.engine.base.Engine Thread-78 : ROLLBACK
2020-06-08 19:35:19,809 INFO sqlalchemy.engine.base.Engine Thread-77 : ROLLBACK
2020-06-08 19:35:21,120 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-06-08 19:35:21,121 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:21,121 INFO sqlalchemy.engine.base.Engine Thread-79 : (1, 1)
2020-06-08 19:35:21,122 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:21,122 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:21,125 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:21,125 INFO sqlalchemy.engine.base.Engine Thread-79 : ('philip', 1, 1)
2020-06-08 19:35:21,126 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:21,126 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:21,128 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:35:21,128 INFO sqlalchemy.engine.base.Engine Thread-79 : ('20', 1)
2020-06-08 19:35:21,128 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:35:21,129 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-08 19:35:21,131 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:21,131 INFO sqlalchemy.engine.base.Engine Thread-79 : (82,)
2020-06-08 19:35:21,132 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:21,132 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:35:21,132 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:35:21,132 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:35:21,134 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:35:21,134 INFO sqlalchemy.engine.base.Engine Thread-79 : (1,)
2020-06-08 19:35:21,134 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:21,135 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:35:21,135 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:35:21,136 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:35:21,136 INFO sqlalchemy.engine.base.Engine Thread-79 : ()
2020-06-08 19:35:21,137 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:35:21,137 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:35:21,137 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:35:21,138 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:21,138 INFO sqlalchemy.engine.base.Engine Thread-79 : (127,)
2020-06-08 19:35:21,139 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:21,139 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:21,139 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:21,139 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:35:21,139 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:35:21,140 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:35:21,140 INFO sqlalchemy.engine.base.Engine Thread-79 : (105,)
2020-06-08 19:35:21,141 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:35:21,141 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:35:21,141 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:35:21,145 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:21,145 INFO sqlalchemy.engine.base.Engine Thread-79 : ('philip', 1, 1)
2020-06-08 19:35:21,146 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:21,146 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:21,150 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-06-08 19:35:21,387 INFO sqlalchemy.engine.base.Engine Thread-89 : BEGIN (implicit)
2020-06-08 19:35:21,388 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:21,388 INFO sqlalchemy.engine.base.Engine Thread-89 : (1, 1)
2020-06-08 19:35:21,389 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:21,390 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:21,392 INFO sqlalchemy.engine.base.Engine Thread-89 : ROLLBACK
2020-06-08 19:35:21,469 INFO sqlalchemy.engine.base.Engine Thread-90 : BEGIN (implicit)
2020-06-08 19:35:21,470 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:21,470 INFO sqlalchemy.engine.base.Engine Thread-90 : (1, 1)
2020-06-08 19:35:21,472 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:21,474 INFO sqlalchemy.engine.base.Engine Thread-91 : BEGIN (implicit)
2020-06-08 19:35:21,479 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:21,478 INFO sqlalchemy.engine.base.Engine Thread-92 : BEGIN (implicit)
2020-06-08 19:35:21,479 INFO sqlalchemy.engine.base.Engine Thread-91 : (1, 1)
2020-06-08 19:35:21,475 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:21,482 INFO sqlalchemy.engine.base.Engine Thread-93 : BEGIN (implicit)
2020-06-08 19:35:21,487 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:21,487 INFO sqlalchemy.engine.base.Engine Thread-93 : (1, 1)
2020-06-08 19:35:21,486 INFO sqlalchemy.engine.base.Engine Thread-90 : ROLLBACK
2020-06-08 19:35:21,485 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:21,488 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:21,483 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:21,491 INFO sqlalchemy.engine.base.Engine Thread-92 : (1, 1)
2020-06-08 19:35:21,491 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:21,490 INFO sqlalchemy.engine.base.Engine Thread-91 : ROLLBACK
2020-06-08 19:35:21,492 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:21,492 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:21,493 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:21,497 INFO sqlalchemy.engine.base.Engine Thread-93 : ROLLBACK
2020-06-08 19:35:21,498 INFO sqlalchemy.engine.base.Engine Thread-92 : ROLLBACK
2020-06-08 19:35:33,666 INFO sqlalchemy.engine.base.Engine Thread-94 : BEGIN (implicit)
2020-06-08 19:35:33,667 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:33,667 INFO sqlalchemy.engine.base.Engine Thread-94 : (1, 1)
2020-06-08 19:35:33,668 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:33,668 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:33,670 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:33,670 INFO sqlalchemy.engine.base.Engine Thread-94 : ('philip', 1, 1)
2020-06-08 19:35:33,671 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:33,671 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:33,679 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:35:33,679 INFO sqlalchemy.engine.base.Engine Thread-94 : ()
2020-06-08 19:35:33,680 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:35:33,680 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:33,680 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:35:33,681 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:35:33,686 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:35:33,686 INFO sqlalchemy.engine.base.Engine Thread-94 : ('philip', 1, 1)
2020-06-08 19:35:33,686 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:33,690 INFO sqlalchemy.engine.base.Engine Thread-94 : ROLLBACK
2020-06-08 19:35:34,035 INFO sqlalchemy.engine.base.Engine Thread-104 : BEGIN (implicit)
2020-06-08 19:35:34,036 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:34,036 INFO sqlalchemy.engine.base.Engine Thread-104 : (1, 1)
2020-06-08 19:35:34,038 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:34,039 INFO sqlalchemy.engine.base.Engine Thread-105 : BEGIN (implicit)
2020-06-08 19:35:34,040 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:34,043 INFO sqlalchemy.engine.base.Engine Thread-106 : BEGIN (implicit)
2020-06-08 19:35:34,045 INFO sqlalchemy.engine.base.Engine Thread-107 : BEGIN (implicit)
2020-06-08 19:35:34,046 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:34,049 INFO sqlalchemy.engine.base.Engine Thread-104 : ROLLBACK
2020-06-08 19:35:34,050 INFO sqlalchemy.engine.base.Engine Thread-106 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:34,051 INFO sqlalchemy.engine.base.Engine Thread-106 : (1, 1)
2020-06-08 19:35:34,051 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:34,052 INFO sqlalchemy.engine.base.Engine Thread-107 : (1, 1)
2020-06-08 19:35:34,052 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:34,053 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:34,051 INFO sqlalchemy.engine.base.Engine Thread-105 : (1, 1)
2020-06-08 19:35:34,057 INFO sqlalchemy.engine.base.Engine Thread-108 : BEGIN (implicit)
2020-06-08 19:35:34,058 INFO sqlalchemy.engine.base.Engine Thread-106 : ROLLBACK
2020-06-08 19:35:34,058 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:34,059 INFO sqlalchemy.engine.base.Engine Thread-108 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:35:34,060 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:34,061 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:34,063 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:34,063 INFO sqlalchemy.engine.base.Engine Thread-107 : ROLLBACK
2020-06-08 19:35:34,061 INFO sqlalchemy.engine.base.Engine Thread-108 : (1, 1)
2020-06-08 19:35:34,066 INFO sqlalchemy.engine.base.Engine Thread-105 : ROLLBACK
2020-06-08 19:35:34,067 DEBUG sqlalchemy.engine.base.Engine Thread-108 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:35:34,067 DEBUG sqlalchemy.engine.base.Engine Thread-108 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:35:34,070 INFO sqlalchemy.engine.base.Engine Thread-108 : ROLLBACK
2020-06-08 19:36:38,555 INFO sqlalchemy.engine.base.Engine Thread-109 : BEGIN (implicit)
2020-06-08 19:36:38,561 INFO sqlalchemy.engine.base.Engine Thread-109 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 19:36:38,561 INFO sqlalchemy.engine.base.Engine Thread-109 : ()
2020-06-08 19:36:38,562 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 19:36:38,563 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 19:36:38,563 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 19:36:38,564 INFO sqlalchemy.engine.base.Engine Thread-109 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:36:38,564 INFO sqlalchemy.engine.base.Engine Thread-109 : (100,)
2020-06-08 19:36:38,565 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:36:38,565 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 19:36:38,565 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 19:36:38,565 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 19:36:38,565 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 19:36:38,565 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 19:36:38,567 INFO sqlalchemy.engine.base.Engine Thread-109 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:36:38,567 INFO sqlalchemy.engine.base.Engine Thread-109 : (1, 1)
2020-06-08 19:36:38,568 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:36:38,568 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:36:38,578 INFO sqlalchemy.engine.base.Engine Thread-109 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:36:38,578 INFO sqlalchemy.engine.base.Engine Thread-109 : ('philip', 1, 1)
2020-06-08 19:36:38,579 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:36:38,579 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:36:38,581 INFO sqlalchemy.engine.base.Engine Thread-109 : ROLLBACK
2020-06-08 19:36:38,955 INFO sqlalchemy.engine.base.Engine Thread-119 : BEGIN (implicit)
2020-06-08 19:36:38,957 INFO sqlalchemy.engine.base.Engine Thread-119 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 19:36:38,957 INFO sqlalchemy.engine.base.Engine Thread-119 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:36:38,958 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 19:36:38,958 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 19:36:38,958 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 19:36:38,959 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:36:38,959 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 19:36:38,959 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:36:38,959 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:36:38,963 INFO sqlalchemy.engine.base.Engine Thread-119 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 19:36:38,964 INFO sqlalchemy.engine.base.Engine Thread-119 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:36:38,964 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 19:36:38,965 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 19:36:38,969 INFO sqlalchemy.engine.base.Engine Thread-119 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 19:36:38,969 INFO sqlalchemy.engine.base.Engine Thread-119 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:36:38,970 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 19:36:38,971 INFO sqlalchemy.engine.base.Engine Thread-119 : ROLLBACK
2020-06-08 19:36:39,000 INFO sqlalchemy.engine.base.Engine Thread-120 : BEGIN (implicit)
2020-06-08 19:36:39,001 INFO sqlalchemy.engine.base.Engine Thread-120 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 19:36:39,001 INFO sqlalchemy.engine.base.Engine Thread-120 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:36:39,003 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 19:36:39,003 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 19:36:39,003 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 19:36:39,003 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:36:39,003 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 19:36:39,003 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:36:39,003 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 19:36:39,008 INFO sqlalchemy.engine.base.Engine Thread-120 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 19:36:39,008 INFO sqlalchemy.engine.base.Engine Thread-120 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:36:39,009 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 19:36:39,009 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 19:36:39,013 INFO sqlalchemy.engine.base.Engine Thread-120 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 19:36:39,013 INFO sqlalchemy.engine.base.Engine Thread-120 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 19:36:39,014 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 19:36:39,015 INFO sqlalchemy.engine.base.Engine Thread-120 : ROLLBACK
2020-06-08 19:36:40,250 INFO sqlalchemy.engine.base.Engine Thread-121 : BEGIN (implicit)
2020-06-08 19:36:40,251 INFO sqlalchemy.engine.base.Engine Thread-121 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:36:40,251 INFO sqlalchemy.engine.base.Engine Thread-121 : (1, 1)
2020-06-08 19:36:40,252 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:36:40,252 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:36:40,257 INFO sqlalchemy.engine.base.Engine Thread-121 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 19:36:40,257 INFO sqlalchemy.engine.base.Engine Thread-121 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 19:36:40,258 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:36:40,258 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 19:36:40,258 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 19:36:40,259 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 19:36:40,259 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:36:40,280 INFO sqlalchemy.engine.base.Engine Thread-121 : ROLLBACK
2020-06-08 19:36:41,500 INFO sqlalchemy.engine.base.Engine Thread-122 : BEGIN (implicit)
2020-06-08 19:36:41,501 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:36:41,501 INFO sqlalchemy.engine.base.Engine Thread-122 : (1, 1)
2020-06-08 19:36:41,502 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:36:41,502 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:36:41,506 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 19:36:41,506 INFO sqlalchemy.engine.base.Engine Thread-122 : (23,)
2020-06-08 19:36:41,506 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:36:41,506 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:36:41,511 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 19:36:41,511 INFO sqlalchemy.engine.base.Engine Thread-122 : (23,)
2020-06-08 19:36:41,512 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 19:36:41,514 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 19:36:41,514 INFO sqlalchemy.engine.base.Engine Thread-122 : ()
2020-06-08 19:36:41,515 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:36:41,515 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:36:41,515 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:36:41,519 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 19:36:41,519 INFO sqlalchemy.engine.base.Engine Thread-122 : ()
2020-06-08 19:36:41,520 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 19:36:41,520 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 19:36:41,520 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 19:36:41,522 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s ORDER BY complexgroups.group_name
2020-06-08 19:36:41,522 INFO sqlalchemy.engine.base.Engine Thread-122 : (23,)
2020-06-08 19:36:41,523 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:36:41,535 INFO sqlalchemy.engine.base.Engine Thread-122 : ROLLBACK
2020-06-08 19:41:28,041 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:41:28,041 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:41:28,042 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:41:28,043 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:41:28,044 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:41:28,044 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:41:28,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:41:28,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:41:28,045 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:41:28,045 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:41:28,045 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:41:28,045 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:41:28,046 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:41:28,046 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:41:28,046 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:41:28,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:41:28,047 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:41:28,047 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:41:28,048 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:41:28,048 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:41:28,049 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:41:28,049 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:41:28,050 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:41:28,052 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:41:28,052 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:41:28,053 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:41:28,054 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:41:28,063 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 19:41:28,063 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 19:41:28,064 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:41:28,065 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 19:41:28,065 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 19:41:28,065 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 19:41:28,065 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:41:28,096 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 19:41:29,370 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 19:41:29,371 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:41:29,371 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 19:41:29,372 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:41:29,372 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:41:29,376 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 19:41:29,377 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 19:41:29,377 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:41:29,377 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:41:29,381 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 19:41:29,381 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 19:41:29,382 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 19:41:29,385 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 19:41:29,385 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 19:41:29,386 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:41:29,386 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:41:29,386 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:41:29,396 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 19:41:29,396 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 19:41:29,398 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 19:41:29,398 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 19:41:29,399 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 19:41:29,401 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups INNER JOIN complexgroups AS complexgroups_1 ON datesofinterest_1.id = complexgroups_1.id ORDER BY complexgroups.group_name
2020-06-08 19:41:29,401 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 19:42:12,008 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 19:42:12,012 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 19:42:12,014 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:42:12,014 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 19:42:12,014 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:42:12,015 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:42:12,018 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 19:42:12,019 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 19:42:12,019 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:42:12,019 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:42:12,023 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 19:42:12,023 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 19:42:12,024 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 19:42:12,026 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 19:42:12,026 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 19:42:12,026 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:42:12,027 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:42:12,027 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:42:12,030 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 19:42:12,030 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 19:42:12,031 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 19:42:12,031 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 19:42:12,031 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 19:42:12,033 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups INNER JOIN complexgroups AS complexgroups_1 ON datesofinterest_1.id = complexgroups_1.id ORDER BY complexgroups.group_name
2020-06-08 19:42:12,034 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 19:44:28,875 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:44:28,875 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,876 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:44:28,877 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 19:44:28,878 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:44:28,878 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,878 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 19:44:28,878 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 19:44:28,879 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 19:44:28,879 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,879 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 19:44:28,879 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 19:44:28,880 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:44:28,880 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,880 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:44:28,880 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:44:28,881 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:44:28,881 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,882 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:44:28,882 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,883 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:44:28,883 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,883 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 19:44:28,886 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:44:28,886 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 19:44:28,887 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:44:28,887 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:44:28,892 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 19:44:28,892 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 19:44:28,893 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 19:44:28,893 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 19:44:28,898 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 19:44:28,898 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 19:44:28,899 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 19:44:28,902 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 19:44:28,902 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:44:28,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:44:28,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:44:28,912 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 19:44:28,913 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:44:28,914 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 19:44:28,914 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 19:44:28,914 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 19:44:28,917 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.id = complexgroups_1.id ORDER BY complexgroups.group_name
2020-06-08 19:44:28,917 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 19:51:35,491 INFO sqlalchemy.engine.base.Engine MainThread : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 19:51:35,491 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:51:35,494 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('Variable_name', 'Value')
2020-06-08 19:51:35,494 DEBUG sqlalchemy.engine.base.Engine MainThread : Row ('sql_mode', '')
2020-06-08 19:51:35,495 INFO sqlalchemy.engine.base.Engine MainThread : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 19:51:35,495 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:51:35,495 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('Variable_name', 'Value')
2020-06-08 19:51:35,496 DEBUG sqlalchemy.engine.base.Engine MainThread : Row ('lower_case_table_names', '0')
2020-06-08 19:51:35,496 INFO sqlalchemy.engine.base.Engine MainThread : SELECT DATABASE()
2020-06-08 19:51:35,496 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:51:35,496 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('DATABASE()',)
2020-06-08 19:51:35,497 DEBUG sqlalchemy.engine.base.Engine MainThread : Row ('fmapp',)
2020-06-08 19:51:35,497 INFO sqlalchemy.engine.base.Engine MainThread : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 19:51:35,497 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:51:35,498 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 19:51:35,498 DEBUG sqlalchemy.engine.base.Engine MainThread : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 19:51:35,499 INFO sqlalchemy.engine.base.Engine MainThread : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 19:51:35,499 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:51:35,500 INFO sqlalchemy.engine.base.Engine MainThread : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 19:51:35,500 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:51:35,500 INFO sqlalchemy.engine.base.Engine MainThread : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 19:51:35,500 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:51:35,501 INFO sqlalchemy.engine.base.Engine MainThread : BEGIN (implicit)
2020-06-08 19:51:35,502 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS `ComplexGroupId`, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN complexgroups AS complexgroups_1 ON datesofinterest_1.id = complexgroups_1.id ORDER BY complexgroups_1.group_name
2020-06-08 19:51:35,502 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:51:35,503 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'ComplexGroupId', 'complexgroups_1_group_name')
2020-06-08 19:51:35,504 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (1, 'Change Freeze (Critical)', 1, 'Test Group')
2020-06-08 19:53:18,776 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS `ComplexGroupId`, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN complexgroups AS complexgroups_1 ON datesofinterest_1.doi_filter = complexgroups_1.id ORDER BY complexgroups_1.group_name
2020-06-08 19:53:18,776 INFO sqlalchemy.engine.base.Engine MainThread : ()
2020-06-08 19:53:18,777 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'ComplexGroupId', 'complexgroups_1_group_name')
2020-06-08 19:53:18,777 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (18, 'Zone 2 BAU', 1, 'Test Group')
2020-06-08 19:53:18,777 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (23, 'Zone 5 BAU', 1, 'Test Group')
2020-06-08 19:53:18,777 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (12, 'Boxing Day', 1, 'Test Group')
2020-06-08 19:53:18,777 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (13, 'Boxing Day Holiday', 1, 'Test Group')
2020-06-08 19:53:18,778 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 2, 'Test Group 2')
2020-06-08 19:53:18,778 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (22, 'Zone 5 BAU', 2, 'Test Group 2')
2020-06-08 19:53:59,041 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS `ComplexGroupId`, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN complexgroups AS complexgroups_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s ORDER BY complexgroups_1.group_name
2020-06-08 19:53:59,041 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 19:53:59,042 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'ComplexGroupId', 'complexgroups_1_group_name')
2020-06-08 19:53:59,042 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 2, 'Test Group 2')
2020-06-08 19:54:12,249 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 19:54:12,254 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 19:54:12,255 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:54:12,256 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 19:54:12,256 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:12,257 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:12,259 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:12,260 INFO sqlalchemy.engine.base.Engine Thread-3 : ('philip', 1, 1)
2020-06-08 19:54:12,260 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:12,260 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:12,274 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:54:12,274 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 19:54:12,275 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:54:12,275 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:12,275 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:12,275 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:54:12,276 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:12,355 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:12,355 INFO sqlalchemy.engine.base.Engine Thread-3 : ('philip', 1, 1)
2020-06-08 19:54:12,356 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:12,356 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:12,360 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 19:54:14,283 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 19:54:14,284 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:54:14,284 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 19:54:14,284 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:14,285 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:14,287 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:14,287 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-06-08 19:54:14,288 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:14,288 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:14,291 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:54:14,291 INFO sqlalchemy.engine.base.Engine Thread-13 : ('20', 1)
2020-06-08 19:54:14,291 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:54:14,292 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-08 19:54:14,295 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:14,295 INFO sqlalchemy.engine.base.Engine Thread-13 : (82,)
2020-06-08 19:54:14,296 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:14,296 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:54:14,296 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:54:14,296 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:54:14,298 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:54:14,298 INFO sqlalchemy.engine.base.Engine Thread-13 : (1,)
2020-06-08 19:54:14,298 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:14,299 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:54:14,299 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:54:14,300 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:54:14,300 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-06-08 19:54:14,300 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:54:14,301 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:54:14,301 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:54:14,302 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:14,302 INFO sqlalchemy.engine.base.Engine Thread-13 : (127,)
2020-06-08 19:54:14,303 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:14,303 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:14,303 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:14,303 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:14,303 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:54:14,304 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:14,305 INFO sqlalchemy.engine.base.Engine Thread-13 : (105,)
2020-06-08 19:54:14,305 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:14,305 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:54:14,306 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:54:14,344 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:14,344 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-06-08 19:54:14,345 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:14,345 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:14,350 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 19:54:19,566 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-08 19:54:19,567 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:54:19,567 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-08 19:54:19,567 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:19,568 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:19,570 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:19,570 INFO sqlalchemy.engine.base.Engine Thread-23 : ('philip', 1, 1)
2020-06-08 19:54:19,571 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:19,572 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:19,573 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:54:19,573 INFO sqlalchemy.engine.base.Engine Thread-23 : ('20', 1)
2020-06-08 19:54:19,574 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:54:19,574 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-08 19:54:19,578 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:19,579 INFO sqlalchemy.engine.base.Engine Thread-23 : (82,)
2020-06-08 19:54:19,579 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:19,580 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:54:19,580 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:54:19,580 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:54:19,581 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:54:19,581 INFO sqlalchemy.engine.base.Engine Thread-23 : (1,)
2020-06-08 19:54:19,582 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:19,582 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:54:19,582 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:54:19,583 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:54:19,584 INFO sqlalchemy.engine.base.Engine Thread-23 : ()
2020-06-08 19:54:19,584 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:54:19,584 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:54:19,585 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:54:19,586 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:19,586 INFO sqlalchemy.engine.base.Engine Thread-23 : (127,)
2020-06-08 19:54:19,586 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:19,587 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:19,587 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:19,587 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:19,587 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:54:19,588 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:19,588 INFO sqlalchemy.engine.base.Engine Thread-23 : (105,)
2020-06-08 19:54:19,589 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:19,589 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:54:19,589 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:54:19,594 INFO sqlalchemy.engine.base.Engine Thread-23 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-08 19:54:19,594 INFO sqlalchemy.engine.base.Engine Thread-23 : ('20', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 1, 20)
2020-06-08 19:54:19,595 INFO sqlalchemy.engine.base.Engine Thread-23 : COMMIT
2020-06-08 19:54:19,646 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-08 19:54:19,647 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:54:19,647 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-08 19:54:19,648 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:19,648 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:19,650 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:19,650 INFO sqlalchemy.engine.base.Engine Thread-24 : ('philip', 1, 1)
2020-06-08 19:54:19,651 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:19,651 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:19,661 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:54:19,661 INFO sqlalchemy.engine.base.Engine Thread-24 : ()
2020-06-08 19:54:19,662 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:54:19,662 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:19,662 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:19,663 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:54:19,664 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:19,668 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:19,668 INFO sqlalchemy.engine.base.Engine Thread-24 : ('philip', 1, 1)
2020-06-08 19:54:19,669 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:19,669 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:19,673 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-06-08 19:54:24,516 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS `ComplexGroupId`, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN complexgroups AS complexgroups_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s ORDER BY complexgroups_1.group_name
2020-06-08 19:54:24,517 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 19:54:24,518 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'ComplexGroupId', 'complexgroups_1_group_name')
2020-06-08 19:54:24,518 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 2, 'Test Group 2')
2020-06-08 19:54:34,322 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-06-08 19:54:34,323 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:54:34,324 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-06-08 19:54:34,325 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:34,325 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:34,328 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:34,328 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip', 1, 1)
2020-06-08 19:54:34,328 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:34,329 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:34,330 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:54:34,330 INFO sqlalchemy.engine.base.Engine Thread-34 : ('20', 1)
2020-06-08 19:54:34,331 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:54:34,331 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:54:34,333 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:34,333 INFO sqlalchemy.engine.base.Engine Thread-34 : (82,)
2020-06-08 19:54:34,334 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:34,334 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:54:34,334 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:54:34,334 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:54:34,335 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:54:34,336 INFO sqlalchemy.engine.base.Engine Thread-34 : (1,)
2020-06-08 19:54:34,336 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:34,336 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:54:34,336 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:54:34,337 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:54:34,338 INFO sqlalchemy.engine.base.Engine Thread-34 : ()
2020-06-08 19:54:34,338 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:54:34,338 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:54:34,338 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:54:34,340 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:34,340 INFO sqlalchemy.engine.base.Engine Thread-34 : (127,)
2020-06-08 19:54:34,340 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:34,340 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:34,341 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:34,341 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:34,341 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:54:34,342 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:34,342 INFO sqlalchemy.engine.base.Engine Thread-34 : (105,)
2020-06-08 19:54:34,343 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:34,343 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:54:34,343 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:54:34,348 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:34,348 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip', 1, 1)
2020-06-08 19:54:34,349 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:34,349 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:34,353 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-06-08 19:54:42,574 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-08 19:54:42,575 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:54:42,575 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-08 19:54:42,576 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:42,576 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:42,579 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:42,579 INFO sqlalchemy.engine.base.Engine Thread-44 : ('philip', 1, 1)
2020-06-08 19:54:42,580 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:42,580 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:42,582 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:54:42,582 INFO sqlalchemy.engine.base.Engine Thread-44 : ('20', 1)
2020-06-08 19:54:42,582 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:54:42,583 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:54:42,586 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:42,586 INFO sqlalchemy.engine.base.Engine Thread-44 : (82,)
2020-06-08 19:54:42,587 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:42,587 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:54:42,587 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:54:42,587 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:54:42,589 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:54:42,589 INFO sqlalchemy.engine.base.Engine Thread-44 : (1,)
2020-06-08 19:54:42,593 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:42,594 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:54:42,594 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:54:42,595 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:54:42,595 INFO sqlalchemy.engine.base.Engine Thread-44 : ()
2020-06-08 19:54:42,595 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:54:42,596 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:54:42,596 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:54:42,597 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:42,597 INFO sqlalchemy.engine.base.Engine Thread-44 : (127,)
2020-06-08 19:54:42,598 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:42,598 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:42,598 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:42,598 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:54:42,598 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:54:42,599 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:54:42,600 INFO sqlalchemy.engine.base.Engine Thread-44 : (105,)
2020-06-08 19:54:42,600 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:54:42,600 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:54:42,600 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:54:42,602 INFO sqlalchemy.engine.base.Engine Thread-44 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-08 19:54:42,602 INFO sqlalchemy.engine.base.Engine Thread-44 : ('20', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 1, 20)
2020-06-08 19:54:42,603 INFO sqlalchemy.engine.base.Engine Thread-44 : COMMIT
2020-06-08 19:54:42,647 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-06-08 19:54:42,648 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:54:42,648 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-06-08 19:54:42,649 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:42,649 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:42,652 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:42,652 INFO sqlalchemy.engine.base.Engine Thread-45 : ('philip', 1, 1)
2020-06-08 19:54:42,653 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:42,653 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:42,661 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:54:42,662 INFO sqlalchemy.engine.base.Engine Thread-45 : ()
2020-06-08 19:54:42,662 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:54:42,662 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:54:42,663 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:54:42,664 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:54:42,664 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:54:42,668 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:54:42,668 INFO sqlalchemy.engine.base.Engine Thread-45 : ('philip', 1, 1)
2020-06-08 19:54:42,668 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:54:42,669 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:54:42,672 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-06-08 19:55:08,862 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS `ComplexGroupId`, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN complexgroups AS complexgroups_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s ORDER BY complexgroups_1.group_name
2020-06-08 19:55:08,862 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 19:55:08,863 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'ComplexGroupId', 'complexgroups_1_group_name')
2020-06-08 19:55:08,864 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 2, 'Test Group 2')
2020-06-08 19:55:11,568 INFO sqlalchemy.engine.base.Engine Thread-55 : BEGIN (implicit)
2020-06-08 19:55:11,569 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:55:11,569 INFO sqlalchemy.engine.base.Engine Thread-55 : (1, 1)
2020-06-08 19:55:11,570 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:11,570 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:11,572 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:11,572 INFO sqlalchemy.engine.base.Engine Thread-55 : ('philip', 1, 1)
2020-06-08 19:55:11,573 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:11,573 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:11,574 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:55:11,574 INFO sqlalchemy.engine.base.Engine Thread-55 : ('12', 1)
2020-06-08 19:55:11,575 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:55:11,576 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 130, '1', 106)
2020-06-08 19:55:11,578 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:11,578 INFO sqlalchemy.engine.base.Engine Thread-55 : (82,)
2020-06-08 19:55:11,578 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:11,579 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:55:11,579 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:55:11,579 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:55:11,580 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:55:11,580 INFO sqlalchemy.engine.base.Engine Thread-55 : (1,)
2020-06-08 19:55:11,581 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:11,581 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:55:11,581 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:55:11,582 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:55:11,582 INFO sqlalchemy.engine.base.Engine Thread-55 : ()
2020-06-08 19:55:11,582 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:55:11,583 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:55:11,583 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:55:11,584 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:11,584 INFO sqlalchemy.engine.base.Engine Thread-55 : (127,)
2020-06-08 19:55:11,585 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:11,585 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:11,585 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:11,585 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:11,585 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:55:11,586 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:11,586 INFO sqlalchemy.engine.base.Engine Thread-55 : (105,)
2020-06-08 19:55:11,587 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:11,587 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:55:11,587 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:55:11,592 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:11,592 INFO sqlalchemy.engine.base.Engine Thread-55 : ('philip', 1, 1)
2020-06-08 19:55:11,593 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:11,593 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:11,597 INFO sqlalchemy.engine.base.Engine Thread-55 : ROLLBACK
2020-06-08 19:55:15,834 INFO sqlalchemy.engine.base.Engine Thread-65 : BEGIN (implicit)
2020-06-08 19:55:15,835 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:55:15,835 INFO sqlalchemy.engine.base.Engine Thread-65 : (1, 1)
2020-06-08 19:55:15,836 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:15,836 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:15,838 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:15,838 INFO sqlalchemy.engine.base.Engine Thread-65 : ('philip', 1, 1)
2020-06-08 19:55:15,839 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:15,839 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:15,841 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:55:15,841 INFO sqlalchemy.engine.base.Engine Thread-65 : ('12', 1)
2020-06-08 19:55:15,841 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:55:15,842 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (12, 'Boxing Day', 83, 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'GBR,IND', 130, '1', 106)
2020-06-08 19:55:15,845 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:15,845 INFO sqlalchemy.engine.base.Engine Thread-65 : (82,)
2020-06-08 19:55:15,845 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:15,845 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:55:15,845 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:55:15,846 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:55:15,847 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:55:15,847 INFO sqlalchemy.engine.base.Engine Thread-65 : (1,)
2020-06-08 19:55:15,847 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:15,848 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:55:15,848 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:55:15,849 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:55:15,849 INFO sqlalchemy.engine.base.Engine Thread-65 : ()
2020-06-08 19:55:15,849 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:55:15,850 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:55:15,850 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:55:15,851 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:15,851 INFO sqlalchemy.engine.base.Engine Thread-65 : (127,)
2020-06-08 19:55:15,851 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:15,851 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:15,852 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:15,852 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:15,852 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:55:15,853 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:15,853 INFO sqlalchemy.engine.base.Engine Thread-65 : (105,)
2020-06-08 19:55:15,854 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:15,854 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:55:15,854 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:55:15,855 INFO sqlalchemy.engine.base.Engine Thread-65 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-08 19:55:15,855 INFO sqlalchemy.engine.base.Engine Thread-65 : ('12', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 1, 12)
2020-06-08 19:55:15,856 INFO sqlalchemy.engine.base.Engine Thread-65 : COMMIT
2020-06-08 19:55:15,921 INFO sqlalchemy.engine.base.Engine Thread-66 : BEGIN (implicit)
2020-06-08 19:55:15,922 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:55:15,922 INFO sqlalchemy.engine.base.Engine Thread-66 : (1, 1)
2020-06-08 19:55:15,923 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:15,923 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:15,925 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:15,925 INFO sqlalchemy.engine.base.Engine Thread-66 : ('philip', 1, 1)
2020-06-08 19:55:15,926 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:15,926 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:15,934 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:55:15,934 INFO sqlalchemy.engine.base.Engine Thread-66 : ()
2020-06-08 19:55:15,935 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:55:15,935 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:55:15,935 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:55:15,935 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:55:15,936 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:55:15,941 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:15,941 INFO sqlalchemy.engine.base.Engine Thread-66 : ('philip', 1, 1)
2020-06-08 19:55:15,941 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:15,942 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:15,945 INFO sqlalchemy.engine.base.Engine Thread-66 : ROLLBACK
2020-06-08 19:55:19,475 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-06-08 19:55:19,476 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:55:19,476 INFO sqlalchemy.engine.base.Engine Thread-76 : (1, 1)
2020-06-08 19:55:19,476 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:19,477 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:19,479 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:19,479 INFO sqlalchemy.engine.base.Engine Thread-76 : ('philip', 1, 1)
2020-06-08 19:55:19,480 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:19,480 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:19,481 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 19:55:19,482 INFO sqlalchemy.engine.base.Engine Thread-76 : ('20', 1)
2020-06-08 19:55:19,482 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 19:55:19,482 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 19:55:19,484 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:19,485 INFO sqlalchemy.engine.base.Engine Thread-76 : (82,)
2020-06-08 19:55:19,485 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:19,485 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 19:55:19,485 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 19:55:19,486 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 19:55:19,487 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 19:55:19,487 INFO sqlalchemy.engine.base.Engine Thread-76 : (1,)
2020-06-08 19:55:19,487 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:19,488 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 19:55:19,488 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 19:55:19,489 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 19:55:19,489 INFO sqlalchemy.engine.base.Engine Thread-76 : ()
2020-06-08 19:55:19,489 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 19:55:19,489 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 19:55:19,489 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 19:55:19,491 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:19,491 INFO sqlalchemy.engine.base.Engine Thread-76 : (127,)
2020-06-08 19:55:19,491 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:19,491 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:19,491 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:19,492 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 19:55:19,492 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 19:55:19,493 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 19:55:19,493 INFO sqlalchemy.engine.base.Engine Thread-76 : (105,)
2020-06-08 19:55:19,493 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 19:55:19,494 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 19:55:19,494 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 19:55:19,498 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:19,498 INFO sqlalchemy.engine.base.Engine Thread-76 : ('philip', 1, 1)
2020-06-08 19:55:19,499 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:19,499 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:19,503 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-06-08 19:55:21,663 INFO sqlalchemy.engine.base.Engine Thread-86 : BEGIN (implicit)
2020-06-08 19:55:21,664 INFO sqlalchemy.engine.base.Engine Thread-86 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 19:55:21,664 INFO sqlalchemy.engine.base.Engine Thread-86 : (1, 1)
2020-06-08 19:55:21,665 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:21,665 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:21,668 INFO sqlalchemy.engine.base.Engine Thread-86 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:21,668 INFO sqlalchemy.engine.base.Engine Thread-86 : ('philip', 1, 1)
2020-06-08 19:55:21,668 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:21,668 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:21,676 INFO sqlalchemy.engine.base.Engine Thread-86 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 19:55:21,676 INFO sqlalchemy.engine.base.Engine Thread-86 : ()
2020-06-08 19:55:21,677 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 19:55:21,678 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 19:55:21,679 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 19:55:21,679 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 19:55:21,683 INFO sqlalchemy.engine.base.Engine Thread-86 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 19:55:21,683 INFO sqlalchemy.engine.base.Engine Thread-86 : ('philip', 1, 1)
2020-06-08 19:55:21,683 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 19:55:21,684 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 19:55:21,687 INFO sqlalchemy.engine.base.Engine Thread-86 : ROLLBACK
2020-06-08 19:55:26,382 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS `ComplexGroupId`, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN complexgroups AS complexgroups_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s ORDER BY complexgroups_1.group_name
2020-06-08 19:55:26,382 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 19:55:26,383 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'ComplexGroupId', 'complexgroups_1_group_name')
2020-06-08 19:55:26,383 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 2, 'Test Group 2')
2020-06-08 19:57:17,859 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 19:57:17,859 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 19:57:17,860 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 19:57:17,861 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 2, 'Test Group 2')
2020-06-08 19:58:42,338 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 19:58:42,339 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 19:58:42,340 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 19:58:42,340 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 2, 'Test Group 2', '2')
2020-06-08 20:01:48,916 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:01:48,916 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:01:48,918 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:01:48,918 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 2, 'Test Group 2', '2')
2020-06-08 20:02:36,085 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_priority AS datesofinterest_1_doi_priority, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_type AS datesofinterest_1_doi_type, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter, datesofinterest_1.doi_hap AS datesofinterest_1_doi_hap 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:02:36,085 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:02:36,086 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_priority', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_type', 'datesofinterest_1_doi_filter', 'datesofinterest_1_doi_hap')
2020-06-08 20:02:36,086 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-08 20:02:55,470 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:02:55,471 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:02:55,472 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:02:55,472 DEBUG sqlalchemy.engine.base.Engine MainThread : Row ('BaU Zone 2', '2')
2020-06-08 20:04:25,027 INFO sqlalchemy.engine.base.Engine MainThread : ROLLBACK
2020-06-08 20:04:26,684 INFO sqlalchemy.engine.base.Engine MainThread : BEGIN (implicit)
2020-06-08 20:04:26,684 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:04:26,685 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:04:26,685 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:04:26,686 DEBUG sqlalchemy.engine.base.Engine MainThread : Row ('BaU Zone 2', '1')
2020-06-08 20:04:33,836 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:04:33,836 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:04:33,837 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:04:33,837 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:05:51,849 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:05:51,849 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:05:51,850 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:05:51,851 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:08:38,414 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 20:08:38,414 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:08:38,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:08:38,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 20:08:38,417 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 20:08:38,417 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:08:38,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:08:38,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 20:08:38,418 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 20:08:38,418 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:08:38,418 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 20:08:38,418 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 20:08:38,418 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 20:08:38,418 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:08:38,419 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 20:08:38,419 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 20:08:38,420 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 20:08:38,420 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:08:38,421 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 20:08:38,421 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:08:38,421 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 20:08:38,421 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:08:38,422 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 20:08:38,427 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:08:38,427 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:08:38,429 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:08:38,429 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:08:38,429 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:08:38,432 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:08:38,432 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-08 20:08:38,432 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:08:38,433 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 20:08:38,433 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 20:08:38,433 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 20:08:38,433 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 20:08:38,433 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 20:08:38,436 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:08:38,437 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 20:08:38,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:08:38,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:08:38,505 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:08:38,506 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 20:08:38,506 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:08:38,506 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:08:38,509 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 20:08:38,857 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 20:08:38,859 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 20:08:38,859 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:08:38,860 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 20:08:38,860 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 20:08:38,860 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 20:08:38,860 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:08:38,860 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 20:08:38,860 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:08:38,861 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:08:38,865 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 20:08:38,865 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:08:38,866 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:08:38,866 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 20:08:38,870 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 20:08:38,870 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:08:38,871 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:08:38,872 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 20:08:38,901 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 20:08:38,903 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 20:08:38,903 INFO sqlalchemy.engine.base.Engine Thread-13 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:08:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 20:08:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 20:08:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 20:08:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:08:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 20:08:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:08:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:08:38,908 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 20:08:38,908 INFO sqlalchemy.engine.base.Engine Thread-13 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:08:38,909 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:08:38,909 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 20:08:38,913 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 20:08:38,913 INFO sqlalchemy.engine.base.Engine Thread-13 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:08:38,914 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:08:38,914 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 20:08:40,007 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 20:08:40,008 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:08:40,008 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 20:08:40,009 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:08:40,009 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:08:40,015 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:08:40,015 INFO sqlalchemy.engine.base.Engine Thread-14 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:08:40,016 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:08:40,016 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:08:40,016 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:08:40,017 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:08:40,017 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:08:40,039 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 20:08:41,022 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 20:08:41,023 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:08:41,023 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-08 20:08:41,024 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:08:41,024 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:08:41,028 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:08:41,028 INFO sqlalchemy.engine.base.Engine Thread-15 : (23,)
2020-06-08 20:08:41,029 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:08:41,029 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:08:41,033 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:08:41,033 INFO sqlalchemy.engine.base.Engine Thread-15 : (23,)
2020-06-08 20:08:41,033 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:08:41,036 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:08:41,037 INFO sqlalchemy.engine.base.Engine Thread-15 : ()
2020-06-08 20:08:41,037 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:08:41,037 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:08:41,037 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:08:41,041 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:08:41,041 INFO sqlalchemy.engine.base.Engine Thread-15 : ()
2020-06-08 20:08:41,042 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:08:41,043 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:08:41,043 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:08:41,046 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:08:41,046 INFO sqlalchemy.engine.base.Engine Thread-15 : (23,)
2020-06-08 20:08:41,047 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:08:41,047 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (23, 'Zone 5 BAU', 1, 'Test Group', '1,2')
2020-06-08 20:08:41,063 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 20:10:06,475 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 20:10:06,476 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:10:06,476 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 20:10:06,477 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:10:06,477 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:10:06,485 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:10:06,485 INFO sqlalchemy.engine.base.Engine Thread-16 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:10:06,486 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:10:06,486 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:10:06,486 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:10:06,486 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:10:06,486 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:10:06,489 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 20:10:07,669 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 20:10:07,670 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:10:07,670 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 20:10:07,670 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:10:07,671 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:10:07,674 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:10:07,674 INFO sqlalchemy.engine.base.Engine Thread-17 : (23,)
2020-06-08 20:10:07,675 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:10:07,675 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:10:07,679 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:10:07,679 INFO sqlalchemy.engine.base.Engine Thread-17 : (23,)
2020-06-08 20:10:07,679 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:10:07,681 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:10:07,681 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 20:10:07,682 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:10:07,682 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:10:07,682 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:10:07,684 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:10:07,685 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 20:10:07,685 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:10:07,686 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:10:07,686 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:10:07,689 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:10:07,689 INFO sqlalchemy.engine.base.Engine Thread-17 : (23,)
2020-06-08 20:10:07,689 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:10:07,689 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (23, 'Zone 5 BAU', 1, 'Test Group', '1,2')
2020-06-08 20:10:07,691 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 20:10:28,164 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 20:10:28,164 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:10:28,166 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:10:28,166 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 20:10:28,167 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 20:10:28,167 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:10:28,167 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:10:28,168 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 20:10:28,168 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 20:10:28,168 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:10:28,168 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 20:10:28,169 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 20:10:28,169 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 20:10:28,169 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:10:28,170 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 20:10:28,170 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 20:10:28,171 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 20:10:28,171 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:10:28,172 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 20:10:28,172 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:10:28,172 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 20:10:28,173 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:10:28,173 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 20:10:28,175 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:10:28,176 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 20:10:28,176 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:10:28,177 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:10:28,186 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:10:28,186 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:10:28,187 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:10:28,187 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:10:28,187 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:10:28,187 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:10:28,188 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:10:28,218 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 20:10:29,204 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 20:10:29,205 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:10:29,205 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 20:10:29,206 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:10:29,207 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:10:29,210 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:10:29,211 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:10:29,211 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:10:29,211 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:10:29,216 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:10:29,216 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:10:29,217 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:10:29,221 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:10:29,221 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:10:29,221 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:10:29,222 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:10:29,222 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:10:29,232 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:10:29,232 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:10:29,233 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:10:29,234 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:10:29,234 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:10:29,237 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:10:29,237 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:10:29,238 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:10:29,238 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', 1, 'Test Group', '1,2')
2020-06-08 20:10:29,253 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 20:11:03,481 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 20:11:03,481 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:11:03,482 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 20:11:03,482 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:11:03,482 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:11:03,487 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:11:03,487 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:11:03,488 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:11:03,488 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:11:03,488 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:11:03,488 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:11:03,488 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:11:03,491 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 20:11:05,829 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 20:11:05,830 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:11:05,830 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 20:11:05,831 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:11:05,831 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:11:05,835 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:11:05,835 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:11:05,836 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:11:05,836 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:11:05,840 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:11:05,840 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:11:05,841 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:11:05,843 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:11:05,843 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 20:11:05,843 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:11:05,844 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:11:05,844 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:11:05,847 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:11:05,847 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 20:11:05,848 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:11:05,848 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:11:05,849 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:11:05,851 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:11:05,851 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:11:05,852 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:11:05,852 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:11:05,854 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 20:11:41,875 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 20:11:41,876 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:11:41,877 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:11:41,877 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 20:11:41,878 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 20:11:41,878 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:11:41,878 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:11:41,878 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 20:11:41,879 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 20:11:41,879 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:11:41,879 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 20:11:41,879 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 20:11:41,880 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 20:11:41,880 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:11:41,880 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 20:11:41,881 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 20:11:41,881 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 20:11:41,881 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:11:41,882 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 20:11:41,882 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:11:41,883 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 20:11:41,883 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:11:41,883 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 20:11:41,886 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:11:41,886 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 20:11:41,887 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:11:41,887 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:11:41,896 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:11:41,897 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:11:41,897 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:11:41,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:11:41,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:11:41,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:11:41,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:11:41,925 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 20:11:47,828 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 20:11:47,829 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:11:47,829 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 20:11:47,830 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:11:47,830 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:11:47,834 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:11:47,835 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:11:47,835 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:11:47,835 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:11:47,839 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:11:47,839 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:11:47,840 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:11:47,843 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:11:47,843 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:11:47,844 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:11:47,844 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:11:47,844 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:11:47,853 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:11:47,853 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:11:47,855 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:11:47,855 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:11:47,855 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:11:47,858 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:11:47,858 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:11:47,859 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:11:47,859 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:11:47,872 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 20:14:00,957 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 20:14:00,958 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:14:00,959 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:14:00,960 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 20:14:00,960 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 20:14:00,960 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:14:00,961 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:14:00,961 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 20:14:00,962 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 20:14:00,962 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:14:00,962 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 20:14:00,962 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 20:14:00,963 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 20:14:00,963 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:14:00,963 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 20:14:00,964 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 20:14:00,964 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 20:14:00,965 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:14:00,965 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 20:14:00,965 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:14:00,966 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 20:14:00,966 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:14:00,974 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 20:14:00,977 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:14:00,977 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 20:14:00,978 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:14:00,978 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:14:00,988 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:14:00,988 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:14:00,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:14:00,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:14:00,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:14:00,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:14:00,990 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:14:01,020 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 20:14:02,405 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 20:14:02,406 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:14:02,406 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 20:14:02,407 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:14:02,407 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:14:02,411 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:14:02,411 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:14:02,411 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:14:02,411 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:14:02,415 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:14:02,416 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:14:02,416 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:14:02,419 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:14:02,419 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:14:02,420 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:14:02,420 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:14:02,420 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:14:02,429 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:14:02,429 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:14:02,431 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:14:02,431 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:14:02,431 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:14:02,434 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:14:02,434 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:14:02,435 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:14:02,435 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:14:02,448 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 20:14:11,390 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 20:14:11,392 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:14:11,392 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 20:14:11,392 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:14:11,393 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:14:11,397 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:14:11,397 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:14:11,398 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:14:11,398 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:14:11,398 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:14:11,398 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:14:11,398 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:14:11,400 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 20:14:12,927 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 20:14:12,929 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:14:12,929 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 20:14:12,929 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:14:12,930 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:14:12,933 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:14:12,933 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:14:12,934 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:14:12,934 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:14:12,938 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:14:12,938 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:14:12,938 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:14:12,940 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:14:12,940 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 20:14:12,941 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:14:12,941 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:14:12,941 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:14:12,944 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:14:12,945 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 20:14:12,946 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:14:12,946 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:14:12,946 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:14:12,949 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:14:12,950 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:14:12,950 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:14:12,950 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:14:12,953 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 20:15:06,362 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 20:15:06,362 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:15:06,364 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:15:06,365 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 20:15:06,365 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 20:15:06,365 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:15:06,366 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:15:06,366 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 20:15:06,367 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 20:15:06,367 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:15:06,367 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 20:15:06,367 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 20:15:06,368 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 20:15:06,368 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:15:06,369 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 20:15:06,369 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 20:15:06,370 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 20:15:06,370 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:15:06,371 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 20:15:06,371 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:15:06,371 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 20:15:06,372 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:15:06,372 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 20:15:06,375 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:15:06,375 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 20:15:06,376 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:15:06,377 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:15:06,388 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:15:06,388 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:15:06,389 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:15:06,389 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:15:06,389 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:15:06,389 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:15:06,389 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:15:06,424 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 20:15:07,820 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 20:15:07,821 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:15:07,821 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 20:15:07,822 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:15:07,822 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:15:07,826 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:15:07,826 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:15:07,827 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:15:07,827 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:15:07,833 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:15:07,833 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:15:07,834 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:15:07,838 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:15:07,838 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:15:07,839 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:15:07,839 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:15:07,839 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:15:07,850 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:15:07,851 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:15:07,852 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:15:07,853 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:15:07,853 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:15:07,856 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:15:07,856 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 20:15:07,857 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:15:07,857 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:15:07,874 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 20:15:16,235 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 20:15:16,237 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:15:16,237 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 20:15:16,237 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:15:16,238 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:15:16,243 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:15:16,243 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:15:16,244 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:15:16,244 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:15:16,244 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:15:16,244 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:15:16,244 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:15:16,246 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 20:15:17,426 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 20:15:17,427 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:15:17,427 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 20:15:17,428 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:15:17,429 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:15:17,432 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:15:17,432 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:15:17,433 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:15:17,433 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:15:17,438 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:15:17,438 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:15:17,439 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:15:17,441 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:15:17,441 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 20:15:17,442 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:15:17,442 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:15:17,442 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:15:17,446 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:15:17,447 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 20:15:17,447 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:15:17,448 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:15:17,448 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:15:17,451 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:15:17,451 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:15:17,452 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:15:17,452 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:15:17,455 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 20:15:57,654 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:15:57,654 INFO sqlalchemy.engine.base.Engine MainThread : (<built-in function id>,)
2020-06-08 20:15:57,655 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:16:08,051 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:16:08,051 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:16:08,051 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:16:08,052 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:16:52,711 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:16:52,711 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:16:52,712 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:16:52,712 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:17:03,773 INFO sqlalchemy.engine.base.Engine MainThread : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name, datesofinterest_1.doi_filter AS datesofinterest_1_doi_filter 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:17:03,773 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:17:03,774 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'complexgroups_1_id', 'complexgroups_1_group_name', 'datesofinterest_1_doi_filter')
2020-06-08 20:17:03,774 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (20, 'BaU Zone 2', 1, 'Test Group', '1')
2020-06-08 20:18:36,388 INFO sqlalchemy.engine.base.Engine MainThread : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:18:36,388 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:18:36,389 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:18:36,389 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (1, 'Test Group')
2020-06-08 20:18:52,132 INFO sqlalchemy.engine.base.Engine MainThread : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:18:52,133 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:18:52,133 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:18:52,133 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (1, 'Test Group')
2020-06-08 20:18:59,608 INFO sqlalchemy.engine.base.Engine MainThread : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:18:59,609 INFO sqlalchemy.engine.base.Engine MainThread : (20,)
2020-06-08 20:18:59,609 DEBUG sqlalchemy.engine.base.Engine MainThread : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:18:59,609 DEBUG sqlalchemy.engine.base.Engine MainThread : Row (1, 'Test Group')
2020-06-08 20:19:41,407 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 20:19:41,407 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:19:41,408 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:19:41,409 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 20:19:41,410 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 20:19:41,410 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:19:41,410 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:19:41,410 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 20:19:41,411 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 20:19:41,411 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:19:41,411 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 20:19:41,411 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 20:19:41,412 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 20:19:41,412 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:19:41,412 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 20:19:41,413 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 20:19:41,413 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 20:19:41,414 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:19:41,414 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 20:19:41,414 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:19:41,415 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 20:19:41,415 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:19:41,416 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 20:19:41,418 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:19:41,418 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 20:19:41,419 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:19:41,420 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:19:41,429 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:19:41,429 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:19:41,430 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:19:41,430 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:19:41,430 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:19:41,430 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:19:41,430 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:19:41,462 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 20:19:42,347 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 20:19:42,349 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:19:42,349 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 20:19:42,349 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:19:42,350 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:19:42,354 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:19:42,354 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:19:42,354 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:19:42,355 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:19:42,359 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:19:42,359 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:19:42,360 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:19:42,363 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:19:42,363 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:19:42,364 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:19:42,364 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:19:42,364 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:19:42,373 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:19:42,373 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:19:42,374 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:19:42,375 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:19:42,375 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:19:42,377 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:19:42,377 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:19:42,378 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:19:42,378 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group')
2020-06-08 20:19:42,393 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 20:19:56,664 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 20:19:56,665 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:19:56,665 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 20:19:56,666 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:19:56,666 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:19:56,671 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:19:56,671 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:19:56,672 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:19:56,672 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:19:56,672 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:19:56,672 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:19:56,672 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:19:56,675 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 20:19:57,890 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 20:19:57,891 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:19:57,891 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 20:19:57,892 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:19:57,892 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:19:57,896 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:19:57,896 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:19:57,897 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:19:57,897 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:19:57,902 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:19:57,902 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:19:57,902 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:19:57,904 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:19:57,904 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 20:19:57,905 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:19:57,905 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:19:57,905 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:19:57,908 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:19:57,908 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 20:19:57,909 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:19:57,909 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:19:57,909 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:19:57,912 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:19:57,912 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 20:19:57,913 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:19:57,913 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group')
2020-06-08 20:19:57,915 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 20:22:10,948 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 20:22:10,949 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:10,949 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-08 20:22:10,950 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:10,951 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:10,955 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:22:10,955 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:22:10,956 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:22:10,956 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:22:10,956 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:22:10,956 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:22:10,956 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:22:10,959 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 20:22:17,751 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-08 20:22:17,752 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:17,752 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-08 20:22:17,753 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:17,753 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:17,755 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:17,755 INFO sqlalchemy.engine.base.Engine Thread-7 : ('philip', 1, 1)
2020-06-08 20:22:17,756 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:17,756 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:17,762 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 20:22:17,762 INFO sqlalchemy.engine.base.Engine Thread-7 : ()
2020-06-08 20:22:17,764 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 20:22:17,764 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 20:22:17,764 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 20:22:17,830 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:17,830 INFO sqlalchemy.engine.base.Engine Thread-7 : ('philip', 1, 1)
2020-06-08 20:22:17,831 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:17,831 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:17,834 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-08 20:22:21,498 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-08 20:22:21,499 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:21,499 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-08 20:22:21,500 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:21,500 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:21,503 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:21,503 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 20:22:21,503 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:21,503 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:21,505 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 20:22:21,505 INFO sqlalchemy.engine.base.Engine Thread-17 : ('1', 1)
2020-06-08 20:22:21,505 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:22:21,506 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:22:21,509 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 20:22:21,510 INFO sqlalchemy.engine.base.Engine Thread-17 : ()
2020-06-08 20:22:21,511 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:22:21,511 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:22:21,511 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:22:21,513 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 20:22:21,513 INFO sqlalchemy.engine.base.Engine Thread-17 : (66,)
2020-06-08 20:22:21,514 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:21,514 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 20:22:21,514 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 20:22:21,515 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:21,515 INFO sqlalchemy.engine.base.Engine Thread-17 : (105,)
2020-06-08 20:22:21,516 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:21,516 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 20:22:21,516 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 20:22:21,540 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:21,540 INFO sqlalchemy.engine.base.Engine Thread-17 : ('philip', 1, 1)
2020-06-08 20:22:21,541 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:21,541 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:21,545 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-08 20:22:27,265 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-08 20:22:27,266 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:27,266 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-08 20:22:27,267 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:27,267 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:27,269 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:27,270 INFO sqlalchemy.engine.base.Engine Thread-27 : ('philip', 1, 1)
2020-06-08 20:22:27,270 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:27,271 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:27,276 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 20:22:27,276 INFO sqlalchemy.engine.base.Engine Thread-27 : ()
2020-06-08 20:22:27,277 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 20:22:27,277 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 20:22:27,278 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 20:22:27,282 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:27,282 INFO sqlalchemy.engine.base.Engine Thread-27 : ('philip', 1, 1)
2020-06-08 20:22:27,282 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:27,282 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:27,285 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-08 20:22:34,856 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-06-08 20:22:34,857 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:34,857 INFO sqlalchemy.engine.base.Engine Thread-37 : (1, 1)
2020-06-08 20:22:34,858 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:34,858 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:34,861 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:34,861 INFO sqlalchemy.engine.base.Engine Thread-37 : ('philip', 1, 1)
2020-06-08 20:22:34,862 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:34,862 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:34,874 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 20:22:34,874 INFO sqlalchemy.engine.base.Engine Thread-37 : ()
2020-06-08 20:22:34,875 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 20:22:34,875 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:22:34,875 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:22:34,875 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:22:34,875 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:22:34,875 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:22:34,876 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:22:34,896 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:34,896 INFO sqlalchemy.engine.base.Engine Thread-37 : ('philip', 1, 1)
2020-06-08 20:22:34,897 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:34,898 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:34,901 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-06-08 20:22:46,232 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-08 20:22:46,233 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:46,233 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-08 20:22:46,234 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:46,234 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:46,236 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:46,236 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-08 20:22:46,237 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:46,237 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:46,239 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 20:22:46,240 INFO sqlalchemy.engine.base.Engine Thread-47 : ('23', 1)
2020-06-08 20:22:46,240 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 20:22:46,240 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1,2', 107)
2020-06-08 20:22:46,243 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:46,243 INFO sqlalchemy.engine.base.Engine Thread-47 : (82,)
2020-06-08 20:22:46,244 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:46,244 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 20:22:46,244 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 20:22:46,244 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 20:22:46,246 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 20:22:46,246 INFO sqlalchemy.engine.base.Engine Thread-47 : (1,)
2020-06-08 20:22:46,246 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:46,246 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 20:22:46,246 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 20:22:46,247 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 20:22:46,248 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-06-08 20:22:46,248 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:22:46,248 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:22:46,248 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:22:46,250 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:46,250 INFO sqlalchemy.engine.base.Engine Thread-47 : (127,)
2020-06-08 20:22:46,250 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:46,250 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:46,250 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:46,250 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:46,251 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 20:22:46,252 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:46,252 INFO sqlalchemy.engine.base.Engine Thread-47 : (105,)
2020-06-08 20:22:46,252 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:46,252 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 20:22:46,253 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 20:22:46,287 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:46,287 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-08 20:22:46,288 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:46,288 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:46,292 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-06-08 20:22:52,172 INFO sqlalchemy.engine.base.Engine Thread-57 : BEGIN (implicit)
2020-06-08 20:22:52,173 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:52,173 INFO sqlalchemy.engine.base.Engine Thread-57 : (1, 1)
2020-06-08 20:22:52,173 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:52,174 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:52,176 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:52,176 INFO sqlalchemy.engine.base.Engine Thread-57 : ('philip', 1, 1)
2020-06-08 20:22:52,176 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:52,177 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:52,178 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 20:22:52,178 INFO sqlalchemy.engine.base.Engine Thread-57 : ('23', 1)
2020-06-08 20:22:52,178 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 20:22:52,179 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1,2', 107)
2020-06-08 20:22:52,183 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:52,183 INFO sqlalchemy.engine.base.Engine Thread-57 : (82,)
2020-06-08 20:22:52,183 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:52,184 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 20:22:52,184 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 20:22:52,184 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 20:22:52,185 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 20:22:52,185 INFO sqlalchemy.engine.base.Engine Thread-57 : (1,)
2020-06-08 20:22:52,186 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:52,186 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 20:22:52,186 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 20:22:52,187 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 20:22:52,187 INFO sqlalchemy.engine.base.Engine Thread-57 : ()
2020-06-08 20:22:52,188 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:22:52,188 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:22:52,188 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:22:52,189 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:52,189 INFO sqlalchemy.engine.base.Engine Thread-57 : (127,)
2020-06-08 20:22:52,190 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:52,190 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:52,190 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:52,190 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:52,190 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 20:22:52,191 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:52,191 INFO sqlalchemy.engine.base.Engine Thread-57 : (105,)
2020-06-08 20:22:52,192 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:52,192 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 20:22:52,192 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 20:22:52,196 INFO sqlalchemy.engine.base.Engine Thread-57 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-08 20:22:52,196 INFO sqlalchemy.engine.base.Engine Thread-57 : ('23', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 1, 23)
2020-06-08 20:22:52,198 INFO sqlalchemy.engine.base.Engine Thread-57 : COMMIT
2020-06-08 20:22:52,235 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-08 20:22:52,236 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:52,236 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-06-08 20:22:52,237 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:52,237 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:52,239 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:52,239 INFO sqlalchemy.engine.base.Engine Thread-58 : ('philip', 1, 1)
2020-06-08 20:22:52,240 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:52,241 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:52,248 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 20:22:52,249 INFO sqlalchemy.engine.base.Engine Thread-58 : ()
2020-06-08 20:22:52,249 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:22:52,250 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:22:52,251 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:22:52,251 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:22:52,251 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:22:52,251 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:22:52,255 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:52,255 INFO sqlalchemy.engine.base.Engine Thread-58 : ('philip', 1, 1)
2020-06-08 20:22:52,256 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:52,256 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:52,260 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-08 20:22:59,126 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-06-08 20:22:59,127 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:22:59,127 INFO sqlalchemy.engine.base.Engine Thread-68 : (1, 1)
2020-06-08 20:22:59,128 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:59,128 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:59,130 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:59,130 INFO sqlalchemy.engine.base.Engine Thread-68 : ('philip', 1, 1)
2020-06-08 20:22:59,131 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:59,131 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:59,133 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 20:22:59,133 INFO sqlalchemy.engine.base.Engine Thread-68 : ('22', 1)
2020-06-08 20:22:59,133 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 20:22:59,133 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-08 20:22:59,136 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:59,136 INFO sqlalchemy.engine.base.Engine Thread-68 : (82,)
2020-06-08 20:22:59,136 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:59,137 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 20:22:59,137 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 20:22:59,137 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 20:22:59,138 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 20:22:59,138 INFO sqlalchemy.engine.base.Engine Thread-68 : (1,)
2020-06-08 20:22:59,139 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:59,139 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 20:22:59,139 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 20:22:59,140 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 20:22:59,140 INFO sqlalchemy.engine.base.Engine Thread-68 : ()
2020-06-08 20:22:59,140 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:22:59,141 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:22:59,141 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:22:59,142 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:59,142 INFO sqlalchemy.engine.base.Engine Thread-68 : (127,)
2020-06-08 20:22:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:22:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 20:22:59,144 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:22:59,144 INFO sqlalchemy.engine.base.Engine Thread-68 : (105,)
2020-06-08 20:22:59,145 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:22:59,145 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 20:22:59,145 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 20:22:59,149 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:22:59,149 INFO sqlalchemy.engine.base.Engine Thread-68 : ('philip', 1, 1)
2020-06-08 20:22:59,150 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:22:59,150 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:22:59,154 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-06-08 20:23:06,474 INFO sqlalchemy.engine.base.Engine Thread-78 : BEGIN (implicit)
2020-06-08 20:23:06,475 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:06,476 INFO sqlalchemy.engine.base.Engine Thread-78 : (1, 1)
2020-06-08 20:23:06,476 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:06,476 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:06,478 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:06,478 INFO sqlalchemy.engine.base.Engine Thread-78 : ('philip', 1, 1)
2020-06-08 20:23:06,479 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:06,479 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:06,481 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 20:23:06,481 INFO sqlalchemy.engine.base.Engine Thread-78 : ('22', 1)
2020-06-08 20:23:06,481 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 20:23:06,482 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-08 20:23:06,484 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:06,485 INFO sqlalchemy.engine.base.Engine Thread-78 : (82,)
2020-06-08 20:23:06,485 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:06,486 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 20:23:06,486 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 20:23:06,486 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 20:23:06,487 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 20:23:06,488 INFO sqlalchemy.engine.base.Engine Thread-78 : (1,)
2020-06-08 20:23:06,488 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:06,488 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 20:23:06,488 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 20:23:06,489 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 20:23:06,489 INFO sqlalchemy.engine.base.Engine Thread-78 : ()
2020-06-08 20:23:06,490 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:06,490 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:06,490 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:06,491 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:06,492 INFO sqlalchemy.engine.base.Engine Thread-78 : (127,)
2020-06-08 20:23:06,492 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:06,492 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:06,492 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:06,492 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:06,493 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 20:23:06,494 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:06,494 INFO sqlalchemy.engine.base.Engine Thread-78 : (105,)
2020-06-08 20:23:06,494 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:06,495 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 20:23:06,495 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 20:23:06,496 INFO sqlalchemy.engine.base.Engine Thread-78 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-08 20:23:06,496 INFO sqlalchemy.engine.base.Engine Thread-78 : ('22', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 2, 22)
2020-06-08 20:23:06,497 INFO sqlalchemy.engine.base.Engine Thread-78 : COMMIT
2020-06-08 20:23:06,561 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-06-08 20:23:06,562 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:06,562 INFO sqlalchemy.engine.base.Engine Thread-79 : (1, 1)
2020-06-08 20:23:06,563 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:06,563 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:06,565 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:06,565 INFO sqlalchemy.engine.base.Engine Thread-79 : ('philip', 1, 1)
2020-06-08 20:23:06,566 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:06,566 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:06,574 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 20:23:06,574 INFO sqlalchemy.engine.base.Engine Thread-79 : ()
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 20:23:06,575 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:06,576 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:06,576 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:06,576 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:06,576 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:23:06,576 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:06,580 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:06,580 INFO sqlalchemy.engine.base.Engine Thread-79 : ('philip', 1, 1)
2020-06-08 20:23:06,581 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:06,581 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:06,585 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-06-08 20:23:10,096 INFO sqlalchemy.engine.base.Engine Thread-89 : BEGIN (implicit)
2020-06-08 20:23:10,098 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:23:10,098 INFO sqlalchemy.engine.base.Engine Thread-89 : ()
2020-06-08 20:23:10,099 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:23:10,100 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:23:10,100 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:23:10,102 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:10,102 INFO sqlalchemy.engine.base.Engine Thread-89 : (100,)
2020-06-08 20:23:10,103 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:10,103 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 20:23:10,103 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 20:23:10,103 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 20:23:10,103 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 20:23:10,103 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 20:23:10,105 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:10,105 INFO sqlalchemy.engine.base.Engine Thread-89 : (1, 1)
2020-06-08 20:23:10,106 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:10,106 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:10,116 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:10,116 INFO sqlalchemy.engine.base.Engine Thread-89 : ('philip', 1, 1)
2020-06-08 20:23:10,117 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:10,117 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:10,119 INFO sqlalchemy.engine.base.Engine Thread-89 : ROLLBACK
2020-06-08 20:23:10,387 INFO sqlalchemy.engine.base.Engine Thread-99 : BEGIN (implicit)
2020-06-08 20:23:10,389 INFO sqlalchemy.engine.base.Engine Thread-99 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 20:23:10,389 INFO sqlalchemy.engine.base.Engine Thread-99 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:10,390 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 20:23:10,390 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 20:23:10,390 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 20:23:10,390 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:10,390 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 20:23:10,390 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:10,390 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:10,395 INFO sqlalchemy.engine.base.Engine Thread-99 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 20:23:10,395 INFO sqlalchemy.engine.base.Engine Thread-99 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:10,396 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:23:10,396 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 20:23:10,400 INFO sqlalchemy.engine.base.Engine Thread-99 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 20:23:10,400 INFO sqlalchemy.engine.base.Engine Thread-99 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:10,401 DEBUG sqlalchemy.engine.base.Engine Thread-99 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:23:10,402 INFO sqlalchemy.engine.base.Engine Thread-99 : ROLLBACK
2020-06-08 20:23:10,426 INFO sqlalchemy.engine.base.Engine Thread-100 : BEGIN (implicit)
2020-06-08 20:23:10,427 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 20:23:10,427 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:10,428 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 20:23:10,428 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 20:23:10,428 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 20:23:10,428 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:10,429 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 20:23:10,429 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:10,429 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:10,433 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 20:23:10,433 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:10,434 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:23:10,434 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 20:23:10,438 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 20:23:10,438 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:10,438 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:23:10,439 INFO sqlalchemy.engine.base.Engine Thread-100 : ROLLBACK
2020-06-08 20:23:11,338 INFO sqlalchemy.engine.base.Engine Thread-101 : BEGIN (implicit)
2020-06-08 20:23:11,339 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:11,339 INFO sqlalchemy.engine.base.Engine Thread-101 : (1, 1)
2020-06-08 20:23:11,340 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:11,340 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:11,345 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:23:11,345 INFO sqlalchemy.engine.base.Engine Thread-101 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:23:11,346 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:11,346 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:23:11,346 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:23:11,346 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:23:11,346 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:23:11,349 INFO sqlalchemy.engine.base.Engine Thread-101 : ROLLBACK
2020-06-08 20:23:13,210 INFO sqlalchemy.engine.base.Engine Thread-102 : BEGIN (implicit)
2020-06-08 20:23:13,211 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:13,211 INFO sqlalchemy.engine.base.Engine Thread-102 : (1, 1)
2020-06-08 20:23:13,211 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:13,212 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:13,215 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:13,215 INFO sqlalchemy.engine.base.Engine Thread-102 : (23,)
2020-06-08 20:23:13,215 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:13,216 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:23:13,219 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:23:13,220 INFO sqlalchemy.engine.base.Engine Thread-102 : (23,)
2020-06-08 20:23:13,220 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:23:13,221 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:23:13,222 INFO sqlalchemy.engine.base.Engine Thread-102 : ()
2020-06-08 20:23:13,222 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:13,222 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:13,222 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:13,225 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:23:13,225 INFO sqlalchemy.engine.base.Engine Thread-102 : ()
2020-06-08 20:23:13,226 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:23:13,226 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:23:13,227 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:23:13,229 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:13,229 INFO sqlalchemy.engine.base.Engine Thread-102 : (23,)
2020-06-08 20:23:13,229 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:23:13,230 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'Test Group')
2020-06-08 20:23:13,232 INFO sqlalchemy.engine.base.Engine Thread-102 : ROLLBACK
2020-06-08 20:23:15,811 INFO sqlalchemy.engine.base.Engine Thread-103 : BEGIN (implicit)
2020-06-08 20:23:15,812 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:15,812 INFO sqlalchemy.engine.base.Engine Thread-103 : (1, 1)
2020-06-08 20:23:15,812 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:15,813 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:15,817 INFO sqlalchemy.engine.base.Engine Thread-103 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:23:15,817 INFO sqlalchemy.engine.base.Engine Thread-103 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:23:15,818 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:15,818 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:23:15,818 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:23:15,818 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:23:15,818 DEBUG sqlalchemy.engine.base.Engine Thread-103 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:23:15,820 INFO sqlalchemy.engine.base.Engine Thread-103 : ROLLBACK
2020-06-08 20:23:17,223 INFO sqlalchemy.engine.base.Engine Thread-104 : BEGIN (implicit)
2020-06-08 20:23:17,224 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:17,225 INFO sqlalchemy.engine.base.Engine Thread-104 : (1, 1)
2020-06-08 20:23:17,225 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:17,225 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:17,229 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:17,229 INFO sqlalchemy.engine.base.Engine Thread-104 : (20,)
2020-06-08 20:23:17,229 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:17,229 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:23:17,233 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:23:17,233 INFO sqlalchemy.engine.base.Engine Thread-104 : (20,)
2020-06-08 20:23:17,234 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:23:17,235 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:23:17,235 INFO sqlalchemy.engine.base.Engine Thread-104 : ()
2020-06-08 20:23:17,236 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:17,236 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:17,236 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:17,239 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:23:17,239 INFO sqlalchemy.engine.base.Engine Thread-104 : ()
2020-06-08 20:23:17,240 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:23:17,241 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:23:17,241 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:23:17,243 INFO sqlalchemy.engine.base.Engine Thread-104 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:17,243 INFO sqlalchemy.engine.base.Engine Thread-104 : (20,)
2020-06-08 20:23:17,244 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:23:17,244 DEBUG sqlalchemy.engine.base.Engine Thread-104 : Row (1, 'Test Group')
2020-06-08 20:23:17,246 INFO sqlalchemy.engine.base.Engine Thread-104 : ROLLBACK
2020-06-08 20:23:22,110 INFO sqlalchemy.engine.base.Engine Thread-105 : BEGIN (implicit)
2020-06-08 20:23:22,111 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:22,112 INFO sqlalchemy.engine.base.Engine Thread-105 : (1, 1)
2020-06-08 20:23:22,112 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:22,112 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:22,115 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:22,115 INFO sqlalchemy.engine.base.Engine Thread-105 : ('philip', 1, 1)
2020-06-08 20:23:22,115 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:22,115 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:22,123 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 20:23:22,124 INFO sqlalchemy.engine.base.Engine Thread-105 : ()
2020-06-08 20:23:22,125 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 20:23:22,125 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:22,125 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:22,125 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:23:22,125 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:22,125 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:23:22,126 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:22,132 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:22,132 INFO sqlalchemy.engine.base.Engine Thread-105 : ('philip', 1, 1)
2020-06-08 20:23:22,133 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:22,133 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:22,137 INFO sqlalchemy.engine.base.Engine Thread-105 : ROLLBACK
2020-06-08 20:23:31,489 INFO sqlalchemy.engine.base.Engine Thread-115 : BEGIN (implicit)
2020-06-08 20:23:31,490 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:31,490 INFO sqlalchemy.engine.base.Engine Thread-115 : (1, 1)
2020-06-08 20:23:31,491 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:31,492 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:31,494 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:31,494 INFO sqlalchemy.engine.base.Engine Thread-115 : ('philip', 1, 1)
2020-06-08 20:23:31,495 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:31,495 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:31,496 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 20:23:31,497 INFO sqlalchemy.engine.base.Engine Thread-115 : ('23', 1)
2020-06-08 20:23:31,497 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 20:23:31,497 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 20:23:31,500 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:31,500 INFO sqlalchemy.engine.base.Engine Thread-115 : (82,)
2020-06-08 20:23:31,500 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:31,501 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 20:23:31,501 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 20:23:31,501 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 20:23:31,502 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 20:23:31,502 INFO sqlalchemy.engine.base.Engine Thread-115 : (1,)
2020-06-08 20:23:31,503 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:31,503 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 20:23:31,503 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 20:23:31,504 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 20:23:31,505 INFO sqlalchemy.engine.base.Engine Thread-115 : ()
2020-06-08 20:23:31,505 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:31,505 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:31,505 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:31,507 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:31,507 INFO sqlalchemy.engine.base.Engine Thread-115 : (127,)
2020-06-08 20:23:31,507 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:31,507 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:31,508 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:31,508 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:31,508 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 20:23:31,509 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:31,509 INFO sqlalchemy.engine.base.Engine Thread-115 : (105,)
2020-06-08 20:23:31,510 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:31,510 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 20:23:31,510 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 20:23:31,515 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:31,515 INFO sqlalchemy.engine.base.Engine Thread-115 : ('philip', 1, 1)
2020-06-08 20:23:31,515 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:31,516 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:31,519 INFO sqlalchemy.engine.base.Engine Thread-115 : ROLLBACK
2020-06-08 20:23:34,970 INFO sqlalchemy.engine.base.Engine Thread-125 : BEGIN (implicit)
2020-06-08 20:23:34,971 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:34,971 INFO sqlalchemy.engine.base.Engine Thread-125 : (1, 1)
2020-06-08 20:23:34,972 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:34,972 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:34,974 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:34,974 INFO sqlalchemy.engine.base.Engine Thread-125 : ('philip', 1, 1)
2020-06-08 20:23:34,975 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:34,975 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:34,977 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 20:23:34,977 INFO sqlalchemy.engine.base.Engine Thread-125 : ('23', 1)
2020-06-08 20:23:34,978 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 20:23:34,978 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (23, 'Zone 5 BAU', 83, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 20:23:34,981 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:34,981 INFO sqlalchemy.engine.base.Engine Thread-125 : (82,)
2020-06-08 20:23:34,982 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:34,982 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 20:23:34,982 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 20:23:34,982 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 20:23:34,983 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 20:23:34,983 INFO sqlalchemy.engine.base.Engine Thread-125 : (1,)
2020-06-08 20:23:34,984 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:34,984 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 20:23:34,985 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 20:23:34,986 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 20:23:34,986 INFO sqlalchemy.engine.base.Engine Thread-125 : ()
2020-06-08 20:23:34,987 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:34,987 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:34,987 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:34,988 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:34,988 INFO sqlalchemy.engine.base.Engine Thread-125 : (127,)
2020-06-08 20:23:34,989 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:34,989 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:34,989 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:34,989 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:34,989 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 20:23:34,991 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:34,991 INFO sqlalchemy.engine.base.Engine Thread-125 : (105,)
2020-06-08 20:23:34,991 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:34,992 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 20:23:34,992 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 20:23:34,993 INFO sqlalchemy.engine.base.Engine Thread-125 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-08 20:23:34,993 INFO sqlalchemy.engine.base.Engine Thread-125 : ('23', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 2, 23)
2020-06-08 20:23:34,994 INFO sqlalchemy.engine.base.Engine Thread-125 : COMMIT
2020-06-08 20:23:35,045 INFO sqlalchemy.engine.base.Engine Thread-126 : BEGIN (implicit)
2020-06-08 20:23:35,046 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:35,046 INFO sqlalchemy.engine.base.Engine Thread-126 : (1, 1)
2020-06-08 20:23:35,046 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:35,047 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:35,049 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:35,049 INFO sqlalchemy.engine.base.Engine Thread-126 : ('philip', 1, 1)
2020-06-08 20:23:35,050 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:35,050 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:35,059 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 20:23:35,060 INFO sqlalchemy.engine.base.Engine Thread-126 : ()
2020-06-08 20:23:35,060 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:35,061 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:35,062 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 20:23:35,062 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 20:23:35,062 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 20:23:35,062 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 20:23:35,066 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:35,066 INFO sqlalchemy.engine.base.Engine Thread-126 : ('philip', 1, 1)
2020-06-08 20:23:35,067 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:35,067 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:35,071 INFO sqlalchemy.engine.base.Engine Thread-126 : ROLLBACK
2020-06-08 20:23:37,754 INFO sqlalchemy.engine.base.Engine Thread-136 : BEGIN (implicit)
2020-06-08 20:23:37,755 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:37,756 INFO sqlalchemy.engine.base.Engine Thread-136 : (1, 1)
2020-06-08 20:23:37,756 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:37,757 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:37,759 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:37,759 INFO sqlalchemy.engine.base.Engine Thread-136 : ('philip', 1, 1)
2020-06-08 20:23:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:37,760 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:37,762 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 20:23:37,762 INFO sqlalchemy.engine.base.Engine Thread-136 : ('20', 1)
2020-06-08 20:23:37,763 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 20:23:37,765 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 20:23:37,768 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:37,768 INFO sqlalchemy.engine.base.Engine Thread-136 : (82,)
2020-06-08 20:23:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 20:23:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 20:23:37,769 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 20:23:37,770 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 20:23:37,770 INFO sqlalchemy.engine.base.Engine Thread-136 : (1,)
2020-06-08 20:23:37,770 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:37,771 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 20:23:37,771 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 20:23:37,772 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 20:23:37,772 INFO sqlalchemy.engine.base.Engine Thread-136 : ()
2020-06-08 20:23:37,772 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:37,772 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:37,773 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:37,774 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:37,774 INFO sqlalchemy.engine.base.Engine Thread-136 : (127,)
2020-06-08 20:23:37,774 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:37,775 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:37,775 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:37,775 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 20:23:37,775 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 20:23:37,776 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:37,776 INFO sqlalchemy.engine.base.Engine Thread-136 : (105,)
2020-06-08 20:23:37,777 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:37,777 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 20:23:37,777 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 20:23:37,781 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:37,781 INFO sqlalchemy.engine.base.Engine Thread-136 : ('philip', 1, 1)
2020-06-08 20:23:37,782 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:37,782 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:37,786 INFO sqlalchemy.engine.base.Engine Thread-136 : ROLLBACK
2020-06-08 20:23:39,973 INFO sqlalchemy.engine.base.Engine Thread-146 : BEGIN (implicit)
2020-06-08 20:23:39,975 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:23:39,976 INFO sqlalchemy.engine.base.Engine Thread-146 : ()
2020-06-08 20:23:39,977 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:23:39,977 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:23:39,977 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:23:39,979 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 20:23:39,979 INFO sqlalchemy.engine.base.Engine Thread-146 : (100,)
2020-06-08 20:23:39,980 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 20:23:39,980 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 20:23:39,980 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 20:23:39,980 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 20:23:39,980 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 20:23:39,981 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 20:23:39,983 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:39,983 INFO sqlalchemy.engine.base.Engine Thread-146 : (1, 1)
2020-06-08 20:23:39,984 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:39,984 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:39,989 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 20:23:39,989 INFO sqlalchemy.engine.base.Engine Thread-146 : ('philip', 1, 1)
2020-06-08 20:23:39,990 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:39,990 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:39,993 INFO sqlalchemy.engine.base.Engine Thread-146 : ROLLBACK
2020-06-08 20:23:40,251 INFO sqlalchemy.engine.base.Engine Thread-156 : BEGIN (implicit)
2020-06-08 20:23:40,252 INFO sqlalchemy.engine.base.Engine Thread-156 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 20:23:40,252 INFO sqlalchemy.engine.base.Engine Thread-156 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:40,253 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 20:23:40,254 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 20:23:40,254 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 20:23:40,254 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:40,254 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 20:23:40,254 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:40,254 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:40,258 INFO sqlalchemy.engine.base.Engine Thread-156 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 20:23:40,258 INFO sqlalchemy.engine.base.Engine Thread-156 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:40,259 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:23:40,259 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 20:23:40,263 INFO sqlalchemy.engine.base.Engine Thread-156 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 20:23:40,263 INFO sqlalchemy.engine.base.Engine Thread-156 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:40,264 DEBUG sqlalchemy.engine.base.Engine Thread-156 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:23:40,265 INFO sqlalchemy.engine.base.Engine Thread-156 : ROLLBACK
2020-06-08 20:23:40,291 INFO sqlalchemy.engine.base.Engine Thread-157 : BEGIN (implicit)
2020-06-08 20:23:40,292 INFO sqlalchemy.engine.base.Engine Thread-157 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 20:23:40,292 INFO sqlalchemy.engine.base.Engine Thread-157 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:40,293 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 20:23:40,293 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 20:23:40,293 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 20:23:40,293 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:40,293 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 20:23:40,294 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:40,294 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 20:23:40,298 INFO sqlalchemy.engine.base.Engine Thread-157 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 20:23:40,298 INFO sqlalchemy.engine.base.Engine Thread-157 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:40,299 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:23:40,299 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 20:23:40,304 INFO sqlalchemy.engine.base.Engine Thread-157 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 20:23:40,304 INFO sqlalchemy.engine.base.Engine Thread-157 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 20:23:40,305 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 20:23:40,306 INFO sqlalchemy.engine.base.Engine Thread-157 : ROLLBACK
2020-06-08 20:23:41,262 INFO sqlalchemy.engine.base.Engine Thread-158 : BEGIN (implicit)
2020-06-08 20:23:41,263 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:41,263 INFO sqlalchemy.engine.base.Engine Thread-158 : (1, 1)
2020-06-08 20:23:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:41,268 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:23:41,269 INFO sqlalchemy.engine.base.Engine Thread-158 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:23:41,269 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:41,270 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:23:41,270 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:23:41,270 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:23:41,270 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:23:41,272 INFO sqlalchemy.engine.base.Engine Thread-158 : ROLLBACK
2020-06-08 20:23:43,695 INFO sqlalchemy.engine.base.Engine Thread-159 : BEGIN (implicit)
2020-06-08 20:23:43,696 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:43,696 INFO sqlalchemy.engine.base.Engine Thread-159 : (1, 1)
2020-06-08 20:23:43,697 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:43,697 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:43,701 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:43,701 INFO sqlalchemy.engine.base.Engine Thread-159 : (23,)
2020-06-08 20:23:43,701 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:43,701 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:23:43,705 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:23:43,705 INFO sqlalchemy.engine.base.Engine Thread-159 : (23,)
2020-06-08 20:23:43,705 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:23:43,707 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:23:43,707 INFO sqlalchemy.engine.base.Engine Thread-159 : ()
2020-06-08 20:23:43,707 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:43,707 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:43,708 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:43,710 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:23:43,710 INFO sqlalchemy.engine.base.Engine Thread-159 : ()
2020-06-08 20:23:43,711 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:23:43,712 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:23:43,712 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:23:43,714 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:43,714 INFO sqlalchemy.engine.base.Engine Thread-159 : (23,)
2020-06-08 20:23:43,715 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:23:43,715 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (2, 'Test Group 2')
2020-06-08 20:23:43,717 INFO sqlalchemy.engine.base.Engine Thread-159 : ROLLBACK
2020-06-08 20:23:48,333 INFO sqlalchemy.engine.base.Engine Thread-160 : BEGIN (implicit)
2020-06-08 20:23:48,334 INFO sqlalchemy.engine.base.Engine Thread-160 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:48,334 INFO sqlalchemy.engine.base.Engine Thread-160 : (1, 1)
2020-06-08 20:23:48,335 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:48,335 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:48,339 INFO sqlalchemy.engine.base.Engine Thread-160 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:23:48,339 INFO sqlalchemy.engine.base.Engine Thread-160 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:23:48,340 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:48,340 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:23:48,340 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:23:48,340 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:23:48,341 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:23:48,343 INFO sqlalchemy.engine.base.Engine Thread-160 : ROLLBACK
2020-06-08 20:23:50,181 INFO sqlalchemy.engine.base.Engine Thread-161 : BEGIN (implicit)
2020-06-08 20:23:50,182 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:50,182 INFO sqlalchemy.engine.base.Engine Thread-161 : (1, 1)
2020-06-08 20:23:50,183 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:50,183 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:50,187 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:50,187 INFO sqlalchemy.engine.base.Engine Thread-161 : (20,)
2020-06-08 20:23:50,187 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:50,188 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:23:50,191 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:23:50,191 INFO sqlalchemy.engine.base.Engine Thread-161 : (20,)
2020-06-08 20:23:50,191 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:23:50,193 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:23:50,193 INFO sqlalchemy.engine.base.Engine Thread-161 : ()
2020-06-08 20:23:50,194 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:50,194 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:50,194 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:50,197 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:23:50,197 INFO sqlalchemy.engine.base.Engine Thread-161 : ()
2020-06-08 20:23:50,198 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:23:50,198 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:23:50,198 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:23:50,201 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:50,201 INFO sqlalchemy.engine.base.Engine Thread-161 : (20,)
2020-06-08 20:23:50,201 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:23:50,202 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'Test Group')
2020-06-08 20:23:50,204 INFO sqlalchemy.engine.base.Engine Thread-161 : ROLLBACK
2020-06-08 20:23:55,205 INFO sqlalchemy.engine.base.Engine Thread-162 : BEGIN (implicit)
2020-06-08 20:23:55,206 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:55,206 INFO sqlalchemy.engine.base.Engine Thread-162 : (1, 1)
2020-06-08 20:23:55,207 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:55,207 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:55,214 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:23:55,214 INFO sqlalchemy.engine.base.Engine Thread-162 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:23:55,215 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:55,215 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:23:55,215 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:23:55,215 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:23:55,215 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:23:55,217 INFO sqlalchemy.engine.base.Engine Thread-162 : ROLLBACK
2020-06-08 20:23:56,642 INFO sqlalchemy.engine.base.Engine Thread-163 : BEGIN (implicit)
2020-06-08 20:23:56,643 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:23:56,643 INFO sqlalchemy.engine.base.Engine Thread-163 : (1, 1)
2020-06-08 20:23:56,643 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:23:56,644 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:23:56,648 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:56,648 INFO sqlalchemy.engine.base.Engine Thread-163 : (23,)
2020-06-08 20:23:56,648 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:23:56,649 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:23:56,653 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:23:56,653 INFO sqlalchemy.engine.base.Engine Thread-163 : (23,)
2020-06-08 20:23:56,653 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:23:56,655 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:23:56,655 INFO sqlalchemy.engine.base.Engine Thread-163 : ()
2020-06-08 20:23:56,656 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:23:56,656 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:23:56,656 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:23:56,659 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:23:56,659 INFO sqlalchemy.engine.base.Engine Thread-163 : ()
2020-06-08 20:23:56,660 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:23:56,660 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:23:56,660 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:23:56,663 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:23:56,663 INFO sqlalchemy.engine.base.Engine Thread-163 : (23,)
2020-06-08 20:23:56,663 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:23:56,663 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (2, 'Test Group 2')
2020-06-08 20:23:56,665 INFO sqlalchemy.engine.base.Engine Thread-163 : ROLLBACK
2020-06-08 20:24:04,586 INFO sqlalchemy.engine.base.Engine Thread-164 : BEGIN (implicit)
2020-06-08 20:24:04,587 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:24:04,587 INFO sqlalchemy.engine.base.Engine Thread-164 : (1, 1)
2020-06-08 20:24:04,588 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:24:04,588 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:24:04,592 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:24:04,592 INFO sqlalchemy.engine.base.Engine Thread-164 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:24:04,593 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:24:04,593 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:24:04,593 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:24:04,593 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:24:04,593 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:24:04,595 INFO sqlalchemy.engine.base.Engine Thread-164 : ROLLBACK
2020-06-08 20:24:06,046 INFO sqlalchemy.engine.base.Engine Thread-165 : BEGIN (implicit)
2020-06-08 20:24:06,047 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:24:06,047 INFO sqlalchemy.engine.base.Engine Thread-165 : (1, 1)
2020-06-08 20:24:06,048 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:24:06,048 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:24:06,051 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:24:06,051 INFO sqlalchemy.engine.base.Engine Thread-165 : (23,)
2020-06-08 20:24:06,052 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:24:06,052 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:24:06,056 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:24:06,056 INFO sqlalchemy.engine.base.Engine Thread-165 : (23,)
2020-06-08 20:24:06,056 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:24:06,058 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:24:06,058 INFO sqlalchemy.engine.base.Engine Thread-165 : ()
2020-06-08 20:24:06,058 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:24:06,059 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:24:06,059 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:24:06,062 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:24:06,062 INFO sqlalchemy.engine.base.Engine Thread-165 : ()
2020-06-08 20:24:06,063 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:24:06,063 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:24:06,063 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:24:06,066 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:24:06,066 INFO sqlalchemy.engine.base.Engine Thread-165 : (23,)
2020-06-08 20:24:06,066 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:24:06,066 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (2, 'Test Group 2')
2020-06-08 20:24:06,068 INFO sqlalchemy.engine.base.Engine Thread-165 : ROLLBACK
2020-06-08 20:59:55,986 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 20:59:55,986 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:59:55,987 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:59:55,988 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 20:59:55,989 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 20:59:55,989 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:59:55,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 20:59:55,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 20:59:55,990 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 20:59:55,990 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:59:55,990 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 20:59:55,990 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 20:59:55,991 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 20:59:55,991 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:59:55,992 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 20:59:55,992 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 20:59:55,993 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 20:59:55,993 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:59:55,994 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 20:59:55,994 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:59:55,994 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 20:59:55,995 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 20:59:55,995 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 20:59:55,998 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:59:55,998 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 20:59:55,999 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:59:55,999 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:59:56,009 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 20:59:56,009 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 20:59:56,010 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:59:56,011 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 20:59:56,011 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 20:59:56,011 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:59:56,011 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:59:56,040 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 20:59:56,976 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 20:59:56,977 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:59:56,977 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 20:59:56,977 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:59:56,978 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:59:56,981 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:59:56,981 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:59:56,982 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:59:56,982 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 20:59:56,986 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:59:56,986 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:59:56,987 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:59:56,990 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:59:56,990 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:59:56,991 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:59:56,991 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:59:56,991 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:59:57,000 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:59:57,001 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 20:59:57,002 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:59:57,002 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:59:57,002 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:59:57,005 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:59:57,005 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 20:59:57,006 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:59:57,006 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2')
2020-06-08 20:59:57,007 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:59:57,007 INFO sqlalchemy.engine.base.Engine Thread-3 : ((2, 'Test Group 2'),)
2020-06-08 20:59:57,945 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 20:59:57,947 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 20:59:57,948 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 20:59:57,948 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 20:59:57,949 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 20:59:57,949 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 20:59:57,953 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:59:57,954 INFO sqlalchemy.engine.base.Engine Thread-4 : (20,)
2020-06-08 20:59:57,954 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 20:59:57,954 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 20:59:57,959 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 20:59:57,959 INFO sqlalchemy.engine.base.Engine Thread-4 : (20,)
2020-06-08 20:59:57,960 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 20:59:57,962 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 20:59:57,963 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 20:59:57,963 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 20:59:57,963 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 20:59:57,964 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 20:59:57,967 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 20:59:57,967 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 20:59:57,968 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 20:59:57,968 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 20:59:57,969 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 20:59:57,972 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 20:59:57,972 INFO sqlalchemy.engine.base.Engine Thread-4 : (20,)
2020-06-08 20:59:57,972 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 20:59:57,972 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Test Group')
2020-06-08 20:59:57,974 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 20:59:57,974 INFO sqlalchemy.engine.base.Engine Thread-4 : ((1, 'Test Group'),)
2020-06-08 21:00:59,397 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:00:59,397 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,398 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:00:59,399 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:00:59,399 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:00:59,399 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,400 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:00:59,400 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:00:59,400 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:00:59,400 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,400 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:00:59,401 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:00:59,401 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:00:59,401 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,401 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:00:59,402 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:00:59,402 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:00:59,402 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,403 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:00:59,403 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,404 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:00:59,404 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,404 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:00:59,406 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:00:59,406 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:00:59,407 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:00:59,408 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:00:59,412 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:00:59,412 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 21:00:59,412 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:00:59,413 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:00:59,417 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:00:59,417 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 21:00:59,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:00:59,420 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:00:59,420 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,421 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:00:59,421 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:00:59,421 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:00:59,429 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:00:59,429 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:00:59,430 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:00:59,430 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:00:59,431 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:00:59,433 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:00:59,433 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 21:00:59,434 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:00:59,435 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Test Group 2')
2020-06-08 21:00:59,454 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:01:10,283 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:01:10,284 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:01:10,284 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:01:10,284 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:01:10,285 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:01:10,292 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:01:10,292 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:01:10,293 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:01:10,293 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:01:10,294 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:01:10,294 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:01:10,294 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:01:10,314 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:01:11,622 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:01:11,623 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:01:11,623 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:01:11,624 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:01:11,624 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:01:11,627 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:01:11,627 INFO sqlalchemy.engine.base.Engine Thread-4 : (20,)
2020-06-08 21:01:11,628 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:01:11,628 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:01:11,631 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:01:11,632 INFO sqlalchemy.engine.base.Engine Thread-4 : (20,)
2020-06-08 21:01:11,632 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:01:11,633 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:01:11,634 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 21:01:11,634 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:01:11,634 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:01:11,634 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:01:11,637 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:01:11,637 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 21:01:11,638 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:01:11,639 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:01:11,639 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:01:11,641 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:01:11,641 INFO sqlalchemy.engine.base.Engine Thread-4 : (20,)
2020-06-08 21:01:11,642 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:01:11,642 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Test Group')
2020-06-08 21:01:11,644 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:01:16,502 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:01:16,504 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:01:16,504 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:01:16,504 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:01:16,505 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:01:16,509 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:01:16,509 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:01:16,510 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:01:16,510 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:01:16,510 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:01:16,510 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:01:16,510 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:01:16,513 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:01:17,815 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 21:01:17,816 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:01:17,816 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-08 21:01:17,817 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:01:17,817 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:01:17,821 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:01:17,821 INFO sqlalchemy.engine.base.Engine Thread-6 : (23,)
2020-06-08 21:01:17,822 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:01:17,822 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:01:17,825 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:01:17,825 INFO sqlalchemy.engine.base.Engine Thread-6 : (23,)
2020-06-08 21:01:17,826 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:01:17,828 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:01:17,828 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-06-08 21:01:17,828 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:01:17,828 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:01:17,829 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:01:17,832 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:01:17,832 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-06-08 21:01:17,833 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:01:17,833 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:01:17,833 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:01:17,836 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:01:17,836 INFO sqlalchemy.engine.base.Engine Thread-6 : (23,)
2020-06-08 21:01:17,836 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:01:17,836 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Test Group 2')
2020-06-08 21:01:17,838 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 21:01:50,295 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:01:50,295 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:01:50,296 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:01:50,297 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:01:50,297 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:01:50,297 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:01:50,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:01:50,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:01:50,298 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:01:50,298 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:01:50,299 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:01:50,299 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:01:50,299 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:01:50,299 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:01:50,300 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:01:50,300 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:01:50,301 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:01:50,301 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:01:50,301 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:01:50,301 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:01:50,302 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:01:50,302 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:01:50,303 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:01:50,305 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:01:50,305 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:01:50,306 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:01:50,306 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:01:50,314 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:01:50,315 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:01:50,315 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:01:50,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:01:50,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:01:50,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:01:50,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:01:50,343 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:01:51,749 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:01:51,751 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:01:51,751 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:01:51,751 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:01:51,752 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:01:51,756 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:01:51,756 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:01:51,756 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:01:51,757 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:01:51,761 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:01:51,761 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:01:51,762 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:01:51,766 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:01:51,766 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:01:51,767 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:01:51,767 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:01:51,767 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:01:51,779 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:01:51,779 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:01:51,780 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:01:51,781 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:01:51,781 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:01:51,784 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:01:51,784 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:01:51,784 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:01:51,785 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group')
2020-06-08 21:01:51,800 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:02:30,577 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:02:30,577 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:02:30,578 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:02:30,578 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:02:30,579 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:02:30,579 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:02:30,580 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:02:30,580 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:02:30,580 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:02:30,580 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:02:30,581 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:02:30,581 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:02:30,581 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:02:30,581 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:02:30,582 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:02:30,582 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:02:30,583 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:02:30,583 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:02:30,583 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:02:30,584 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:02:30,584 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:02:30,584 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:02:30,585 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:02:30,587 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:02:30,587 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:02:30,588 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:02:30,589 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:02:30,598 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:02:30,598 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:02:30,599 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:02:30,599 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:02:30,599 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:02:30,599 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:02:30,599 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:02:30,629 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:02:31,861 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:02:31,862 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:02:31,862 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:02:31,863 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:02:31,863 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:02:31,867 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:02:31,867 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:02:31,868 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:02:31,868 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:02:31,872 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:02:31,872 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:02:31,873 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:02:31,877 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:02:31,877 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:02:31,877 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:02:31,878 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:02:31,878 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:02:31,888 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:02:31,888 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:02:31,889 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:02:31,890 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:02:31,890 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:02:31,893 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:02:31,893 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:02:31,893 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:02:31,893 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2')
2020-06-08 21:02:31,908 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:02:34,646 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:02:34,647 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:02:34,647 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:02:34,648 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:02:34,648 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:02:34,653 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:02:34,653 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:02:34,653 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:02:34,654 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:02:34,654 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:02:34,654 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:02:34,654 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:02:34,656 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:02:35,551 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:02:35,552 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:02:35,552 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:02:35,553 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:02:35,553 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:02:35,557 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:02:35,557 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:02:35,557 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:02:35,557 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:02:35,561 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:02:35,561 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:02:35,562 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:02:35,563 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:02:35,563 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:02:35,564 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:02:35,564 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:02:35,564 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:02:35,567 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:02:35,567 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:02:35,568 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:02:35,568 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:02:35,568 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:02:35,571 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:02:35,571 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:02:35,571 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:02:35,572 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group')
2020-06-08 21:02:35,574 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:03:04,679 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:03:04,679 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:03:04,680 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:03:04,681 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:03:04,681 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:03:04,682 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:03:04,682 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:03:04,682 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:03:04,683 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:03:04,683 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:03:04,684 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:03:04,684 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:03:04,685 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:03:04,685 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:03:04,686 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:03:04,686 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:03:04,687 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:03:04,687 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:03:04,688 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:03:04,688 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:03:04,695 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:03:04,695 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:03:04,698 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:03:04,701 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:03:04,701 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:03:04,702 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:03:04,702 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:03:04,712 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:03:04,712 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:03:04,713 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:03:04,719 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:03:04,719 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:03:04,719 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:03:04,719 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:03:04,752 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:03:06,711 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:03:06,712 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:03:06,712 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:03:06,713 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:03:06,713 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:03:06,717 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:03:06,717 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:03:06,718 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:03:06,718 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:03:06,722 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:03:06,723 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:03:06,723 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:03:06,726 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:03:06,726 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:03:06,727 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:03:06,727 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:03:06,727 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:03:06,736 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:03:06,736 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:03:06,737 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:03:06,737 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:03:06,738 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:03:06,740 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:03:06,740 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:03:06,741 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:03:06,741 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2')
2020-06-08 21:03:06,742 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:03:06,742 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:03:06,743 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:03:06,756 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:03:14,366 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:03:14,367 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:03:14,367 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:03:14,368 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:03:14,368 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:03:14,373 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:03:14,373 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:03:14,374 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:03:14,374 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:03:14,374 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:03:14,374 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:03:14,374 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:03:14,376 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:03:16,333 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:03:16,334 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:03:16,334 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:03:16,335 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:03:16,335 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:03:16,339 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:03:16,339 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:03:16,340 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:03:16,340 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:03:16,343 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:03:16,343 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:03:16,344 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:03:16,345 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:03:16,346 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:03:16,346 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:03:16,346 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:03:16,346 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:03:16,349 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:03:16,349 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:03:16,351 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:03:16,351 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:03:16,351 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:03:16,354 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:03:16,354 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:03:16,354 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:03:16,355 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group')
2020-06-08 21:03:16,356 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:03:16,356 INFO sqlalchemy.engine.base.Engine Thread-5 : (1,)
2020-06-08 21:03:16,356 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:03:16,356 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:03:16,356 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:03:16,358 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:04:33,769 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:04:33,770 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:04:33,771 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:04:33,771 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:04:33,772 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:04:33,772 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:04:33,772 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:04:33,773 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:04:33,773 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:04:33,773 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:04:33,773 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:04:33,773 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:04:33,774 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:04:33,774 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:04:33,774 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:04:33,775 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:04:33,775 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:04:33,775 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:04:33,776 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:04:33,776 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:04:33,777 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:04:33,777 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:04:33,777 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:04:33,780 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:04:33,780 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:04:33,781 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:04:33,781 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:04:33,790 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:04:33,790 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:04:33,791 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:04:33,792 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:04:33,792 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:04:33,792 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:04:33,792 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:04:33,820 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:04:35,414 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:04:35,415 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:04:35,415 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:04:35,416 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:04:35,416 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:04:35,420 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:04:35,420 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:04:35,420 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:04:35,420 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:04:35,424 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:04:35,425 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:04:35,425 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:04:35,428 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:04:35,428 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:04:35,428 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:04:35,429 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:04:35,429 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:04:35,438 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:04:35,438 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:04:35,439 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:04:35,439 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:04:35,439 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:04:35,442 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:04:35,442 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:04:35,443 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:04:35,443 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Test Group 2')
2020-06-08 21:04:35,444 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:04:35,444 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:04:35,445 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:04:35,445 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:04:35,457 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:04:39,266 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:04:39,267 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:04:39,267 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:04:39,268 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:04:39,268 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:04:39,273 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:04:39,273 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:04:39,274 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:04:39,274 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:04:39,274 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:04:39,274 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:04:39,274 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:04:39,276 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:04:40,496 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:04:40,497 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:04:40,498 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:04:40,498 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:04:40,499 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:04:40,503 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:04:40,503 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:04:40,503 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:04:40,503 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:04:40,507 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:04:40,507 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:04:40,508 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:04:40,509 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:04:40,509 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:04:40,510 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:04:40,510 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:04:40,510 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:04:40,513 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:04:40,513 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:04:40,514 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:04:40,514 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:04:40,514 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:04:40,517 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:04:40,517 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:04:40,517 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:04:40,518 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Test Group')
2020-06-08 21:04:40,519 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:04:40,519 INFO sqlalchemy.engine.base.Engine Thread-5 : (1,)
2020-06-08 21:04:40,519 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:04:40,519 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:04:40,521 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:05:18,037 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 21:05:18,038 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:18,038 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-08 21:05:18,039 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:18,040 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:18,042 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:18,042 INFO sqlalchemy.engine.base.Engine Thread-6 : ('philip', 1, 1)
2020-06-08 21:05:18,043 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:18,044 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:18,049 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 21:05:18,049 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-06-08 21:05:18,050 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 21:05:18,051 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:18,051 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:18,118 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:18,119 INFO sqlalchemy.engine.base.Engine Thread-6 : ('philip', 1, 1)
2020-06-08 21:05:18,119 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:18,120 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:18,122 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 21:05:19,970 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-06-08 21:05:19,972 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:19,972 INFO sqlalchemy.engine.base.Engine Thread-30 : (1, 1)
2020-06-08 21:05:19,972 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:19,973 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:19,975 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:19,975 INFO sqlalchemy.engine.base.Engine Thread-30 : ('philip', 1, 1)
2020-06-08 21:05:19,975 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:19,976 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:19,977 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 21:05:19,977 INFO sqlalchemy.engine.base.Engine Thread-30 : ('1', 1)
2020-06-08 21:05:19,978 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:05:19,978 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:05:19,982 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 21:05:19,982 INFO sqlalchemy.engine.base.Engine Thread-30 : ()
2020-06-08 21:05:19,983 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:05:19,983 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:05:19,983 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:05:19,985 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:05:19,985 INFO sqlalchemy.engine.base.Engine Thread-30 : (66,)
2020-06-08 21:05:19,985 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:19,986 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 21:05:19,986 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:19,987 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:05:19,987 INFO sqlalchemy.engine.base.Engine Thread-30 : (105,)
2020-06-08 21:05:19,988 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:19,988 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:05:19,988 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:05:20,012 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:20,013 INFO sqlalchemy.engine.base.Engine Thread-30 : ('philip', 1, 1)
2020-06-08 21:05:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:20,017 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-06-08 21:05:31,982 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-06-08 21:05:31,983 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:31,983 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-06-08 21:05:31,984 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:31,984 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:31,987 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:31,987 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-06-08 21:05:31,988 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:31,988 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:31,989 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 21:05:31,989 INFO sqlalchemy.engine.base.Engine Thread-40 : ('1', 1)
2020-06-08 21:05:31,990 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:05:31,990 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:05:31,996 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 21:05:31,996 INFO sqlalchemy.engine.base.Engine Thread-40 : ()
2020-06-08 21:05:31,997 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:05:31,998 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:05:31,998 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:05:31,999 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:05:31,999 INFO sqlalchemy.engine.base.Engine Thread-40 : (66,)
2020-06-08 21:05:32,000 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:32,000 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 21:05:32,000 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:32,002 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:05:32,002 INFO sqlalchemy.engine.base.Engine Thread-40 : (105,)
2020-06-08 21:05:32,002 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:32,002 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:05:32,003 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:05:32,004 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-06-08 21:05:32,004 INFO sqlalchemy.engine.base.Engine Thread-40 : (126, 1)
2020-06-08 21:05:32,005 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:32,005 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-06-08 21:05:32,007 INFO sqlalchemy.engine.base.Engine Thread-40 : UPDATE complexgroups SET id=%s, group_name=%s, group_members=%s WHERE complexgroups.id = %s
2020-06-08 21:05:32,007 INFO sqlalchemy.engine.base.Engine Thread-40 : ('1', 'Zone 2 Complexes', '1', 1)
2020-06-08 21:05:32,008 INFO sqlalchemy.engine.base.Engine Thread-40 : COMMIT
2020-06-08 21:05:32,069 INFO sqlalchemy.engine.base.Engine Thread-41 : BEGIN (implicit)
2020-06-08 21:05:32,070 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:32,070 INFO sqlalchemy.engine.base.Engine Thread-41 : (1, 1)
2020-06-08 21:05:32,071 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:32,071 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:32,073 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:32,073 INFO sqlalchemy.engine.base.Engine Thread-41 : ('philip', 1, 1)
2020-06-08 21:05:32,074 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:32,074 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:32,080 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 21:05:32,080 INFO sqlalchemy.engine.base.Engine Thread-41 : ()
2020-06-08 21:05:32,081 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 21:05:32,081 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:32,082 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:32,086 INFO sqlalchemy.engine.base.Engine Thread-41 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:32,086 INFO sqlalchemy.engine.base.Engine Thread-41 : ('philip', 1, 1)
2020-06-08 21:05:32,086 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:32,087 DEBUG sqlalchemy.engine.base.Engine Thread-41 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:32,089 INFO sqlalchemy.engine.base.Engine Thread-41 : ROLLBACK
2020-06-08 21:05:33,518 INFO sqlalchemy.engine.base.Engine Thread-51 : BEGIN (implicit)
2020-06-08 21:05:33,519 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:33,519 INFO sqlalchemy.engine.base.Engine Thread-51 : (1, 1)
2020-06-08 21:05:33,520 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:33,520 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:33,522 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:33,522 INFO sqlalchemy.engine.base.Engine Thread-51 : ('philip', 1, 1)
2020-06-08 21:05:33,523 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:33,523 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:33,525 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 21:05:33,525 INFO sqlalchemy.engine.base.Engine Thread-51 : ('1', 1)
2020-06-08 21:05:33,525 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:05:33,525 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:05:33,529 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 21:05:33,529 INFO sqlalchemy.engine.base.Engine Thread-51 : ()
2020-06-08 21:05:33,530 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:05:33,530 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:05:33,530 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:05:33,532 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:05:33,532 INFO sqlalchemy.engine.base.Engine Thread-51 : (66,)
2020-06-08 21:05:33,532 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:33,532 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 21:05:33,532 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:33,534 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:05:33,534 INFO sqlalchemy.engine.base.Engine Thread-51 : (105,)
2020-06-08 21:05:33,534 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:33,534 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:05:33,534 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:05:33,539 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:33,539 INFO sqlalchemy.engine.base.Engine Thread-51 : ('philip', 1, 1)
2020-06-08 21:05:33,539 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:33,540 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:33,544 INFO sqlalchemy.engine.base.Engine Thread-51 : ROLLBACK
2020-06-08 21:05:34,891 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-06-08 21:05:34,892 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:34,892 INFO sqlalchemy.engine.base.Engine Thread-61 : (1, 1)
2020-06-08 21:05:34,893 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:34,893 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:34,895 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:34,895 INFO sqlalchemy.engine.base.Engine Thread-61 : ('philip', 1, 1)
2020-06-08 21:05:34,896 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:34,896 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:34,902 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 21:05:34,902 INFO sqlalchemy.engine.base.Engine Thread-61 : ()
2020-06-08 21:05:34,903 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 21:05:34,904 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:34,904 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:34,908 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:34,908 INFO sqlalchemy.engine.base.Engine Thread-61 : ('philip', 1, 1)
2020-06-08 21:05:34,908 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:34,909 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:34,911 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-06-08 21:05:36,332 INFO sqlalchemy.engine.base.Engine Thread-71 : BEGIN (implicit)
2020-06-08 21:05:36,333 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:36,333 INFO sqlalchemy.engine.base.Engine Thread-71 : (1, 1)
2020-06-08 21:05:36,334 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:36,334 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:36,337 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:36,337 INFO sqlalchemy.engine.base.Engine Thread-71 : ('philip', 1, 1)
2020-06-08 21:05:36,338 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:36,338 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:36,339 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 21:05:36,339 INFO sqlalchemy.engine.base.Engine Thread-71 : ('2', 1)
2020-06-08 21:05:36,340 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:05:36,340 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:05:36,344 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 21:05:36,345 INFO sqlalchemy.engine.base.Engine Thread-71 : ()
2020-06-08 21:05:36,346 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:05:36,346 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:05:36,346 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:05:36,347 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:05:36,347 INFO sqlalchemy.engine.base.Engine Thread-71 : (66,)
2020-06-08 21:05:36,348 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:36,348 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 21:05:36,348 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:36,349 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:05:36,350 INFO sqlalchemy.engine.base.Engine Thread-71 : (105,)
2020-06-08 21:05:36,350 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:36,350 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:05:36,350 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:05:36,354 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:36,354 INFO sqlalchemy.engine.base.Engine Thread-71 : ('philip', 1, 1)
2020-06-08 21:05:36,355 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:36,355 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:36,358 INFO sqlalchemy.engine.base.Engine Thread-71 : ROLLBACK
2020-06-08 21:05:47,558 INFO sqlalchemy.engine.base.Engine Thread-81 : BEGIN (implicit)
2020-06-08 21:05:47,559 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:47,559 INFO sqlalchemy.engine.base.Engine Thread-81 : (1, 1)
2020-06-08 21:05:47,560 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:47,560 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:47,562 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:47,562 INFO sqlalchemy.engine.base.Engine Thread-81 : ('philip', 1, 1)
2020-06-08 21:05:47,563 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:47,563 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:47,564 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 21:05:47,564 INFO sqlalchemy.engine.base.Engine Thread-81 : ('2', 1)
2020-06-08 21:05:47,565 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:05:47,565 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:05:47,569 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 21:05:47,570 INFO sqlalchemy.engine.base.Engine Thread-81 : ()
2020-06-08 21:05:47,571 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:05:47,571 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:05:47,571 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:05:47,572 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:05:47,572 INFO sqlalchemy.engine.base.Engine Thread-81 : (66,)
2020-06-08 21:05:47,573 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:47,573 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 21:05:47,573 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:47,574 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:05:47,574 INFO sqlalchemy.engine.base.Engine Thread-81 : (105,)
2020-06-08 21:05:47,575 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:47,575 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:05:47,575 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:05:47,576 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-06-08 21:05:47,577 INFO sqlalchemy.engine.base.Engine Thread-81 : (126, 1)
2020-06-08 21:05:47,577 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:47,577 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (126, 'TOTAL_SLOTS_PER_CHANGE', '8', 109, 0, 0, 0)
2020-06-08 21:05:47,579 INFO sqlalchemy.engine.base.Engine Thread-81 : UPDATE complexgroups SET id=%s, group_name=%s WHERE complexgroups.id = %s
2020-06-08 21:05:47,579 INFO sqlalchemy.engine.base.Engine Thread-81 : ('2', 'Zone 5 Complexes', 2)
2020-06-08 21:05:47,579 INFO sqlalchemy.engine.base.Engine Thread-81 : COMMIT
2020-06-08 21:05:47,613 INFO sqlalchemy.engine.base.Engine Thread-82 : BEGIN (implicit)
2020-06-08 21:05:47,614 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:47,614 INFO sqlalchemy.engine.base.Engine Thread-82 : (1, 1)
2020-06-08 21:05:47,615 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:47,615 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:47,617 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:47,617 INFO sqlalchemy.engine.base.Engine Thread-82 : ('philip', 1, 1)
2020-06-08 21:05:47,618 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:47,618 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:47,622 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 21:05:47,623 INFO sqlalchemy.engine.base.Engine Thread-82 : ()
2020-06-08 21:05:47,623 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 21:05:47,624 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:47,624 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:47,628 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:47,628 INFO sqlalchemy.engine.base.Engine Thread-82 : ('philip', 1, 1)
2020-06-08 21:05:47,629 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:47,629 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:47,632 INFO sqlalchemy.engine.base.Engine Thread-82 : ROLLBACK
2020-06-08 21:05:51,263 INFO sqlalchemy.engine.base.Engine Thread-92 : BEGIN (implicit)
2020-06-08 21:05:51,264 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:51,265 INFO sqlalchemy.engine.base.Engine Thread-92 : (1, 1)
2020-06-08 21:05:51,265 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:51,265 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:51,267 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:51,268 INFO sqlalchemy.engine.base.Engine Thread-92 : ('philip', 1, 1)
2020-06-08 21:05:51,268 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:51,268 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:51,270 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 21:05:51,270 INFO sqlalchemy.engine.base.Engine Thread-92 : ('2', 1)
2020-06-08 21:05:51,270 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:05:51,270 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:05:51,274 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 21:05:51,274 INFO sqlalchemy.engine.base.Engine Thread-92 : ()
2020-06-08 21:05:51,275 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:05:51,276 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:05:51,276 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:05:51,277 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:05:51,277 INFO sqlalchemy.engine.base.Engine Thread-92 : (66,)
2020-06-08 21:05:51,278 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:51,278 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 21:05:51,278 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:51,279 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:05:51,280 INFO sqlalchemy.engine.base.Engine Thread-92 : (105,)
2020-06-08 21:05:51,280 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:51,280 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:05:51,280 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:05:51,284 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:51,284 INFO sqlalchemy.engine.base.Engine Thread-92 : ('philip', 1, 1)
2020-06-08 21:05:51,285 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:51,285 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:51,288 INFO sqlalchemy.engine.base.Engine Thread-92 : ROLLBACK
2020-06-08 21:05:53,199 INFO sqlalchemy.engine.base.Engine Thread-102 : BEGIN (implicit)
2020-06-08 21:05:53,200 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:53,200 INFO sqlalchemy.engine.base.Engine Thread-102 : (1, 1)
2020-06-08 21:05:53,200 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:53,201 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:53,203 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:53,203 INFO sqlalchemy.engine.base.Engine Thread-102 : ('philip', 1, 1)
2020-06-08 21:05:53,203 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:53,204 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:53,209 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 21:05:53,209 INFO sqlalchemy.engine.base.Engine Thread-102 : ()
2020-06-08 21:05:53,210 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 21:05:53,210 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:53,210 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:53,214 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:53,214 INFO sqlalchemy.engine.base.Engine Thread-102 : ('philip', 1, 1)
2020-06-08 21:05:53,215 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:53,215 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:53,218 INFO sqlalchemy.engine.base.Engine Thread-102 : ROLLBACK
2020-06-08 21:05:54,624 INFO sqlalchemy.engine.base.Engine Thread-112 : BEGIN (implicit)
2020-06-08 21:05:54,625 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:54,625 INFO sqlalchemy.engine.base.Engine Thread-112 : (1, 1)
2020-06-08 21:05:54,626 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:54,627 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:54,629 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:54,629 INFO sqlalchemy.engine.base.Engine Thread-112 : ('philip', 1, 1)
2020-06-08 21:05:54,630 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:54,630 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:54,631 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups 
WHERE complexgroups.id = %s 
 LIMIT %s
2020-06-08 21:05:54,631 INFO sqlalchemy.engine.base.Engine Thread-112 : ('1', 1)
2020-06-08 21:05:54,632 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:05:54,632 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:05:54,635 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name ASC
2020-06-08 21:05:54,636 INFO sqlalchemy.engine.base.Engine Thread-112 : ()
2020-06-08 21:05:54,636 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:05:54,637 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:05:54,637 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:05:54,638 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:05:54,638 INFO sqlalchemy.engine.base.Engine Thread-112 : (66,)
2020-06-08 21:05:54,639 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:54,639 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (68, 'Not Active', '0', 66, 0, 0, 1)
2020-06-08 21:05:54,639 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:54,640 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:05:54,640 INFO sqlalchemy.engine.base.Engine Thread-112 : (105,)
2020-06-08 21:05:54,641 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:05:54,641 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:05:54,641 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:05:54,645 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:54,645 INFO sqlalchemy.engine.base.Engine Thread-112 : ('philip', 1, 1)
2020-06-08 21:05:54,646 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:54,646 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:54,650 INFO sqlalchemy.engine.base.Engine Thread-112 : ROLLBACK
2020-06-08 21:05:55,937 INFO sqlalchemy.engine.base.Engine Thread-122 : BEGIN (implicit)
2020-06-08 21:05:55,938 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:05:55,938 INFO sqlalchemy.engine.base.Engine Thread-122 : (1, 1)
2020-06-08 21:05:55,939 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:55,939 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:55,941 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:55,941 INFO sqlalchemy.engine.base.Engine Thread-122 : ('philip', 1, 1)
2020-06-08 21:05:55,942 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:55,942 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:55,947 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 21:05:55,947 INFO sqlalchemy.engine.base.Engine Thread-122 : ()
2020-06-08 21:05:55,948 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 21:05:55,948 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:55,948 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:05:55,952 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:05:55,952 INFO sqlalchemy.engine.base.Engine Thread-122 : ('philip', 1, 1)
2020-06-08 21:05:55,953 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:05:55,953 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:05:55,956 INFO sqlalchemy.engine.base.Engine Thread-122 : ROLLBACK
2020-06-08 21:06:00,847 INFO sqlalchemy.engine.base.Engine Thread-132 : BEGIN (implicit)
2020-06-08 21:06:00,848 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:00,848 INFO sqlalchemy.engine.base.Engine Thread-132 : (1, 1)
2020-06-08 21:06:00,849 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:00,849 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:00,851 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:00,851 INFO sqlalchemy.engine.base.Engine Thread-132 : ('philip', 1, 1)
2020-06-08 21:06:00,852 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:00,852 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:00,862 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 21:06:00,862 INFO sqlalchemy.engine.base.Engine Thread-132 : ()
2020-06-08 21:06:00,863 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 21:06:00,863 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:00,863 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:00,863 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 21:06:00,863 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:00,863 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 21:06:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:00,883 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:00,883 INFO sqlalchemy.engine.base.Engine Thread-132 : ('philip', 1, 1)
2020-06-08 21:06:00,883 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:00,883 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:00,887 INFO sqlalchemy.engine.base.Engine Thread-132 : ROLLBACK
2020-06-08 21:06:02,025 INFO sqlalchemy.engine.base.Engine Thread-142 : BEGIN (implicit)
2020-06-08 21:06:02,026 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:02,026 INFO sqlalchemy.engine.base.Engine Thread-142 : (1, 1)
2020-06-08 21:06:02,027 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:02,027 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:02,029 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:02,029 INFO sqlalchemy.engine.base.Engine Thread-142 : ('philip', 1, 1)
2020-06-08 21:06:02,030 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:02,030 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:02,032 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 21:06:02,033 INFO sqlalchemy.engine.base.Engine Thread-142 : ('20', 1)
2020-06-08 21:06:02,033 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 21:06:02,033 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 21:06:02,036 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:06:02,036 INFO sqlalchemy.engine.base.Engine Thread-142 : (82,)
2020-06-08 21:06:02,037 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:02,037 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 21:06:02,037 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 21:06:02,037 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 21:06:02,038 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:06:02,039 INFO sqlalchemy.engine.base.Engine Thread-142 : (1,)
2020-06-08 21:06:02,039 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:02,039 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 21:06:02,039 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 21:06:02,040 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 21:06:02,041 INFO sqlalchemy.engine.base.Engine Thread-142 : ()
2020-06-08 21:06:02,041 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:06:02,041 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:06:02,041 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:06:02,042 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:06:02,043 INFO sqlalchemy.engine.base.Engine Thread-142 : (127,)
2020-06-08 21:06:02,043 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:02,043 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 21:06:02,043 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 21:06:02,043 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 21:06:02,043 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 21:06:02,045 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:06:02,045 INFO sqlalchemy.engine.base.Engine Thread-142 : (105,)
2020-06-08 21:06:02,045 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:02,045 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:06:02,046 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:06:02,080 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:02,080 INFO sqlalchemy.engine.base.Engine Thread-142 : ('philip', 1, 1)
2020-06-08 21:06:02,081 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:02,081 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:02,085 INFO sqlalchemy.engine.base.Engine Thread-142 : ROLLBACK
2020-06-08 21:06:06,300 INFO sqlalchemy.engine.base.Engine Thread-152 : BEGIN (implicit)
2020-06-08 21:06:06,301 INFO sqlalchemy.engine.base.Engine Thread-152 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:06,301 INFO sqlalchemy.engine.base.Engine Thread-152 : (1, 1)
2020-06-08 21:06:06,302 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:06,302 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:06,304 INFO sqlalchemy.engine.base.Engine Thread-152 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:06,304 INFO sqlalchemy.engine.base.Engine Thread-152 : ('philip', 1, 1)
2020-06-08 21:06:06,305 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:06,305 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:06,313 INFO sqlalchemy.engine.base.Engine Thread-152 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 21:06:06,313 INFO sqlalchemy.engine.base.Engine Thread-152 : ()
2020-06-08 21:06:06,314 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 21:06:06,314 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:06,314 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:06,314 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 21:06:06,314 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 21:06:06,315 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:06,319 INFO sqlalchemy.engine.base.Engine Thread-152 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:06,320 INFO sqlalchemy.engine.base.Engine Thread-152 : ('philip', 1, 1)
2020-06-08 21:06:06,320 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:06,320 DEBUG sqlalchemy.engine.base.Engine Thread-152 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:06,324 INFO sqlalchemy.engine.base.Engine Thread-152 : ROLLBACK
2020-06-08 21:06:14,933 INFO sqlalchemy.engine.base.Engine Thread-162 : BEGIN (implicit)
2020-06-08 21:06:14,934 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:14,934 INFO sqlalchemy.engine.base.Engine Thread-162 : (1, 1)
2020-06-08 21:06:14,935 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:14,935 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:14,937 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:14,937 INFO sqlalchemy.engine.base.Engine Thread-162 : ('philip', 1, 1)
2020-06-08 21:06:14,938 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:14,938 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:14,939 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 21:06:14,939 INFO sqlalchemy.engine.base.Engine Thread-162 : ('22', 1)
2020-06-08 21:06:14,940 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 21:06:14,940 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (22, 'Zone 5 BAU', 83, 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'GBR,IND', 131, '2', 107)
2020-06-08 21:06:14,942 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:06:14,942 INFO sqlalchemy.engine.base.Engine Thread-162 : (82,)
2020-06-08 21:06:14,943 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:14,943 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 21:06:14,943 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 21:06:14,943 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 21:06:14,944 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 21:06:14,944 INFO sqlalchemy.engine.base.Engine Thread-162 : (1,)
2020-06-08 21:06:14,945 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:14,945 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 21:06:14,945 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 21:06:14,946 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 21:06:14,946 INFO sqlalchemy.engine.base.Engine Thread-162 : ()
2020-06-08 21:06:14,947 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:06:14,947 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:06:14,948 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:06:14,949 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:06:14,949 INFO sqlalchemy.engine.base.Engine Thread-162 : (127,)
2020-06-08 21:06:14,949 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:14,949 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 21:06:14,950 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 21:06:14,950 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 21:06:14,950 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 21:06:14,951 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:06:14,951 INFO sqlalchemy.engine.base.Engine Thread-162 : (105,)
2020-06-08 21:06:14,951 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:14,952 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 21:06:14,952 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 21:06:14,956 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:14,956 INFO sqlalchemy.engine.base.Engine Thread-162 : ('philip', 1, 1)
2020-06-08 21:06:14,957 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:14,957 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:14,960 INFO sqlalchemy.engine.base.Engine Thread-162 : ROLLBACK
2020-06-08 21:06:19,998 INFO sqlalchemy.engine.base.Engine Thread-172 : BEGIN (implicit)
2020-06-08 21:06:19,999 INFO sqlalchemy.engine.base.Engine Thread-172 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:19,999 INFO sqlalchemy.engine.base.Engine Thread-172 : (1, 1)
2020-06-08 21:06:20,000 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:20,000 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:20,002 INFO sqlalchemy.engine.base.Engine Thread-172 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:20,002 INFO sqlalchemy.engine.base.Engine Thread-172 : ('philip', 1, 1)
2020-06-08 21:06:20,003 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:20,003 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:20,012 INFO sqlalchemy.engine.base.Engine Thread-172 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 21:06:20,012 INFO sqlalchemy.engine.base.Engine Thread-172 : ()
2020-06-08 21:06:20,012 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:20,013 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:20,014 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 21:06:20,014 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 21:06:20,014 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 21:06:20,014 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 21:06:20,018 INFO sqlalchemy.engine.base.Engine Thread-172 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:20,018 INFO sqlalchemy.engine.base.Engine Thread-172 : ('philip', 1, 1)
2020-06-08 21:06:20,019 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:20,019 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:20,023 INFO sqlalchemy.engine.base.Engine Thread-172 : ROLLBACK
2020-06-08 21:06:22,184 INFO sqlalchemy.engine.base.Engine Thread-182 : BEGIN (implicit)
2020-06-08 21:06:22,186 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:06:22,186 INFO sqlalchemy.engine.base.Engine Thread-182 : ()
2020-06-08 21:06:22,187 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:06:22,188 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:06:22,188 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:06:22,189 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:06:22,189 INFO sqlalchemy.engine.base.Engine Thread-182 : (100,)
2020-06-08 21:06:22,190 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:06:22,190 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 21:06:22,190 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 21:06:22,190 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 21:06:22,190 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 21:06:22,190 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 21:06:22,192 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:22,192 INFO sqlalchemy.engine.base.Engine Thread-182 : (1, 1)
2020-06-08 21:06:22,193 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:22,193 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:22,203 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:06:22,203 INFO sqlalchemy.engine.base.Engine Thread-182 : ('philip', 1, 1)
2020-06-08 21:06:22,204 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:22,204 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:22,206 INFO sqlalchemy.engine.base.Engine Thread-182 : ROLLBACK
2020-06-08 21:06:22,464 INFO sqlalchemy.engine.base.Engine Thread-192 : BEGIN (implicit)
2020-06-08 21:06:22,466 INFO sqlalchemy.engine.base.Engine Thread-192 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 21:06:22,466 INFO sqlalchemy.engine.base.Engine Thread-192 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:06:22,467 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 21:06:22,467 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 21:06:22,467 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 21:06:22,467 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:06:22,467 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 21:06:22,467 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:06:22,467 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:06:22,472 INFO sqlalchemy.engine.base.Engine Thread-192 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 21:06:22,472 INFO sqlalchemy.engine.base.Engine Thread-192 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:06:22,473 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 21:06:22,473 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 21:06:22,477 INFO sqlalchemy.engine.base.Engine Thread-192 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 21:06:22,478 INFO sqlalchemy.engine.base.Engine Thread-192 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:06:22,478 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 21:06:22,479 INFO sqlalchemy.engine.base.Engine Thread-192 : ROLLBACK
2020-06-08 21:06:22,505 INFO sqlalchemy.engine.base.Engine Thread-193 : BEGIN (implicit)
2020-06-08 21:06:22,508 INFO sqlalchemy.engine.base.Engine Thread-193 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 21:06:22,508 INFO sqlalchemy.engine.base.Engine Thread-193 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:06:22,509 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 21:06:22,510 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 21:06:22,510 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 21:06:22,510 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:06:22,510 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 21:06:22,510 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:06:22,510 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:06:22,514 INFO sqlalchemy.engine.base.Engine Thread-193 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 21:06:22,514 INFO sqlalchemy.engine.base.Engine Thread-193 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:06:22,515 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 21:06:22,515 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 21:06:22,519 INFO sqlalchemy.engine.base.Engine Thread-193 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 21:06:22,519 INFO sqlalchemy.engine.base.Engine Thread-193 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:06:22,520 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 21:06:22,521 INFO sqlalchemy.engine.base.Engine Thread-193 : ROLLBACK
2020-06-08 21:06:23,608 INFO sqlalchemy.engine.base.Engine Thread-194 : BEGIN (implicit)
2020-06-08 21:06:23,609 INFO sqlalchemy.engine.base.Engine Thread-194 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:23,609 INFO sqlalchemy.engine.base.Engine Thread-194 : (1, 1)
2020-06-08 21:06:23,609 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:23,610 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:23,614 INFO sqlalchemy.engine.base.Engine Thread-194 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:06:23,614 INFO sqlalchemy.engine.base.Engine Thread-194 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:06:23,615 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:06:23,615 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:06:23,616 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:06:23,616 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:06:23,616 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:06:23,618 INFO sqlalchemy.engine.base.Engine Thread-194 : ROLLBACK
2020-06-08 21:06:25,455 INFO sqlalchemy.engine.base.Engine Thread-195 : BEGIN (implicit)
2020-06-08 21:06:25,456 INFO sqlalchemy.engine.base.Engine Thread-195 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:25,456 INFO sqlalchemy.engine.base.Engine Thread-195 : (1, 1)
2020-06-08 21:06:25,456 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:25,457 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:25,460 INFO sqlalchemy.engine.base.Engine Thread-195 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:06:25,460 INFO sqlalchemy.engine.base.Engine Thread-195 : (20,)
2020-06-08 21:06:25,461 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:06:25,461 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:06:25,464 INFO sqlalchemy.engine.base.Engine Thread-195 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:06:25,465 INFO sqlalchemy.engine.base.Engine Thread-195 : (20,)
2020-06-08 21:06:25,465 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:06:25,467 INFO sqlalchemy.engine.base.Engine Thread-195 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:06:25,467 INFO sqlalchemy.engine.base.Engine Thread-195 : ()
2020-06-08 21:06:25,467 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:06:25,467 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:06:25,468 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:06:25,471 INFO sqlalchemy.engine.base.Engine Thread-195 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:06:25,471 INFO sqlalchemy.engine.base.Engine Thread-195 : ()
2020-06-08 21:06:25,472 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:06:25,472 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:06:25,473 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:06:25,475 INFO sqlalchemy.engine.base.Engine Thread-195 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:06:25,475 INFO sqlalchemy.engine.base.Engine Thread-195 : (20,)
2020-06-08 21:06:25,476 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:06:25,476 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:06:25,477 INFO sqlalchemy.engine.base.Engine Thread-195 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:06:25,477 INFO sqlalchemy.engine.base.Engine Thread-195 : (1,)
2020-06-08 21:06:25,477 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Col ('complexgroups_1_group_members',)
2020-06-08 21:06:25,478 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row ('1',)
2020-06-08 21:06:25,480 INFO sqlalchemy.engine.base.Engine Thread-195 : ROLLBACK
2020-06-08 21:06:31,467 INFO sqlalchemy.engine.base.Engine Thread-196 : BEGIN (implicit)
2020-06-08 21:06:31,468 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:31,468 INFO sqlalchemy.engine.base.Engine Thread-196 : (1, 1)
2020-06-08 21:06:31,469 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:31,469 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:31,474 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:06:31,474 INFO sqlalchemy.engine.base.Engine Thread-196 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:06:31,475 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:06:31,475 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:06:31,475 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:06:31,475 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:06:31,475 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:06:31,478 INFO sqlalchemy.engine.base.Engine Thread-196 : ROLLBACK
2020-06-08 21:06:32,834 INFO sqlalchemy.engine.base.Engine Thread-197 : BEGIN (implicit)
2020-06-08 21:06:32,835 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:32,835 INFO sqlalchemy.engine.base.Engine Thread-197 : (1, 1)
2020-06-08 21:06:32,836 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:32,836 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:32,840 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:06:32,840 INFO sqlalchemy.engine.base.Engine Thread-197 : (23,)
2020-06-08 21:06:32,840 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:06:32,840 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:06:32,844 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:06:32,844 INFO sqlalchemy.engine.base.Engine Thread-197 : (23,)
2020-06-08 21:06:32,845 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:06:32,846 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:06:32,846 INFO sqlalchemy.engine.base.Engine Thread-197 : ()
2020-06-08 21:06:32,847 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:06:32,847 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:06:32,847 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:06:32,850 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:06:32,850 INFO sqlalchemy.engine.base.Engine Thread-197 : ()
2020-06-08 21:06:32,851 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:06:32,852 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:06:32,852 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:06:32,854 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:06:32,854 INFO sqlalchemy.engine.base.Engine Thread-197 : (23,)
2020-06-08 21:06:32,855 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:06:32,855 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:06:32,856 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:06:32,856 INFO sqlalchemy.engine.base.Engine Thread-197 : (2,)
2020-06-08 21:06:32,856 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('complexgroups_1_group_members',)
2020-06-08 21:06:32,856 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row ('1,2',)
2020-06-08 21:06:32,858 INFO sqlalchemy.engine.base.Engine Thread-197 : ROLLBACK
2020-06-08 21:06:44,066 INFO sqlalchemy.engine.base.Engine Thread-198 : BEGIN (implicit)
2020-06-08 21:06:44,067 INFO sqlalchemy.engine.base.Engine Thread-198 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:44,067 INFO sqlalchemy.engine.base.Engine Thread-198 : (1, 1)
2020-06-08 21:06:44,068 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:44,068 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:44,073 INFO sqlalchemy.engine.base.Engine Thread-198 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:06:44,073 INFO sqlalchemy.engine.base.Engine Thread-198 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:06:44,074 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:06:44,074 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:06:44,074 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:06:44,074 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:06:44,074 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:06:44,076 INFO sqlalchemy.engine.base.Engine Thread-198 : ROLLBACK
2020-06-08 21:06:45,418 INFO sqlalchemy.engine.base.Engine Thread-199 : BEGIN (implicit)
2020-06-08 21:06:45,419 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:06:45,419 INFO sqlalchemy.engine.base.Engine Thread-199 : (1, 1)
2020-06-08 21:06:45,420 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:06:45,420 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:06:45,424 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:06:45,424 INFO sqlalchemy.engine.base.Engine Thread-199 : (20,)
2020-06-08 21:06:45,424 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:06:45,425 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:06:45,429 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:06:45,430 INFO sqlalchemy.engine.base.Engine Thread-199 : (20,)
2020-06-08 21:06:45,430 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:06:45,432 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:06:45,432 INFO sqlalchemy.engine.base.Engine Thread-199 : ()
2020-06-08 21:06:45,432 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:06:45,432 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:06:45,433 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:06:45,435 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:06:45,435 INFO sqlalchemy.engine.base.Engine Thread-199 : ()
2020-06-08 21:06:45,436 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:06:45,437 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:06:45,437 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:06:45,439 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:06:45,439 INFO sqlalchemy.engine.base.Engine Thread-199 : (20,)
2020-06-08 21:06:45,440 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:06:45,440 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:06:45,441 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:06:45,441 INFO sqlalchemy.engine.base.Engine Thread-199 : (1,)
2020-06-08 21:06:45,442 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('complexgroups_1_group_members',)
2020-06-08 21:06:45,442 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row ('1',)
2020-06-08 21:06:45,444 INFO sqlalchemy.engine.base.Engine Thread-199 : ROLLBACK
2020-06-08 21:09:29,992 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:09:29,992 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:09:29,993 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:09:29,994 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:09:29,995 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:09:29,995 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:09:29,995 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:09:29,995 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:09:29,996 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:09:29,996 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:09:29,996 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:09:29,996 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:09:29,996 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:09:29,996 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:09:29,997 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:09:29,997 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:09:29,998 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:09:29,998 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:09:29,999 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:09:29,999 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:09:29,999 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:09:29,999 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:09:30,000 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:09:30,003 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:09:30,003 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:09:30,004 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:09:30,004 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:09:30,014 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:09:30,014 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:09:30,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:09:30,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:09:30,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:09:30,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:09:30,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:09:30,043 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:09:33,671 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:09:33,672 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:09:33,672 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:09:33,672 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:09:33,673 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:09:33,677 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:09:33,677 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:09:33,678 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:09:33,678 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:09:33,682 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:09:33,682 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:09:33,683 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:09:33,686 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:09:33,686 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:09:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:09:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:09:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:09:33,696 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:09:33,697 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:09:33,698 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:09:33,698 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:09:33,698 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:09:33,701 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:09:33,701 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:09:33,702 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:09:33,702 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:09:33,703 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:09:33,703 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:09:33,704 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:09:33,704 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:09:33,718 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:09:38,485 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:09:38,486 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:09:38,486 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:09:38,487 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:09:38,487 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:09:38,492 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:09:38,492 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:09:38,493 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:09:38,493 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:09:38,493 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:09:38,493 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:09:38,493 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:09:38,496 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:09:39,924 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:09:39,925 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:09:39,925 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:09:39,925 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:09:39,926 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:09:39,929 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:09:39,929 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:09:39,930 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:09:39,930 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:09:39,933 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:09:39,933 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:09:39,934 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:09:39,935 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:09:39,935 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:09:39,936 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:09:39,936 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:09:39,936 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:09:39,939 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:09:39,939 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:09:39,940 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:09:39,941 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:09:39,941 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:09:39,943 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:09:39,943 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:09:39,944 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:09:39,944 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:09:39,945 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:09:39,945 INFO sqlalchemy.engine.base.Engine Thread-5 : (2,)
2020-06-08 21:09:39,945 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:09:39,945 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:09:39,947 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:11:28,378 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:11:28,379 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:11:28,380 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:11:28,380 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:11:28,381 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:11:28,381 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:11:28,382 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:11:28,382 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:11:28,383 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:11:28,383 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:11:28,383 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:11:28,383 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:11:28,383 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:11:28,384 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:11:28,384 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:11:28,384 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:11:28,385 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:11:28,386 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:11:28,386 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:11:28,386 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:11:28,387 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:11:28,387 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:11:28,388 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:11:28,391 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:11:28,391 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:11:28,392 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:11:28,392 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:11:28,401 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:11:28,402 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:11:28,403 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:11:28,403 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:11:28,403 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:11:28,403 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:11:28,403 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:11:28,432 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:11:30,631 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:11:30,632 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:11:30,632 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:11:30,633 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:11:30,633 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:11:30,637 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:11:30,637 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:11:30,638 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:11:30,638 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:11:30,642 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:11:30,642 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:11:30,643 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:11:30,646 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:11:30,646 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:11:30,647 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:11:30,647 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:11:30,647 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:11:30,657 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:11:30,657 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:11:30,658 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:11:30,659 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:11:30,659 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:11:30,662 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:11:30,662 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:11:30,662 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:11:30,662 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:11:30,663 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:11:30,664 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:11:30,664 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:11:30,664 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:12:05,731 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:12:05,732 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,733 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:12:05,733 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:12:05,734 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:12:05,734 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,735 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:12:05,735 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:12:05,735 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:12:05,735 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,735 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:12:05,735 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:12:05,736 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:12:05,736 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,737 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:12:05,737 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:12:05,737 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:12:05,738 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,738 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:12:05,738 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,739 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:12:05,739 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,739 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:12:05,742 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:12:05,742 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:12:05,743 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:12:05,743 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:12:05,748 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:12:05,748 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 21:12:05,749 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:12:05,749 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:12:05,754 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:12:05,754 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 21:12:05,754 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:12:05,757 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:12:05,757 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:12:05,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:12:05,759 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:12:05,767 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:12:05,767 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:12:05,768 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:12:05,769 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:12:05,769 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:12:05,772 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:12:05,772 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 21:12:05,773 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:12:05,774 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:12:05,776 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:12:05,776 INFO sqlalchemy.engine.base.Engine Thread-2 : (1,)
2020-06-08 21:12:05,776 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_1_group_members',)
2020-06-08 21:12:05,776 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('1',)
2020-06-08 21:12:05,796 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:12:10,663 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:12:10,665 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:12:10,665 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:12:10,665 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:12:10,666 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:12:10,674 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:12:10,674 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:12:10,675 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:12:10,675 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:12:10,675 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:12:10,675 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:12:10,675 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:12:10,697 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:12:12,292 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:12:12,293 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:12:12,293 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:12:12,294 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:12:12,294 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:12:12,298 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:12:12,298 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 21:12:12,298 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:12:12,299 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:12:12,303 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:12:12,303 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 21:12:12,303 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:12:12,305 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:12:12,305 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 21:12:12,305 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:12:12,306 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:12:12,306 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:12:12,309 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:12:12,309 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 21:12:12,310 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:12:12,310 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:12:12,310 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:12:12,313 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:12:12,313 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 21:12:12,314 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:12:12,314 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:12:12,315 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:12:12,315 INFO sqlalchemy.engine.base.Engine Thread-4 : (2,)
2020-06-08 21:12:12,315 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_1_group_members',)
2020-06-08 21:12:12,316 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('1,2',)
2020-06-08 21:12:12,317 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:14:10,406 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:14:10,406 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:10,407 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:14:10,407 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:14:10,408 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:14:10,408 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:10,408 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:14:10,409 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:14:10,409 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:14:10,409 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:10,409 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:14:10,409 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:14:10,410 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:14:10,410 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:10,410 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:14:10,411 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:14:10,411 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:14:10,411 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:10,412 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:14:10,412 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:10,412 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:14:10,413 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:10,413 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:14:10,416 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:14:10,416 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:14:10,416 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:14:10,417 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:14:10,425 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:14:10,425 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:14:10,426 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:14:10,426 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:14:10,426 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:14:10,426 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:14:10,426 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:14:10,453 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:14:12,038 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:14:12,039 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:14:12,039 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:14:12,040 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:14:12,040 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:14:12,044 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:14:12,044 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:14:12,044 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:14:12,045 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:14:12,049 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:14:12,049 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:14:12,049 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:14:12,052 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:14:12,052 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:14:12,053 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:14:12,053 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:14:12,053 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:14:12,062 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:14:12,062 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:14:12,063 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:14:12,064 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:14:12,064 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:14:12,066 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:14:12,066 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:14:12,067 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:14:12,067 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:14:12,068 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:14:12,068 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:14:12,069 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:14:12,069 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:14:49,370 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:14:49,370 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,372 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:14:49,372 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:14:49,373 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:14:49,373 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,373 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:14:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:14:49,374 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:14:49,374 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:14:49,374 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:14:49,375 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:14:49,375 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,375 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:14:49,376 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:14:49,376 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:14:49,376 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,377 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:14:49,377 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,378 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:14:49,378 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,378 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:14:49,381 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:14:49,381 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:14:49,382 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:14:49,382 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:14:49,387 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:14:49,387 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 21:14:49,388 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:14:49,388 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:14:49,393 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:14:49,393 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 21:14:49,393 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:14:49,396 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:14:49,396 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,397 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:14:49,397 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:14:49,397 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:14:49,405 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:14:49,405 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:14:49,406 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:14:49,407 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:14:49,407 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:14:49,410 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:14:49,410 INFO sqlalchemy.engine.base.Engine Thread-2 : (23,)
2020-06-08 21:14:49,410 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:14:49,410 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:14:49,413 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:14:49,413 INFO sqlalchemy.engine.base.Engine Thread-2 : (2,)
2020-06-08 21:14:49,413 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_1_group_members',)
2020-06-08 21:14:49,413 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('1,2',)
2020-06-08 21:14:53,786 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:14:53,788 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:14:53,789 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:14:53,789 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:14:53,790 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:14:53,790 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:14:53,795 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:14:53,795 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:14:53,795 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:14:53,795 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:14:53,799 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:14:53,799 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:14:53,800 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:14:53,802 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:14:53,802 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:14:53,802 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:14:53,802 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:14:53,802 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:14:53,805 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:14:53,805 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:14:53,806 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:14:53,807 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:14:53,807 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:14:53,809 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:14:53,810 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:14:53,810 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:14:53,810 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:14:53,811 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:14:53,811 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:14:53,812 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:14:53,812 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:15:05,631 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:15:05,631 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,632 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:15:05,633 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:15:05,633 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:15:05,634 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,634 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:15:05,634 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:15:05,635 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:15:05,635 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,635 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:15:05,635 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:15:05,635 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:15:05,635 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,636 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:15:05,636 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:15:05,637 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:15:05,637 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,637 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:15:05,637 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,638 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:15:05,638 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,639 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:15:05,641 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:15:05,641 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:15:05,642 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:15:05,642 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:15:05,646 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:15:05,647 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 21:15:05,647 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:15:05,647 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:15:05,651 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:15:05,651 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 21:15:05,652 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:15:05,655 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:15:05,655 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,655 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:15:05,656 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:15:05,656 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:15:05,663 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:15:05,664 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:05,665 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:15:05,665 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:15:05,665 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:15:05,668 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:15:05,668 INFO sqlalchemy.engine.base.Engine Thread-2 : (20,)
2020-06-08 21:15:05,668 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:15:05,669 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:15:05,671 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:15:05,671 INFO sqlalchemy.engine.base.Engine Thread-2 : (1,)
2020-06-08 21:15:05,671 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_1_group_members',)
2020-06-08 21:15:05,671 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('1',)
2020-06-08 21:15:05,691 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:15:14,666 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:15:14,667 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:15:14,667 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:15:14,668 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:15:14,668 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:15:14,676 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:15:14,676 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:15:14,677 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:15:14,677 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:15:14,677 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:15:14,677 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:15:14,677 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:15:14,700 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:15:16,143 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:15:16,144 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:15:16,144 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:15:16,144 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:15:16,145 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:15:16,148 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:15:16,148 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 21:15:16,148 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:15:16,148 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:15:16,152 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:15:16,152 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 21:15:16,153 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:15:16,154 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:15:16,154 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 21:15:16,155 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:15:16,155 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:15:16,155 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:15:16,158 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:15:16,158 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-08 21:15:16,159 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:15:16,159 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:15:16,159 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:15:16,162 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:15:16,162 INFO sqlalchemy.engine.base.Engine Thread-4 : (23,)
2020-06-08 21:15:16,162 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:15:16,162 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:15:16,163 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:15:16,163 INFO sqlalchemy.engine.base.Engine Thread-4 : (2,)
2020-06-08 21:15:16,164 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('complexgroups_1_group_members',)
2020-06-08 21:15:16,164 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('1,2',)
2020-06-08 21:15:16,166 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:15:38,433 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:15:38,433 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:38,434 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:15:38,434 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:15:38,435 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:15:38,435 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:38,435 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:15:38,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:15:38,436 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:15:38,436 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:38,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:15:38,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:15:38,437 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:15:38,437 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:38,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:15:38,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:15:38,438 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:15:38,438 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:38,439 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:15:38,439 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:38,439 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:15:38,439 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:15:38,440 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:15:38,443 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:15:38,443 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:15:38,443 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:15:38,444 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:15:38,451 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:15:38,452 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:15:38,452 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:15:38,452 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:15:38,453 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:15:38,453 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:15:38,453 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:15:38,479 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:15:39,549 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:15:39,550 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:15:39,550 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:15:39,551 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:15:39,551 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:15:39,555 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:15:39,555 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:15:39,555 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:15:39,555 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:15:39,559 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:15:39,559 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:15:39,560 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:15:39,563 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:15:39,563 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:15:39,564 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:15:39,564 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:15:39,564 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:15:39,574 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:15:39,575 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:15:39,576 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:15:39,576 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:15:39,576 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:15:39,579 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:15:39,579 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:15:39,580 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:15:39,580 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:15:39,581 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:15:39,581 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:15:39,582 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:15:39,582 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:15:39,595 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:15:42,218 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:15:42,219 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:15:42,219 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:15:42,220 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:15:42,220 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:15:42,225 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:15:42,225 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:15:42,226 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:15:42,226 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:15:42,226 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:15:42,227 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:15:42,227 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:15:42,229 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:15:43,236 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:15:43,237 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:15:43,238 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:15:43,238 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:15:43,239 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:15:43,242 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:15:43,243 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:15:43,243 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:15:43,243 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:15:43,246 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:15:43,247 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:15:43,247 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:15:43,249 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:15:43,249 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:15:43,249 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:15:43,249 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:15:43,249 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:15:43,252 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:15:43,252 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:15:43,253 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:15:43,254 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:15:43,254 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:15:43,256 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:15:43,256 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:15:43,257 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:15:43,257 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:15:43,258 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:15:43,258 INFO sqlalchemy.engine.base.Engine Thread-5 : (2,)
2020-06-08 21:15:43,259 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:15:43,259 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:15:43,261 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:16:34,152 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:16:34,152 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:16:34,154 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:16:34,154 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:16:34,155 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:16:34,155 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:16:34,156 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:16:34,156 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:16:34,157 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:16:34,157 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:16:34,157 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:16:34,157 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:16:34,158 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:16:34,158 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:16:34,159 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:16:34,159 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:16:34,160 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:16:34,160 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:16:34,161 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:16:34,161 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:16:34,162 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:16:34,163 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:16:34,163 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:16:34,167 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:16:34,167 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:16:34,169 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:16:34,169 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:16:34,182 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:16:34,182 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:16:34,183 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:16:34,184 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:16:34,184 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:16:34,184 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:16:34,184 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:16:34,216 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:16:35,797 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:16:35,798 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:16:35,798 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:16:35,799 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:16:35,799 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:16:35,803 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:16:35,803 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:16:35,804 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:16:35,804 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:16:35,808 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:16:35,808 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:16:35,808 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:16:35,812 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:16:35,812 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:16:35,812 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:16:35,813 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:16:35,813 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:16:35,822 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:16:35,822 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:16:35,823 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:16:35,824 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:16:35,824 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:16:35,826 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:16:35,826 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:16:35,827 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:16:35,827 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:16:35,828 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:16:35,828 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:16:35,829 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:16:35,829 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:16:35,843 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:16:39,256 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:16:39,257 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:16:39,258 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:16:39,258 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:16:39,258 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:16:39,263 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:16:39,263 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:16:39,264 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:16:39,264 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:16:39,264 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:16:39,264 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:16:39,265 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:16:39,267 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:16:40,302 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:16:40,303 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:16:40,303 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:16:40,304 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:16:40,304 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:16:40,308 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:16:40,308 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:16:40,309 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:16:40,309 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:16:40,313 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:16:40,313 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:16:40,313 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:16:40,315 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:16:40,315 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:16:40,316 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:16:40,316 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:16:40,316 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:16:40,319 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:16:40,319 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:16:40,320 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:16:40,320 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:16:40,320 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:16:40,323 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:16:40,323 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:16:40,323 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:16:40,324 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:16:40,325 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:16:40,325 INFO sqlalchemy.engine.base.Engine Thread-5 : (2,)
2020-06-08 21:16:40,325 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:16:40,325 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:16:40,327 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:17:15,299 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:17:15,299 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:15,300 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:17:15,301 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:17:15,301 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:17:15,301 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:15,302 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:17:15,302 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:17:15,302 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:17:15,302 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:15,303 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:17:15,303 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:17:15,303 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:17:15,303 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:15,304 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:17:15,304 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:17:15,305 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:17:15,305 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:15,312 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:17:15,312 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:15,313 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:17:15,313 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:15,314 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:17:15,316 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:17:15,316 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:17:15,317 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:17:15,317 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:17:15,327 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:17:15,327 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:17:15,328 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:17:15,328 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:17:15,328 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:17:15,328 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:17:15,328 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:17:15,358 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:17:16,670 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:17:16,671 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:17:16,671 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:17:16,672 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:17:16,672 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:17:16,676 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:17:16,676 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:17:16,677 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:17:16,677 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:17:16,682 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:17:16,682 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:17:16,683 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:17:16,686 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:17:16,686 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:17:16,687 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:17:16,687 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:17:16,687 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:17:16,696 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:17:16,696 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:17:16,697 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:17:16,698 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:17:16,698 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:17:16,701 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:17:16,701 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:17:16,701 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:17:16,701 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:17:16,703 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:17:16,703 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:17:16,703 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:17:16,703 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:17:16,716 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:17:23,789 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:17:23,789 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:17:23,790 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:17:23,790 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:17:23,791 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:17:23,795 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:17:23,795 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:17:23,796 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:17:23,796 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:17:23,796 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:17:23,796 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:17:23,796 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:17:23,798 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:17:26,100 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:17:26,101 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:17:26,102 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:17:26,102 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:17:26,102 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:17:26,106 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:17:26,106 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:17:26,107 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:17:26,107 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:17:26,110 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:17:26,110 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:17:26,111 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:17:26,112 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:17:26,112 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:17:26,113 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:17:26,113 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:17:26,113 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:17:26,116 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:17:26,116 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:17:26,117 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:17:26,118 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:17:26,118 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:17:26,120 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:17:26,120 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:17:26,121 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:17:26,121 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:17:26,122 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:17:26,122 INFO sqlalchemy.engine.base.Engine Thread-5 : (1,)
2020-06-08 21:17:26,122 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:17:26,122 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1',)
2020-06-08 21:17:26,124 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:17:35,447 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:17:35,448 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:35,449 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:17:35,449 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:17:35,450 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:17:35,450 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:35,451 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:17:35,451 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:17:35,451 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:17:35,451 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:35,451 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:17:35,451 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:17:35,452 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:17:35,452 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:35,453 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:17:35,453 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:17:35,454 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:17:35,454 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:35,454 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:17:35,454 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:35,455 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:17:35,455 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:17:35,456 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:17:35,458 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:17:35,458 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:17:35,459 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:17:35,459 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:17:35,469 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:17:35,469 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:17:35,470 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:17:35,471 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:17:35,471 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:17:35,471 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:17:35,471 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:17:35,499 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:17:37,515 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:17:37,516 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:17:37,516 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:17:37,517 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:17:37,517 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:17:37,521 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:17:37,522 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:17:37,522 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:17:37,522 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:17:37,526 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:17:37,526 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:17:37,527 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:17:37,530 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:17:37,530 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:17:37,530 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:17:37,531 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:17:37,531 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:17:37,540 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:17:37,540 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:17:37,541 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:17:37,542 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:17:37,542 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:17:37,544 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:17:37,545 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:17:37,545 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:17:37,545 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:17:37,546 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:17:37,546 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:17:37,547 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:17:37,547 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:17:37,562 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:26:19,887 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:26:19,887 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:26:19,889 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:26:19,889 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:26:19,890 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:26:19,890 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:26:19,890 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:26:19,890 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:26:19,891 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:26:19,891 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:26:19,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:26:19,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:26:19,891 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:26:19,892 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:26:19,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:26:19,892 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:26:19,893 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:26:19,893 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:26:19,894 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:26:19,894 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:26:19,895 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:26:19,895 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:26:19,895 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:26:19,897 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:26:19,897 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:26:19,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:26:19,899 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:26:19,907 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:26:19,907 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:26:19,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:26:19,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:26:19,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:26:19,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:26:19,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:26:19,935 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:26:23,149 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:26:23,150 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:26:23,150 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:26:23,150 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:26:23,151 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:26:23,155 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:26:23,155 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:26:23,155 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:26:23,156 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:26:23,160 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:26:23,161 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:26:23,161 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:26:23,165 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:26:23,165 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:26:23,166 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:26:23,166 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:26:23,166 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:26:23,175 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:26:23,175 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:26:23,177 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:26:23,177 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:26:23,177 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:26:23,181 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:26:23,181 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:26:23,181 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:26:23,181 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:26:23,195 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:39:38,537 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:39:38,538 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:39:38,539 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:39:38,540 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:39:38,540 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:39:38,540 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:39:38,541 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:39:38,541 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:39:38,541 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:39:38,541 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:39:38,541 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:39:38,542 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:39:38,542 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:39:38,542 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:39:38,543 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:39:38,543 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:39:38,544 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:39:38,544 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:39:38,544 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:39:38,545 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:39:38,545 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:39:38,545 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:39:38,546 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:39:38,548 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:39:38,548 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:39:38,549 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:39:38,549 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:39:38,558 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:39:38,558 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:39:38,558 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:39:38,559 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:39:38,559 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:39:38,559 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:39:38,559 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:39:38,585 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:39:41,498 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:39:41,499 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:39:41,499 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:39:41,500 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:39:41,500 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:39:41,504 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:39:41,504 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:39:41,504 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:39:41,505 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:39:41,509 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:39:41,509 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:39:41,510 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:39:41,513 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:39:41,513 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:39:41,514 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:39:41,514 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:39:41,514 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:39:41,523 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:39:41,524 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:39:41,525 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:39:41,525 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:39:41,526 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:39:41,529 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:39:41,529 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:39:41,529 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:39:41,529 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:39:41,531 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:39:41,531 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:39:41,531 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:39:41,531 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:39:41,546 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:39:44,819 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:39:44,820 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:39:44,820 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:39:44,821 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:39:44,821 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:39:44,825 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:39:44,825 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:39:44,826 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:39:44,826 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:39:44,826 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:39:44,826 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:39:44,827 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:39:44,829 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:39:46,242 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:39:46,243 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:39:46,243 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:39:46,244 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:39:46,244 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:39:46,247 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:39:46,248 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:39:46,248 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:39:46,248 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:39:46,251 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:39:46,252 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:39:46,252 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:39:46,254 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:39:46,254 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:39:46,254 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:39:46,254 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:39:46,255 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:39:46,257 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:39:46,257 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:39:46,258 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:39:46,259 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:39:46,259 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:39:46,261 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:39:46,261 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:39:46,262 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:39:46,262 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:39:46,263 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:39:46,263 INFO sqlalchemy.engine.base.Engine Thread-5 : (2,)
2020-06-08 21:39:46,263 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:39:46,264 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:39:46,266 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:40:18,969 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:40:18,969 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:18,970 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:40:18,970 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:40:18,971 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:40:18,971 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:18,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:40:18,972 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:40:18,972 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:40:18,972 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:18,972 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:40:18,972 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:40:18,972 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:40:18,973 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:18,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:40:18,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:40:18,974 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:40:18,974 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:18,975 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:40:18,975 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:18,975 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:40:18,975 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:18,976 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:40:18,979 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:40:18,979 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:40:18,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:40:18,980 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:40:18,988 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:40:18,988 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:40:18,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:40:18,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:40:18,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:40:18,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:40:18,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:40:19,017 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:40:21,462 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:40:21,463 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:40:21,463 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:40:21,464 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:40:21,464 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:40:21,468 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:40:21,468 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:40:21,469 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:40:21,469 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:40:21,473 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:40:21,473 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:40:21,473 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:40:21,476 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:40:21,476 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:40:21,477 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:40:21,477 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:40:21,477 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:40:21,486 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:40:21,486 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:40:21,487 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:40:21,488 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:40:21,488 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:40:21,490 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:40:21,490 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:40:21,491 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:40:21,491 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:40:21,492 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:40:21,492 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:40:21,492 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:40:21,493 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:40:21,505 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:40:31,852 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:40:31,852 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:31,853 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:40:31,854 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:40:31,854 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:40:31,855 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:31,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:40:31,855 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:40:31,856 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:40:31,856 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:31,856 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:40:31,856 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:40:31,856 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:40:31,856 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:31,857 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:40:31,857 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:40:31,858 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:40:31,858 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:31,858 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:40:31,858 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:31,859 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:40:31,859 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:40:31,860 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:40:31,862 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:40:31,862 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:40:31,863 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:40:31,863 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:40:31,871 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:40:31,871 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:40:31,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:40:31,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:40:31,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:40:31,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:40:31,872 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:40:31,900 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:40:33,062 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:40:33,063 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:40:33,063 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:40:33,064 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:40:33,064 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:40:33,068 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:40:33,069 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:40:33,069 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:40:33,069 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:40:33,074 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:40:33,074 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:40:33,074 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:40:33,077 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:40:33,077 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:40:33,078 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:40:33,078 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:40:33,078 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:40:33,086 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:40:33,086 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:40:33,088 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:40:33,088 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:40:33,088 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:40:33,091 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:40:33,091 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:40:33,091 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:40:33,091 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:40:33,092 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:40:33,092 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:40:33,093 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:40:33,093 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:40:33,107 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:42:47,953 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:42:47,953 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:42:47,954 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:42:47,955 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:42:47,955 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:42:47,955 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:42:47,956 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:42:47,956 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:42:47,956 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:42:47,956 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:42:47,957 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:42:47,957 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:42:47,957 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:42:47,957 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:42:47,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:42:47,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:42:47,959 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:42:47,959 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:42:47,960 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:42:47,960 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:42:47,960 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:42:47,960 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:42:47,961 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:42:47,964 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:42:47,964 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:42:47,965 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:42:47,965 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:42:47,973 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:42:47,974 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:42:47,974 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:42:47,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:42:47,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:42:47,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:42:47,975 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:42:48,001 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:42:49,931 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:42:49,932 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:42:49,932 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:42:49,933 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:42:49,933 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:42:49,937 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:42:49,937 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:42:49,938 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:42:49,938 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:42:49,942 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:42:49,942 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:42:49,943 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:42:49,946 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:42:49,946 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:42:49,947 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:42:49,947 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:42:49,947 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:42:49,956 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:42:49,956 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:42:49,957 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:42:49,957 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:42:49,958 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:42:49,960 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:42:49,960 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:42:49,961 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:42:49,961 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:42:49,962 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:42:49,962 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:42:49,963 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:42:49,963 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:42:49,969 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id IN (%s, %s, %s)
2020-06-08 21:42:49,969 INFO sqlalchemy.engine.base.Engine Thread-3 : ('1', ',', '2')
2020-06-08 21:42:49,994 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:42:49,994 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:42:49,994 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate')
2020-06-08 21:42:50,008 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:43:02,972 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:43:02,973 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:43:02,973 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:43:02,974 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:43:02,974 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:43:02,979 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:43:02,979 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:43:02,980 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:43:02,980 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:43:02,980 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:43:02,980 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:43:02,980 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:43:02,983 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:43:03,012 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:43:03,013 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:43:03,013 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:43:03,013 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:43:03,014 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:43:03,019 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:43:03,019 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:43:03,020 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:43:03,020 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:43:03,020 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:43:03,020 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:43:03,020 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:43:03,023 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:43:07,560 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 21:43:07,561 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:43:07,561 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-08 21:43:07,562 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:43:07,562 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:43:07,567 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:43:07,567 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-08 21:43:07,568 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:43:07,568 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:43:07,568 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (21, 'Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-08 21:43:07,568 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-08 21:43:07,570 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 21:43:10,566 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-08 21:43:10,567 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:43:10,567 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-08 21:43:10,568 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:43:10,568 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:43:10,573 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:43:10,573 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:43:10,574 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:43:10,574 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:43:10,574 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:43:10,574 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:43:10,574 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:43:10,576 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-08 21:43:12,596 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-08 21:43:12,597 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:43:12,597 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-08 21:43:12,598 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:43:12,598 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:43:12,602 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:43:12,602 INFO sqlalchemy.engine.base.Engine Thread-8 : (20,)
2020-06-08 21:43:12,603 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:43:12,603 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:43:12,607 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:43:12,607 INFO sqlalchemy.engine.base.Engine Thread-8 : (20,)
2020-06-08 21:43:12,608 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:43:12,610 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:43:12,610 INFO sqlalchemy.engine.base.Engine Thread-8 : ()
2020-06-08 21:43:12,610 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:43:12,611 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:43:12,611 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:43:12,614 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:43:12,614 INFO sqlalchemy.engine.base.Engine Thread-8 : ()
2020-06-08 21:43:12,615 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:43:12,616 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:43:12,616 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:43:12,618 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:43:12,618 INFO sqlalchemy.engine.base.Engine Thread-8 : (20,)
2020-06-08 21:43:12,619 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:43:12,619 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:43:12,620 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:43:12,620 INFO sqlalchemy.engine.base.Engine Thread-8 : (1,)
2020-06-08 21:43:12,620 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('complexgroups_1_group_members',)
2020-06-08 21:43:12,620 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('1',)
2020-06-08 21:43:12,625 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id IN (%s)
2020-06-08 21:43:12,625 INFO sqlalchemy.engine.base.Engine Thread-8 : ('1',)
2020-06-08 21:43:12,626 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:43:12,626 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:43:12,626 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (2, 'Made Up Fortigate')
2020-06-08 21:43:12,628 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-08 21:43:53,588 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:43:53,588 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:43:53,590 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:43:53,590 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:43:53,591 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:43:53,591 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:43:53,591 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:43:53,591 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:43:53,592 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:43:53,592 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:43:53,592 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:43:53,592 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:43:53,593 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:43:53,593 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:43:53,594 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:43:53,594 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:43:53,595 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:43:53,595 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:43:53,595 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:43:53,596 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:43:53,603 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:43:53,603 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:43:53,604 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:43:53,606 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:43:53,607 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:43:53,607 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:43:53,608 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:43:53,616 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:43:53,617 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:43:53,618 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:43:53,618 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:43:53,619 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:43:53,619 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:43:53,619 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:43:53,646 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:43:55,827 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:43:55,828 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:43:55,828 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:43:55,829 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:43:55,829 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:43:55,833 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:43:55,833 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:43:55,834 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:43:55,834 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:43:55,838 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:43:55,838 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:43:55,839 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:43:55,842 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:43:55,842 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:43:55,843 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:43:55,843 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:43:55,843 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:43:55,853 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:43:55,853 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:43:55,855 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:43:55,855 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:43:55,855 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:43:55,858 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:43:55,858 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:43:55,858 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:43:55,858 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:43:55,859 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:43:55,860 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:43:55,860 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:43:55,860 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:43:55,867 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id IN (%s)
2020-06-08 21:43:55,867 INFO sqlalchemy.engine.base.Engine Thread-3 : ('1',)
2020-06-08 21:43:55,867 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:43:55,867 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:43:55,868 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate')
2020-06-08 21:43:55,882 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:44:06,918 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:44:06,919 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:44:06,919 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:44:06,920 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:44:06,920 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:44:06,925 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:44:06,925 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:44:06,926 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:44:06,926 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:44:06,926 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:44:06,926 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:44:06,926 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:44:06,929 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:44:08,164 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:44:08,165 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:44:08,165 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:44:08,166 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:44:08,166 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:44:08,170 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:44:08,170 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:44:08,170 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:44:08,170 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:44:08,174 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:44:08,174 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:44:08,175 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:44:08,176 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:44:08,176 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:44:08,177 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:44:08,177 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:44:08,177 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:44:08,180 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:44:08,180 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:44:08,181 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:44:08,181 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:44:08,182 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:44:08,184 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:44:08,184 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:44:08,184 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:44:08,185 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:44:08,186 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:44:08,186 INFO sqlalchemy.engine.base.Engine Thread-5 : (2,)
2020-06-08 21:44:08,186 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:44:08,186 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:44:08,191 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id IN (%s, %s, %s)
2020-06-08 21:44:08,191 INFO sqlalchemy.engine.base.Engine Thread-5 : ('1', ',', '2')
2020-06-08 21:44:08,192 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:44:08,192 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:44:08,192 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate')
2020-06-08 21:44:08,195 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:45:30,616 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:45:30,617 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:45:30,618 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:45:30,618 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:45:30,619 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:45:30,619 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:45:30,620 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:45:30,620 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:45:30,620 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:45:30,620 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:45:30,620 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:45:30,621 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:45:30,621 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:45:30,621 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:45:30,622 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:45:30,622 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:45:30,622 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:45:30,623 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:45:30,623 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:45:30,624 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:45:30,624 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:45:30,624 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:45:30,625 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:45:30,627 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:45:30,627 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:45:30,628 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:45:30,628 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:45:30,638 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:45:30,638 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:45:30,639 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:45:30,639 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:45:30,639 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:45:30,639 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:45:30,639 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:45:30,667 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:45:34,733 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:45:34,734 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:45:34,734 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:45:34,735 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:45:34,735 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:45:34,739 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:45:34,739 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:45:34,740 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:45:34,740 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:45:34,744 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:45:34,744 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:45:34,744 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:45:34,747 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:45:34,747 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:45:34,748 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:45:34,748 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:45:34,748 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:45:34,757 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:45:34,757 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:45:34,758 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:45:34,759 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:45:34,759 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:45:34,761 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:45:34,762 INFO sqlalchemy.engine.base.Engine Thread-3 : (20,)
2020-06-08 21:45:34,762 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:45:34,762 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:45:34,763 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:45:34,763 INFO sqlalchemy.engine.base.Engine Thread-3 : (1,)
2020-06-08 21:45:34,764 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:45:34,764 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1',)
2020-06-08 21:45:34,770 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id IN (%s)
2020-06-08 21:45:34,770 INFO sqlalchemy.engine.base.Engine Thread-3 : ('1',)
2020-06-08 21:45:34,770 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:45:34,770 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:45:34,770 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate')
2020-06-08 21:45:34,784 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:45:39,675 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:45:39,676 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:45:39,676 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:45:39,676 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:45:39,677 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:45:39,681 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:45:39,681 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:45:39,682 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:45:39,682 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:45:39,682 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:45:39,682 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:45:39,682 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:45:39,684 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:45:40,717 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:45:40,718 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:45:40,718 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:45:40,719 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:45:40,719 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:45:40,723 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:45:40,723 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:45:40,723 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:45:40,723 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:45:40,727 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:45:40,727 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:45:40,728 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:45:40,729 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:45:40,730 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:45:40,730 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:45:40,730 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:45:40,730 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:45:40,733 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:45:40,733 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:45:40,734 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:45:40,735 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:45:40,735 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:45:40,737 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:45:40,737 INFO sqlalchemy.engine.base.Engine Thread-5 : (23,)
2020-06-08 21:45:40,738 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:45:40,738 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:45:40,739 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:45:40,739 INFO sqlalchemy.engine.base.Engine Thread-5 : (2,)
2020-06-08 21:45:40,740 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:45:40,740 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1,2',)
2020-06-08 21:45:40,746 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1, datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id IN (%s, %s)
2020-06-08 21:45:40,746 INFO sqlalchemy.engine.base.Engine Thread-5 : ('1', '2')
2020-06-08 21:45:40,746 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:45:40,747 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:45:40,747 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate')
2020-06-08 21:45:40,749 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:46:04,312 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:46:04,312 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:04,313 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:46:04,314 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:46:04,314 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:46:04,314 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:04,315 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:46:04,315 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:46:04,315 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:46:04,315 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:04,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:46:04,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:46:04,316 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:46:04,316 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:04,317 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:46:04,317 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:46:04,317 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:46:04,318 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:04,318 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:46:04,319 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:04,319 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:46:04,319 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:04,320 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:46:04,322 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:46:04,322 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:46:04,323 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:46:04,323 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:46:04,332 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:46:04,332 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:46:04,333 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:46:04,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:46:04,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:46:04,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:46:04,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:46:04,361 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:46:08,871 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:46:08,872 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:46:08,872 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:46:08,873 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:46:08,873 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:46:08,877 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:46:08,878 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:46:08,878 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:46:08,878 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:46:08,883 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:46:08,883 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:46:08,884 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:46:08,887 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:46:08,888 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:46:08,888 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:46:08,889 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:46:08,889 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:46:08,898 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:46:08,898 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:46:08,899 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:46:08,900 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:46:08,900 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:46:08,903 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:46:08,903 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:46:08,904 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:46:08,904 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:46:08,905 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:46:08,905 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:46:08,906 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:46:08,906 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:46:08,926 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:46:50,289 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:46:50,289 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:50,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:46:50,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:46:50,291 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:46:50,291 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:50,291 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:46:50,292 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:46:50,292 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:46:50,292 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:50,292 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:46:50,292 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:46:50,293 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:46:50,293 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:50,293 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:46:50,293 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:46:50,294 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:46:50,294 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:50,295 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:46:50,295 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:50,295 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:46:50,295 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:46:50,296 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:46:50,298 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:46:50,298 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:46:50,299 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:46:50,299 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:46:50,307 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:46:50,307 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:46:50,308 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:46:50,309 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:46:50,309 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:46:50,309 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:46:50,309 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:46:50,337 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:46:52,440 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:46:52,441 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:46:52,442 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:46:52,442 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:46:52,443 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:46:52,447 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:46:52,447 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:46:52,448 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:46:52,448 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:46:52,452 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:46:52,453 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:46:52,453 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:46:52,456 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:46:52,456 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:46:52,457 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:46:52,457 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:46:52,457 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:46:52,466 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:46:52,466 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:46:52,467 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:46:52,467 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:46:52,467 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:46:52,470 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:46:52,470 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:46:52,471 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:46:52,471 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:46:52,472 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:46:52,472 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:46:52,472 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:46:52,472 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:46:52,491 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:46:58,729 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:46:58,730 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:46:58,730 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:46:58,730 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:46:58,731 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:46:58,735 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:46:58,735 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:46:58,736 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:46:58,736 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:46:58,736 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:46:58,736 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:46:58,736 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:46:58,738 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:46:59,883 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:46:59,884 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:46:59,885 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:46:59,885 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:46:59,886 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:46:59,889 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:46:59,890 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:46:59,890 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:46:59,890 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:46:59,894 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:46:59,894 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:46:59,895 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:46:59,896 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:46:59,896 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:46:59,897 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:46:59,897 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:46:59,897 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:46:59,900 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:46:59,900 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:46:59,901 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:46:59,902 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:46:59,902 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:46:59,905 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:46:59,905 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:46:59,905 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:46:59,905 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:46:59,906 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:46:59,906 INFO sqlalchemy.engine.base.Engine Thread-5 : (1,)
2020-06-08 21:46:59,907 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:46:59,907 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1',)
2020-06-08 21:46:59,915 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:47:33,023 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 21:47:33,024 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:47:33,025 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:47:33,025 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 21:47:33,026 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 21:47:33,026 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:47:33,026 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 21:47:33,026 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 21:47:33,027 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 21:47:33,027 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:47:33,027 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 21:47:33,027 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 21:47:33,027 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 21:47:33,027 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:47:33,028 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 21:47:33,028 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 21:47:33,029 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 21:47:33,029 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:47:33,029 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 21:47:33,030 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:47:33,030 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 21:47:33,030 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 21:47:33,031 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 21:47:33,033 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:47:33,033 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 21:47:33,034 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:47:33,034 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:47:33,042 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:47:33,042 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:47:33,043 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:47:33,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:47:33,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:47:33,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:47:33,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:47:33,070 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 21:47:35,158 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-08 21:47:35,159 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:47:35,159 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-08 21:47:35,160 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:47:35,160 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:47:35,164 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:47:35,164 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:47:35,165 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:47:35,165 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:47:35,169 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:47:35,169 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:47:35,169 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:47:35,172 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:47:35,172 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:47:35,173 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:47:35,173 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:47:35,173 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:47:35,182 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:47:35,182 INFO sqlalchemy.engine.base.Engine Thread-3 : ()
2020-06-08 21:47:35,183 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:47:35,183 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:47:35,183 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:47:35,186 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:47:35,186 INFO sqlalchemy.engine.base.Engine Thread-3 : (23,)
2020-06-08 21:47:35,186 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:47:35,187 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:47:35,188 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:47:35,188 INFO sqlalchemy.engine.base.Engine Thread-3 : (2,)
2020-06-08 21:47:35,188 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexgroups_1_group_members',)
2020-06-08 21:47:35,188 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('1,2',)
2020-06-08 21:47:35,194 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-08 21:47:35,194 INFO sqlalchemy.engine.base.Engine Thread-3 : ('1', '2')
2020-06-08 21:47:35,194 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:47:35,194 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:47:35,195 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (2, 'Made Up Fortigate')
2020-06-08 21:47:35,207 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-08 21:47:40,034 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-08 21:47:40,035 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:47:40,036 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-08 21:47:40,036 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:47:40,036 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:47:40,041 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:47:40,041 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:47:40,042 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:47:40,042 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:47:40,042 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:47:40,042 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:47:40,042 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:47:40,044 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-08 21:47:41,269 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-08 21:47:41,270 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:47:41,270 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-08 21:47:41,271 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:47:41,271 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:47:41,274 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:47:41,274 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:47:41,275 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:47:41,275 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:47:41,279 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:47:41,280 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:47:41,280 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:47:41,282 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:47:41,282 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:47:41,283 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:47:41,283 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:47:41,283 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:47:41,286 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:47:41,286 INFO sqlalchemy.engine.base.Engine Thread-5 : ()
2020-06-08 21:47:41,287 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:47:41,287 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:47:41,287 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:47:41,289 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:47:41,290 INFO sqlalchemy.engine.base.Engine Thread-5 : (20,)
2020-06-08 21:47:41,290 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:47:41,290 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:47:41,291 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:47:41,291 INFO sqlalchemy.engine.base.Engine Thread-5 : (1,)
2020-06-08 21:47:41,291 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexgroups_1_group_members',)
2020-06-08 21:47:41,291 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('1',)
2020-06-08 21:47:41,297 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-08 21:47:41,297 INFO sqlalchemy.engine.base.Engine Thread-5 : ('1',)
2020-06-08 21:47:41,297 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:47:41,298 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:47:41,300 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-08 21:47:47,507 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-08 21:47:47,508 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:47:47,508 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-08 21:47:47,509 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:47:47,509 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:47:47,513 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:47:47,514 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:47:47,514 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:47:47,515 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:47:47,515 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:47:47,515 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:47:47,515 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:47:47,517 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-08 21:47:48,980 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-08 21:47:48,981 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:47:48,982 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-08 21:47:48,982 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:47:48,983 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:47:48,987 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:47:48,987 INFO sqlalchemy.engine.base.Engine Thread-7 : (23,)
2020-06-08 21:47:48,987 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:47:48,988 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:47:48,992 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:47:48,992 INFO sqlalchemy.engine.base.Engine Thread-7 : (23,)
2020-06-08 21:47:48,992 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:47:48,994 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:47:48,994 INFO sqlalchemy.engine.base.Engine Thread-7 : ()
2020-06-08 21:47:48,994 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:47:48,995 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:47:48,995 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:47:48,998 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:47:48,998 INFO sqlalchemy.engine.base.Engine Thread-7 : ()
2020-06-08 21:47:48,998 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:47:48,999 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:47:48,999 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:47:49,001 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:47:49,001 INFO sqlalchemy.engine.base.Engine Thread-7 : (23,)
2020-06-08 21:47:49,002 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:47:49,002 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:47:49,003 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:47:49,003 INFO sqlalchemy.engine.base.Engine Thread-7 : (2,)
2020-06-08 21:47:49,003 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('complexgroups_1_group_members',)
2020-06-08 21:47:49,003 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('1,2',)
2020-06-08 21:47:49,009 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-08 21:47:49,009 INFO sqlalchemy.engine.base.Engine Thread-7 : ('1', '2')
2020-06-08 21:47:49,009 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:47:49,010 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:47:49,010 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (2, 'Made Up Fortigate')
2020-06-08 21:47:49,012 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-08 21:48:28,890 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-08 21:48:28,891 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:48:28,891 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-08 21:48:28,892 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:48:28,892 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:48:28,897 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:48:28,898 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:48:28,899 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:48:28,899 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:48:28,899 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:48:28,899 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:48:28,899 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:48:28,901 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-08 21:48:30,704 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-08 21:48:30,705 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:48:30,705 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-08 21:48:30,706 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:48:30,706 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:48:30,710 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:48:30,710 INFO sqlalchemy.engine.base.Engine Thread-9 : (23,)
2020-06-08 21:48:30,711 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:48:30,711 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:48:30,716 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:48:30,716 INFO sqlalchemy.engine.base.Engine Thread-9 : (23,)
2020-06-08 21:48:30,716 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:48:30,718 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:48:30,718 INFO sqlalchemy.engine.base.Engine Thread-9 : ()
2020-06-08 21:48:30,719 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:48:30,719 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:48:30,719 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:48:30,722 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:48:30,722 INFO sqlalchemy.engine.base.Engine Thread-9 : ()
2020-06-08 21:48:30,723 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:48:30,724 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:48:30,724 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:48:30,727 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:48:30,727 INFO sqlalchemy.engine.base.Engine Thread-9 : (23,)
2020-06-08 21:48:30,727 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:48:30,727 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (2, 'Zone 5 Complexes')
2020-06-08 21:48:30,728 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:48:30,728 INFO sqlalchemy.engine.base.Engine Thread-9 : (2,)
2020-06-08 21:48:30,729 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('complexgroups_1_group_members',)
2020-06-08 21:48:30,729 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('1,2',)
2020-06-08 21:48:30,737 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-08 21:48:30,737 INFO sqlalchemy.engine.base.Engine Thread-9 : ('1', '2')
2020-06-08 21:48:30,738 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:48:30,738 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:48:30,738 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (2, 'Made Up Fortigate')
2020-06-08 21:48:30,753 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-08 21:48:36,713 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-08 21:48:36,715 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:48:36,715 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-08 21:48:36,715 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:48:36,716 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:48:36,721 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:48:36,721 INFO sqlalchemy.engine.base.Engine Thread-10 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:48:36,722 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:48:36,722 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:48:36,722 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:48:36,722 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:48:36,722 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:48:36,725 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-08 21:48:48,425 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-08 21:48:48,426 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:48:48,426 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-08 21:48:48,426 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:48:48,426 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:48:48,430 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:48:48,431 INFO sqlalchemy.engine.base.Engine Thread-11 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:48:48,431 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:48:48,432 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:48:48,432 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:48:48,432 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:48:48,432 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:48:48,434 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-08 21:48:56,943 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-08 21:48:56,944 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:48:56,945 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-08 21:48:56,945 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:48:56,945 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:48:56,950 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:48:56,950 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-08 21:48:56,951 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:48:56,951 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:48:56,951 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (21, 'Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-08 21:48:56,951 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-08 21:48:56,953 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-08 21:49:00,142 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 21:49:00,143 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:49:00,143 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 21:49:00,144 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:00,144 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:00,148 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:49:00,149 INFO sqlalchemy.engine.base.Engine Thread-13 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-08 21:49:00,149 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:49:00,150 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:49:00,152 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 21:49:01,042 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-08 21:49:01,043 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:49:01,043 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-08 21:49:01,044 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:01,044 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:01,048 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:49:01,048 INFO sqlalchemy.engine.base.Engine Thread-14 : ()
2020-06-08 21:49:01,049 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:49:01,049 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:49:01,049 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:49:01,052 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:49:01,052 INFO sqlalchemy.engine.base.Engine Thread-14 : (100,)
2020-06-08 21:49:01,052 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:49:01,053 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 21:49:01,053 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 21:49:01,053 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 21:49:01,053 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 21:49:01,053 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 21:49:01,061 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-08 21:49:04,538 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-08 21:49:04,540 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:49:04,540 INFO sqlalchemy.engine.base.Engine Thread-15 : ('philip', 1, 1)
2020-06-08 21:49:04,540 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:04,541 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:04,549 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, parameters_1.param_value AS complex_manager, parameters_2.param_value AS vendor, parameters_2.id AS complex_type, parameters_3.param_value AS complex_country, parameters_4.param_name AS complex_active 
FROM complexes INNER JOIN parameters AS parameters_1 ON complexes.complex_manager = parameters_1.id INNER JOIN parameters AS parameters_2 ON complexes.complex_type = parameters_2.id INNER JOIN parameters AS parameters_3 ON complexes.complex_country = parameters_3.id INNER JOIN parameters AS parameters_4 ON complexes.complex_active = parameters_4.id 
WHERE parameters_2.id = %s
2020-06-08 21:49:04,549 INFO sqlalchemy.engine.base.Engine Thread-15 : (101,)
2020-06-08 21:49:04,550 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_push_days', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complex_manager', 'vendor', 'complex_type', 'complex_country', 'complex_active')
2020-06-08 21:49:04,550 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (2, 'Made Up Fortigate', 'YYYYYYY', '02:00', '04:00', 'Fortigate FortiManager', 'Fortigate', 101, 'GBR', 'Active')
2020-06-08 21:49:04,551 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-08 21:49:06,128 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-08 21:49:06,130 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-06-08 21:49:06,131 INFO sqlalchemy.engine.base.Engine Thread-16 : ('0', 1)
2020-06-08 21:49:06,131 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 21:49:06,137 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:49:06,137 INFO sqlalchemy.engine.base.Engine Thread-16 : ()
2020-06-08 21:49:06,138 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:49:06,138 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:49:06,138 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:49:06,140 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:49:06,140 INFO sqlalchemy.engine.base.Engine Thread-16 : (97,)
2020-06-08 21:49:06,140 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:49:06,140 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-06-08 21:49:06,141 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-06-08 21:49:06,143 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-06-08 21:49:06,144 INFO sqlalchemy.engine.base.Engine Thread-16 : (2, 1)
2020-06-08 21:49:06,144 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:49:06,145 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:49:06,147 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:49:06,147 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-08 21:49:06,147 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:06,147 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:06,253 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:49:06,253 INFO sqlalchemy.engine.base.Engine Thread-16 : ('philip', 1, 1)
2020-06-08 21:49:06,254 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:06,254 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:06,258 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:49:06,259 INFO sqlalchemy.engine.base.Engine Thread-16 : ('philip', 1, 1)
2020-06-08 21:49:06,259 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:06,259 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:06,261 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-08 21:49:08,971 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-08 21:49:08,973 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:49:08,973 INFO sqlalchemy.engine.base.Engine Thread-26 : ()
2020-06-08 21:49:08,974 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:49:08,975 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:49:08,975 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:49:08,976 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 21:49:08,976 INFO sqlalchemy.engine.base.Engine Thread-26 : (100,)
2020-06-08 21:49:08,977 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 21:49:08,977 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 21:49:08,977 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 21:49:08,977 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 21:49:08,977 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 21:49:08,977 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 21:49:08,979 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:49:08,979 INFO sqlalchemy.engine.base.Engine Thread-26 : (1, 1)
2020-06-08 21:49:08,980 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:08,980 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:08,991 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:49:08,991 INFO sqlalchemy.engine.base.Engine Thread-26 : ('philip', 1, 1)
2020-06-08 21:49:08,991 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:08,992 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:08,994 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-08 21:49:09,263 INFO sqlalchemy.engine.base.Engine Thread-36 : BEGIN (implicit)
2020-06-08 21:49:09,265 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 21:49:09,265 INFO sqlalchemy.engine.base.Engine Thread-36 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:49:09,266 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 21:49:09,266 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 21:49:09,266 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 21:49:09,267 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:49:09,267 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 21:49:09,267 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:49:09,267 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:49:09,271 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 21:49:09,271 INFO sqlalchemy.engine.base.Engine Thread-36 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:49:09,272 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 21:49:09,272 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 21:49:09,276 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 21:49:09,276 INFO sqlalchemy.engine.base.Engine Thread-36 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:49:09,277 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 21:49:09,278 INFO sqlalchemy.engine.base.Engine Thread-36 : ROLLBACK
2020-06-08 21:49:09,300 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-06-08 21:49:09,301 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 21:49:09,301 INFO sqlalchemy.engine.base.Engine Thread-37 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:49:09,302 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 21:49:09,302 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 21:49:09,303 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 21:49:09,303 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:49:09,303 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 21:49:09,303 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:49:09,303 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 21:49:09,307 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 21:49:09,307 INFO sqlalchemy.engine.base.Engine Thread-37 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:49:09,308 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 21:49:09,309 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 21:49:09,313 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 21:49:09,313 INFO sqlalchemy.engine.base.Engine Thread-37 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 21:49:09,314 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 21:49:09,315 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-06-08 21:49:11,078 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-06-08 21:49:11,079 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:49:11,079 INFO sqlalchemy.engine.base.Engine Thread-38 : (1, 1)
2020-06-08 21:49:11,080 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:11,080 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:11,084 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 21:49:11,084 INFO sqlalchemy.engine.base.Engine Thread-38 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 21:49:11,085 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:49:11,085 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 21:49:11,086 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 21:49:11,086 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:49:11,086 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 21:49:11,088 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-06-08 21:49:12,882 INFO sqlalchemy.engine.base.Engine Thread-39 : BEGIN (implicit)
2020-06-08 21:49:12,884 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:49:12,884 INFO sqlalchemy.engine.base.Engine Thread-39 : (1, 1)
2020-06-08 21:49:12,884 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:49:12,885 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:49:12,888 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 21:49:12,888 INFO sqlalchemy.engine.base.Engine Thread-39 : (20,)
2020-06-08 21:49:12,888 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 21:49:12,889 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 21:49:12,893 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 21:49:12,893 INFO sqlalchemy.engine.base.Engine Thread-39 : (20,)
2020-06-08 21:49:12,893 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 21:49:12,895 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 21:49:12,895 INFO sqlalchemy.engine.base.Engine Thread-39 : ()
2020-06-08 21:49:12,896 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 21:49:12,896 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 21:49:12,896 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 21:49:12,900 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 21:49:12,900 INFO sqlalchemy.engine.base.Engine Thread-39 : ()
2020-06-08 21:49:12,901 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 21:49:12,901 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 21:49:12,901 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 21:49:12,904 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 21:49:12,904 INFO sqlalchemy.engine.base.Engine Thread-39 : (20,)
2020-06-08 21:49:12,904 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 21:49:12,904 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'Zone 2 Complexes')
2020-06-08 21:49:12,905 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 21:49:12,905 INFO sqlalchemy.engine.base.Engine Thread-39 : (1,)
2020-06-08 21:49:12,906 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('complexgroups_1_group_members',)
2020-06-08 21:49:12,906 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row ('1',)
2020-06-08 21:49:12,911 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-08 21:49:12,911 INFO sqlalchemy.engine.base.Engine Thread-39 : ('1',)
2020-06-08 21:49:12,912 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 21:49:12,912 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (1, 'Made Up CheckPoint')
2020-06-08 21:49:12,914 INFO sqlalchemy.engine.base.Engine Thread-39 : ROLLBACK
2020-06-08 21:50:02,344 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-06-08 21:50:02,346 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 21:50:02,346 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-06-08 21:50:02,347 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:50:02,347 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:50:02,350 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:50:02,350 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-06-08 21:50:02,351 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:50:02,351 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:50:02,357 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active, parameters_1.id AS parameters_1_id, parameters_1.param_name AS parameters_1_param_name, parameters_1.param_value AS parameters_1_param_value, parameters_1.param_group AS parameters_1_param_group, parameters_1.param_parent AS parameters_1_param_parent, parameters_1.param_disabled AS parameters_1_param_disabled, parameters_1.param_critical AS parameters_1_param_critical, parameters_2.id AS parameters_2_id, parameters_2.param_name AS parameters_2_param_name, parameters_2.param_value AS parameters_2_param_value, parameters_2.param_group AS parameters_2_param_group, parameters_2.param_parent AS parameters_2_param_parent, parameters_2.param_disabled AS parameters_2_param_disabled, parameters_2.param_critical AS parameters_2_param_critical 
FROM complexgroups, parameters AS parameters_1, parameters AS parameters_2 
WHERE complexgroups.bau_only = parameters_1.id AND complexgroups.group_active = parameters_2.id
2020-06-08 21:50:02,357 INFO sqlalchemy.engine.base.Engine Thread-40 : ()
2020-06-08 21:50:02,358 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active', 'parameters_1_id', 'parameters_1_param_name', 'parameters_1_param_value', 'parameters_1_param_group', 'parameters_1_param_parent', 'parameters_1_param_disabled', 'parameters_1_param_critical', 'parameters_2_id', 'parameters_2_param_name', 'parameters_2_param_value', 'parameters_2_param_group', 'parameters_2_param_parent', 'parameters_2_param_disabled', 'parameters_2_param_critical')
2020-06-08 21:50:02,359 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:50:02,359 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67, 106, 'Yes', '1', 105, 0, 0, 1, 67, 'Active', '1', 66, 0, 0, 1)
2020-06-08 21:50:02,374 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 21:50:02,374 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-06-08 21:50:02,375 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 21:50:02,375 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 21:50:02,378 INFO sqlalchemy.engine.base.Engine Thread-40 : ROLLBACK
2020-06-08 23:11:27,084 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-06-08 23:11:27,086 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:11:27,086 INFO sqlalchemy.engine.base.Engine Thread-50 : ()
2020-06-08 23:11:27,089 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:11:27,090 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:11:27,090 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:11:27,092 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:11:27,092 INFO sqlalchemy.engine.base.Engine Thread-50 : (100,)
2020-06-08 23:11:27,093 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:11:27,093 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 23:11:27,093 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 23:11:27,093 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 23:11:27,093 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 23:11:27,093 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 23:11:27,095 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:11:27,095 INFO sqlalchemy.engine.base.Engine Thread-50 : (1, 1)
2020-06-08 23:11:27,096 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:27,096 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:27,101 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:11:27,101 INFO sqlalchemy.engine.base.Engine Thread-50 : ('philip', 1, 1)
2020-06-08 23:11:27,101 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:27,102 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:27,104 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
2020-06-08 23:11:27,438 INFO sqlalchemy.engine.base.Engine Thread-60 : BEGIN (implicit)
2020-06-08 23:11:27,440 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:11:27,440 INFO sqlalchemy.engine.base.Engine Thread-60 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:27,442 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:11:27,442 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:11:27,442 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:11:27,442 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:27,442 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:11:27,442 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:27,443 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:27,450 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:11:27,450 INFO sqlalchemy.engine.base.Engine Thread-60 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:27,451 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:11:27,451 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:11:27,455 INFO sqlalchemy.engine.base.Engine Thread-60 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:11:27,456 INFO sqlalchemy.engine.base.Engine Thread-60 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:27,456 DEBUG sqlalchemy.engine.base.Engine Thread-60 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:11:27,458 INFO sqlalchemy.engine.base.Engine Thread-60 : ROLLBACK
2020-06-08 23:11:27,480 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-06-08 23:11:27,482 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:11:27,482 INFO sqlalchemy.engine.base.Engine Thread-61 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:27,483 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:11:27,483 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:11:27,483 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:11:27,483 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:27,483 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:11:27,484 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:27,484 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:27,488 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:11:27,488 INFO sqlalchemy.engine.base.Engine Thread-61 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:27,488 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:11:27,489 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:11:27,493 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:11:27,493 INFO sqlalchemy.engine.base.Engine Thread-61 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:27,493 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:11:27,494 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-06-08 23:11:28,842 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-06-08 23:11:28,844 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:11:28,844 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-06-08 23:11:28,844 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:28,845 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:28,849 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:11:28,849 INFO sqlalchemy.engine.base.Engine Thread-62 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:11:28,850 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:11:28,850 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:11:28,850 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:11:28,851 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:11:28,851 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:11:28,853 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-06-08 23:11:31,671 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-06-08 23:11:31,672 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:11:31,673 INFO sqlalchemy.engine.base.Engine Thread-63 : (1, 1)
2020-06-08 23:11:31,674 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:31,674 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:31,678 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 23:11:31,679 INFO sqlalchemy.engine.base.Engine Thread-63 : (23,)
2020-06-08 23:11:31,679 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:11:31,679 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:11:31,683 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 23:11:31,683 INFO sqlalchemy.engine.base.Engine Thread-63 : (23,)
2020-06-08 23:11:31,684 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 23:11:31,686 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 23:11:31,686 INFO sqlalchemy.engine.base.Engine Thread-63 : ()
2020-06-08 23:11:31,686 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 23:11:31,686 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 23:11:31,687 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 23:11:31,690 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:11:31,690 INFO sqlalchemy.engine.base.Engine Thread-63 : ()
2020-06-08 23:11:31,691 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:11:31,691 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:11:31,691 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:11:31,694 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 23:11:31,694 INFO sqlalchemy.engine.base.Engine Thread-63 : (23,)
2020-06-08 23:11:31,695 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 23:11:31,695 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (2, 'Zone 5 Complexes')
2020-06-08 23:11:31,696 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 23:11:31,696 INFO sqlalchemy.engine.base.Engine Thread-63 : (2,)
2020-06-08 23:11:31,696 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('complexgroups_1_group_members',)
2020-06-08 23:11:31,696 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row ('1,2',)
2020-06-08 23:11:31,705 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s, %s)
2020-06-08 23:11:31,705 INFO sqlalchemy.engine.base.Engine Thread-63 : ('1', '2')
2020-06-08 23:11:31,706 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 23:11:31,706 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'Made Up CheckPoint')
2020-06-08 23:11:31,706 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (2, 'Made Up Fortigate')
2020-06-08 23:11:31,708 INFO sqlalchemy.engine.base.Engine Thread-63 : ROLLBACK
2020-06-08 23:11:40,691 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-06-08 23:11:40,692 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:11:40,692 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-06-08 23:11:40,693 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:40,693 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:40,698 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:11:40,698 INFO sqlalchemy.engine.base.Engine Thread-64 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:11:40,699 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:11:40,699 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:11:40,699 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:11:40,700 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:11:40,700 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:11:40,702 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-06-08 23:11:47,181 INFO sqlalchemy.engine.base.Engine Thread-65 : BEGIN (implicit)
2020-06-08 23:11:47,182 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:11:47,182 INFO sqlalchemy.engine.base.Engine Thread-65 : (1, 1)
2020-06-08 23:11:47,183 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:47,183 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:47,187 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 23:11:47,188 INFO sqlalchemy.engine.base.Engine Thread-65 : (20,)
2020-06-08 23:11:47,188 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:11:47,188 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:11:47,192 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 23:11:47,192 INFO sqlalchemy.engine.base.Engine Thread-65 : (20,)
2020-06-08 23:11:47,192 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 23:11:47,194 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 23:11:47,194 INFO sqlalchemy.engine.base.Engine Thread-65 : ()
2020-06-08 23:11:47,195 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 23:11:47,195 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 23:11:47,195 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 23:11:47,198 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:11:47,198 INFO sqlalchemy.engine.base.Engine Thread-65 : ()
2020-06-08 23:11:47,199 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:11:47,200 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:11:47,200 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:11:47,202 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 23:11:47,202 INFO sqlalchemy.engine.base.Engine Thread-65 : (20,)
2020-06-08 23:11:47,203 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 23:11:47,203 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'Zone 2 Complexes')
2020-06-08 23:11:47,204 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 23:11:47,204 INFO sqlalchemy.engine.base.Engine Thread-65 : (1,)
2020-06-08 23:11:47,204 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('complexgroups_1_group_members',)
2020-06-08 23:11:47,204 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row ('1',)
2020-06-08 23:11:47,210 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-08 23:11:47,210 INFO sqlalchemy.engine.base.Engine Thread-65 : ('1',)
2020-06-08 23:11:47,210 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 23:11:47,211 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'Made Up CheckPoint')
2020-06-08 23:11:47,213 INFO sqlalchemy.engine.base.Engine Thread-65 : ROLLBACK
2020-06-08 23:11:48,994 INFO sqlalchemy.engine.base.Engine Thread-66 : BEGIN (implicit)
2020-06-08 23:11:48,995 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-06-08 23:11:48,995 INFO sqlalchemy.engine.base.Engine Thread-66 : ('0', 1)
2020-06-08 23:11:48,996 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:11:49,001 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:11:49,001 INFO sqlalchemy.engine.base.Engine Thread-66 : ()
2020-06-08 23:11:49,002 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:11:49,002 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:11:49,002 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:11:49,003 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:11:49,004 INFO sqlalchemy.engine.base.Engine Thread-66 : (97,)
2020-06-08 23:11:49,004 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:11:49,004 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-06-08 23:11:49,004 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-06-08 23:11:49,008 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-06-08 23:11:49,008 INFO sqlalchemy.engine.base.Engine Thread-66 : (1, 1)
2020-06-08 23:11:49,009 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:11:49,009 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:11:49,012 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:11:49,012 INFO sqlalchemy.engine.base.Engine Thread-66 : (1, 1)
2020-06-08 23:11:49,013 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:49,013 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:49,018 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:11:49,018 INFO sqlalchemy.engine.base.Engine Thread-66 : ('philip', 1, 1)
2020-06-08 23:11:49,018 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:49,019 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:49,023 INFO sqlalchemy.engine.base.Engine Thread-66 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:11:49,023 INFO sqlalchemy.engine.base.Engine Thread-66 : ('philip', 1, 1)
2020-06-08 23:11:49,024 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:49,024 DEBUG sqlalchemy.engine.base.Engine Thread-66 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:49,025 INFO sqlalchemy.engine.base.Engine Thread-66 : ROLLBACK
2020-06-08 23:11:56,822 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-06-08 23:11:56,825 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:11:56,825 INFO sqlalchemy.engine.base.Engine Thread-76 : ()
2020-06-08 23:11:56,826 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:11:56,827 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:11:56,827 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:11:56,829 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:11:56,829 INFO sqlalchemy.engine.base.Engine Thread-76 : (100,)
2020-06-08 23:11:56,829 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:11:56,830 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 23:11:56,830 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 23:11:56,830 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 23:11:56,830 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 23:11:56,830 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 23:11:56,832 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:11:56,832 INFO sqlalchemy.engine.base.Engine Thread-76 : (1, 1)
2020-06-08 23:11:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:56,833 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:56,838 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:11:56,838 INFO sqlalchemy.engine.base.Engine Thread-76 : ('philip', 1, 1)
2020-06-08 23:11:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:56,839 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:56,842 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-06-08 23:11:57,185 INFO sqlalchemy.engine.base.Engine Thread-86 : BEGIN (implicit)
2020-06-08 23:11:57,187 INFO sqlalchemy.engine.base.Engine Thread-86 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:11:57,187 INFO sqlalchemy.engine.base.Engine Thread-86 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:11:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:11:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:11:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:11:57,188 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:57,189 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:57,193 INFO sqlalchemy.engine.base.Engine Thread-86 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:11:57,193 INFO sqlalchemy.engine.base.Engine Thread-86 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:57,193 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:11:57,194 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:11:57,198 INFO sqlalchemy.engine.base.Engine Thread-86 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:11:57,198 INFO sqlalchemy.engine.base.Engine Thread-86 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:57,199 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:11:57,200 INFO sqlalchemy.engine.base.Engine Thread-86 : ROLLBACK
2020-06-08 23:11:57,227 INFO sqlalchemy.engine.base.Engine Thread-87 : BEGIN (implicit)
2020-06-08 23:11:57,228 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:11:57,228 INFO sqlalchemy.engine.base.Engine Thread-87 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:57,229 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:11:57,229 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:11:57,230 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:11:57,230 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:57,230 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:11:57,230 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:57,230 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:11:57,234 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:11:57,234 INFO sqlalchemy.engine.base.Engine Thread-87 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:57,235 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:11:57,236 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:11:57,240 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:11:57,240 INFO sqlalchemy.engine.base.Engine Thread-87 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:11:57,241 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:11:57,242 INFO sqlalchemy.engine.base.Engine Thread-87 : ROLLBACK
2020-06-08 23:11:58,528 INFO sqlalchemy.engine.base.Engine Thread-88 : BEGIN (implicit)
2020-06-08 23:11:58,529 INFO sqlalchemy.engine.base.Engine Thread-88 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:11:58,529 INFO sqlalchemy.engine.base.Engine Thread-88 : (1, 1)
2020-06-08 23:11:58,530 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:11:58,530 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:11:58,535 INFO sqlalchemy.engine.base.Engine Thread-88 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:11:58,535 INFO sqlalchemy.engine.base.Engine Thread-88 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:11:58,536 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:11:58,536 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:11:58,536 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:11:58,537 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:11:58,537 DEBUG sqlalchemy.engine.base.Engine Thread-88 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:11:58,539 INFO sqlalchemy.engine.base.Engine Thread-88 : ROLLBACK
2020-06-08 23:12:02,660 INFO sqlalchemy.engine.base.Engine Thread-89 : BEGIN (implicit)
2020-06-08 23:12:02,661 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:12:02,661 INFO sqlalchemy.engine.base.Engine Thread-89 : (1, 1)
2020-06-08 23:12:02,661 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:12:02,662 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:12:02,666 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:12:02,666 INFO sqlalchemy.engine.base.Engine Thread-89 : ()
2020-06-08 23:12:02,667 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:12:02,668 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:12:02,668 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:12:02,669 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:12:02,669 INFO sqlalchemy.engine.base.Engine Thread-89 : (100,)
2020-06-08 23:12:02,670 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:12:02,670 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 23:12:02,670 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 23:12:02,670 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 23:12:02,670 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 23:12:02,671 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 23:12:02,673 INFO sqlalchemy.engine.base.Engine Thread-89 : ROLLBACK
2020-06-08 23:12:06,304 INFO sqlalchemy.engine.base.Engine Thread-90 : BEGIN (implicit)
2020-06-08 23:12:06,305 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-06-08 23:12:06,306 INFO sqlalchemy.engine.base.Engine Thread-90 : ('0', 1)
2020-06-08 23:12:06,306 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:12:06,311 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:12:06,311 INFO sqlalchemy.engine.base.Engine Thread-90 : ()
2020-06-08 23:12:06,312 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:12:06,312 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:12:06,312 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:12:06,314 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:12:06,314 INFO sqlalchemy.engine.base.Engine Thread-90 : (97,)
2020-06-08 23:12:06,314 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:12:06,314 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-06-08 23:12:06,314 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-06-08 23:12:06,317 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-06-08 23:12:06,318 INFO sqlalchemy.engine.base.Engine Thread-90 : (2, 1)
2020-06-08 23:12:06,318 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:12:06,319 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:12:06,321 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:12:06,322 INFO sqlalchemy.engine.base.Engine Thread-90 : (1, 1)
2020-06-08 23:12:06,322 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:12:06,322 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:12:06,327 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:12:06,327 INFO sqlalchemy.engine.base.Engine Thread-90 : ('philip', 1, 1)
2020-06-08 23:12:06,327 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:12:06,327 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:12:06,332 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:12:06,332 INFO sqlalchemy.engine.base.Engine Thread-90 : ('philip', 1, 1)
2020-06-08 23:12:06,332 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:12:06,332 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:12:06,334 INFO sqlalchemy.engine.base.Engine Thread-90 : ROLLBACK
2020-06-08 23:12:08,203 INFO sqlalchemy.engine.base.Engine Thread-100 : BEGIN (implicit)
2020-06-08 23:12:08,205 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:12:08,205 INFO sqlalchemy.engine.base.Engine Thread-100 : ()
2020-06-08 23:12:08,206 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:12:08,207 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:12:08,207 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:12:08,209 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:12:08,209 INFO sqlalchemy.engine.base.Engine Thread-100 : (100,)
2020-06-08 23:12:08,209 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:12:08,210 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 23:12:08,210 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 23:12:08,210 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 23:12:08,210 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 23:12:08,210 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 23:12:08,212 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:12:08,212 INFO sqlalchemy.engine.base.Engine Thread-100 : (1, 1)
2020-06-08 23:12:08,212 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:12:08,212 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:12:08,216 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:12:08,217 INFO sqlalchemy.engine.base.Engine Thread-100 : ('philip', 1, 1)
2020-06-08 23:12:08,217 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:12:08,217 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:12:08,220 INFO sqlalchemy.engine.base.Engine Thread-100 : ROLLBACK
2020-06-08 23:12:08,487 INFO sqlalchemy.engine.base.Engine Thread-110 : BEGIN (implicit)
2020-06-08 23:12:08,489 INFO sqlalchemy.engine.base.Engine Thread-110 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:12:08,489 INFO sqlalchemy.engine.base.Engine Thread-110 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:12:08,490 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:12:08,490 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:12:08,490 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:12:08,490 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:12:08,490 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:12:08,490 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:12:08,491 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:12:08,494 INFO sqlalchemy.engine.base.Engine Thread-110 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:12:08,494 INFO sqlalchemy.engine.base.Engine Thread-110 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:12:08,495 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:12:08,496 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:12:08,499 INFO sqlalchemy.engine.base.Engine Thread-110 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:12:08,500 INFO sqlalchemy.engine.base.Engine Thread-110 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:12:08,500 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:12:08,501 INFO sqlalchemy.engine.base.Engine Thread-110 : ROLLBACK
2020-06-08 23:12:08,567 INFO sqlalchemy.engine.base.Engine Thread-111 : BEGIN (implicit)
2020-06-08 23:12:08,569 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:12:08,569 INFO sqlalchemy.engine.base.Engine Thread-111 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:12:08,570 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:12:08,570 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:12:08,570 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:12:08,570 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:12:08,570 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:12:08,571 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:12:08,571 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:12:08,575 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:12:08,575 INFO sqlalchemy.engine.base.Engine Thread-111 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:12:08,575 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:12:08,576 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:12:08,579 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:12:08,579 INFO sqlalchemy.engine.base.Engine Thread-111 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:12:08,580 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:12:08,581 INFO sqlalchemy.engine.base.Engine Thread-111 : ROLLBACK
2020-06-08 23:12:39,360 INFO sqlalchemy.engine.base.Engine Thread-112 : BEGIN (implicit)
2020-06-08 23:12:39,361 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:12:39,362 INFO sqlalchemy.engine.base.Engine Thread-112 : (1, 1)
2020-06-08 23:12:39,362 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:12:39,363 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:12:39,368 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:12:39,368 INFO sqlalchemy.engine.base.Engine Thread-112 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-08 23:12:39,369 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:12:39,369 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:12:39,369 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (21, 'Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-08 23:12:39,369 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-08 23:12:39,371 INFO sqlalchemy.engine.base.Engine Thread-112 : ROLLBACK
2020-06-08 23:14:01,075 INFO sqlalchemy.engine.base.Engine Thread-113 : BEGIN (implicit)
2020-06-08 23:14:01,077 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:14:01,078 INFO sqlalchemy.engine.base.Engine Thread-113 : ()
2020-06-08 23:14:01,080 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:14:01,080 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:14:01,080 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:14:01,083 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:14:01,083 INFO sqlalchemy.engine.base.Engine Thread-113 : (100,)
2020-06-08 23:14:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:14:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 23:14:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 23:14:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 23:14:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 23:14:01,084 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 23:14:01,086 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:01,086 INFO sqlalchemy.engine.base.Engine Thread-113 : (1, 1)
2020-06-08 23:14:01,087 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:01,087 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:01,092 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:14:01,092 INFO sqlalchemy.engine.base.Engine Thread-113 : ('philip', 1, 1)
2020-06-08 23:14:01,092 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:01,093 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:01,095 INFO sqlalchemy.engine.base.Engine Thread-113 : ROLLBACK
2020-06-08 23:14:01,377 INFO sqlalchemy.engine.base.Engine Thread-123 : BEGIN (implicit)
2020-06-08 23:14:01,379 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:14:01,379 INFO sqlalchemy.engine.base.Engine Thread-123 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:14:01,380 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:14:01,380 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:14:01,381 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:14:01,381 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:14:01,381 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:14:01,381 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:14:01,381 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:14:01,385 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:14:01,385 INFO sqlalchemy.engine.base.Engine Thread-123 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:14:01,386 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:14:01,386 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:14:01,391 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:14:01,391 INFO sqlalchemy.engine.base.Engine Thread-123 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:14:01,392 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:14:01,393 INFO sqlalchemy.engine.base.Engine Thread-123 : ROLLBACK
2020-06-08 23:14:01,418 INFO sqlalchemy.engine.base.Engine Thread-124 : BEGIN (implicit)
2020-06-08 23:14:01,420 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:14:01,420 INFO sqlalchemy.engine.base.Engine Thread-124 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:14:01,423 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:14:01,423 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:14:01,423 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:14:01,423 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:14:01,423 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:14:01,423 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:14:01,423 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:14:01,428 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:14:01,428 INFO sqlalchemy.engine.base.Engine Thread-124 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:14:01,429 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:14:01,429 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:14:01,433 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:14:01,433 INFO sqlalchemy.engine.base.Engine Thread-124 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:14:01,434 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:14:01,435 INFO sqlalchemy.engine.base.Engine Thread-124 : ROLLBACK
2020-06-08 23:14:03,960 INFO sqlalchemy.engine.base.Engine Thread-126 : BEGIN (implicit)
2020-06-08 23:14:03,961 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:03,961 INFO sqlalchemy.engine.base.Engine Thread-126 : (1, 1)
2020-06-08 23:14:03,962 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:03,963 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:03,968 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:03,968 INFO sqlalchemy.engine.base.Engine Thread-126 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:14:03,969 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:03,969 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:03,969 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:14:03,969 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:14:03,969 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:14:03,971 INFO sqlalchemy.engine.base.Engine Thread-126 : ROLLBACK
2020-06-08 23:14:09,266 INFO sqlalchemy.engine.base.Engine Thread-127 : BEGIN (implicit)
2020-06-08 23:14:09,267 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:09,267 INFO sqlalchemy.engine.base.Engine Thread-127 : (1, 1)
2020-06-08 23:14:09,268 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:09,268 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:09,273 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:09,274 INFO sqlalchemy.engine.base.Engine Thread-127 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-08 23:14:09,274 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:09,274 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:09,276 INFO sqlalchemy.engine.base.Engine Thread-127 : ROLLBACK
2020-06-08 23:14:14,018 INFO sqlalchemy.engine.base.Engine Thread-128 : BEGIN (implicit)
2020-06-08 23:14:14,019 INFO sqlalchemy.engine.base.Engine Thread-128 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:14,019 INFO sqlalchemy.engine.base.Engine Thread-128 : (1, 1)
2020-06-08 23:14:14,020 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:14,020 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:14,024 INFO sqlalchemy.engine.base.Engine Thread-128 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:14,024 INFO sqlalchemy.engine.base.Engine Thread-128 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-08 23:14:14,025 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:14,025 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:14,027 INFO sqlalchemy.engine.base.Engine Thread-128 : ROLLBACK
2020-06-08 23:14:18,181 INFO sqlalchemy.engine.base.Engine Thread-129 : BEGIN (implicit)
2020-06-08 23:14:18,182 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:18,182 INFO sqlalchemy.engine.base.Engine Thread-129 : (1, 1)
2020-06-08 23:14:18,185 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:18,186 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:18,191 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:18,191 INFO sqlalchemy.engine.base.Engine Thread-129 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:14:18,192 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:18,192 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:18,192 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:14:18,192 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:14:18,192 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:14:18,195 INFO sqlalchemy.engine.base.Engine Thread-129 : ROLLBACK
2020-06-08 23:14:22,172 INFO sqlalchemy.engine.base.Engine Thread-130 : BEGIN (implicit)
2020-06-08 23:14:22,173 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:22,173 INFO sqlalchemy.engine.base.Engine Thread-130 : (1, 1)
2020-06-08 23:14:22,173 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:22,174 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:22,178 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:22,178 INFO sqlalchemy.engine.base.Engine Thread-130 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:14:22,179 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:22,179 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:22,179 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:14:22,179 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:14:22,179 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:14:22,181 INFO sqlalchemy.engine.base.Engine Thread-130 : ROLLBACK
2020-06-08 23:14:30,508 INFO sqlalchemy.engine.base.Engine Thread-131 : BEGIN (implicit)
2020-06-08 23:14:30,509 INFO sqlalchemy.engine.base.Engine Thread-131 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:30,509 INFO sqlalchemy.engine.base.Engine Thread-131 : (1, 1)
2020-06-08 23:14:30,510 DEBUG sqlalchemy.engine.base.Engine Thread-131 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:30,510 DEBUG sqlalchemy.engine.base.Engine Thread-131 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:30,514 INFO sqlalchemy.engine.base.Engine Thread-131 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:30,514 INFO sqlalchemy.engine.base.Engine Thread-131 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-08 23:14:30,514 DEBUG sqlalchemy.engine.base.Engine Thread-131 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:30,515 DEBUG sqlalchemy.engine.base.Engine Thread-131 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:30,516 INFO sqlalchemy.engine.base.Engine Thread-131 : ROLLBACK
2020-06-08 23:14:34,810 INFO sqlalchemy.engine.base.Engine Thread-132 : BEGIN (implicit)
2020-06-08 23:14:34,812 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:34,812 INFO sqlalchemy.engine.base.Engine Thread-132 : (1, 1)
2020-06-08 23:14:34,813 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:34,813 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:34,818 INFO sqlalchemy.engine.base.Engine Thread-132 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:34,818 INFO sqlalchemy.engine.base.Engine Thread-132 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-08 23:14:34,819 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:34,819 DEBUG sqlalchemy.engine.base.Engine Thread-132 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:34,821 INFO sqlalchemy.engine.base.Engine Thread-132 : ROLLBACK
2020-06-08 23:14:42,224 INFO sqlalchemy.engine.base.Engine Thread-133 : BEGIN (implicit)
2020-06-08 23:14:42,224 INFO sqlalchemy.engine.base.Engine Thread-133 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:42,225 INFO sqlalchemy.engine.base.Engine Thread-133 : (1, 1)
2020-06-08 23:14:42,225 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:42,225 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:42,229 INFO sqlalchemy.engine.base.Engine Thread-133 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:42,230 INFO sqlalchemy.engine.base.Engine Thread-133 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-08 23:14:42,230 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:42,231 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:42,231 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (21, 'Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-08 23:14:42,231 DEBUG sqlalchemy.engine.base.Engine Thread-133 : Row (22, 'Zone 5 BAU', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 test', 131)
2020-06-08 23:14:42,232 INFO sqlalchemy.engine.base.Engine Thread-133 : ROLLBACK
2020-06-08 23:14:44,976 INFO sqlalchemy.engine.base.Engine Thread-134 : BEGIN (implicit)
2020-06-08 23:14:44,977 INFO sqlalchemy.engine.base.Engine Thread-134 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:44,978 INFO sqlalchemy.engine.base.Engine Thread-134 : (1, 1)
2020-06-08 23:14:44,978 DEBUG sqlalchemy.engine.base.Engine Thread-134 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:44,978 DEBUG sqlalchemy.engine.base.Engine Thread-134 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:44,982 INFO sqlalchemy.engine.base.Engine Thread-134 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:14:44,982 INFO sqlalchemy.engine.base.Engine Thread-134 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:14:44,983 DEBUG sqlalchemy.engine.base.Engine Thread-134 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:44,983 DEBUG sqlalchemy.engine.base.Engine Thread-134 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:14:44,983 DEBUG sqlalchemy.engine.base.Engine Thread-134 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:14:44,983 DEBUG sqlalchemy.engine.base.Engine Thread-134 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:14:44,983 DEBUG sqlalchemy.engine.base.Engine Thread-134 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:14:44,985 INFO sqlalchemy.engine.base.Engine Thread-134 : ROLLBACK
2020-06-08 23:14:46,399 INFO sqlalchemy.engine.base.Engine Thread-135 : BEGIN (implicit)
2020-06-08 23:14:46,400 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:14:46,400 INFO sqlalchemy.engine.base.Engine Thread-135 : (1, 1)
2020-06-08 23:14:46,401 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:14:46,401 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:14:46,406 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 23:14:46,406 INFO sqlalchemy.engine.base.Engine Thread-135 : (20,)
2020-06-08 23:14:46,407 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:14:46,407 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:14:46,411 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 23:14:46,411 INFO sqlalchemy.engine.base.Engine Thread-135 : (20,)
2020-06-08 23:14:46,412 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 23:14:46,414 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 23:14:46,414 INFO sqlalchemy.engine.base.Engine Thread-135 : ()
2020-06-08 23:14:46,414 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 23:14:46,414 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 23:14:46,415 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 23:14:46,418 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:14:46,418 INFO sqlalchemy.engine.base.Engine Thread-135 : ()
2020-06-08 23:14:46,419 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:14:46,419 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:14:46,419 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:14:46,422 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 23:14:46,422 INFO sqlalchemy.engine.base.Engine Thread-135 : (20,)
2020-06-08 23:14:46,422 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 23:14:46,422 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (1, 'Zone 2 Complexes')
2020-06-08 23:14:46,424 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 23:14:46,424 INFO sqlalchemy.engine.base.Engine Thread-135 : (1,)
2020-06-08 23:14:46,424 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('complexgroups_1_group_members',)
2020-06-08 23:14:46,424 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row ('1',)
2020-06-08 23:14:46,430 INFO sqlalchemy.engine.base.Engine Thread-135 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-08 23:14:46,430 INFO sqlalchemy.engine.base.Engine Thread-135 : ('1',)
2020-06-08 23:14:46,431 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 23:14:46,431 DEBUG sqlalchemy.engine.base.Engine Thread-135 : Row (1, 'Made Up CheckPoint')
2020-06-08 23:14:46,434 INFO sqlalchemy.engine.base.Engine Thread-135 : ROLLBACK
2020-06-08 23:15:40,949 INFO sqlalchemy.engine.base.Engine Thread-136 : BEGIN (implicit)
2020-06-08 23:15:40,952 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:15:40,952 INFO sqlalchemy.engine.base.Engine Thread-136 : ()
2020-06-08 23:15:40,953 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:15:40,954 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:15:40,954 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:15:40,956 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:15:40,956 INFO sqlalchemy.engine.base.Engine Thread-136 : (100,)
2020-06-08 23:15:40,956 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:15:40,957 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 23:15:40,957 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 23:15:40,957 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 23:15:40,957 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 23:15:40,957 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 23:15:40,959 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:15:40,959 INFO sqlalchemy.engine.base.Engine Thread-136 : (1, 1)
2020-06-08 23:15:40,959 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:40,960 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:40,964 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:15:40,964 INFO sqlalchemy.engine.base.Engine Thread-136 : ('philip', 1, 1)
2020-06-08 23:15:40,964 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:40,964 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:40,967 INFO sqlalchemy.engine.base.Engine Thread-136 : ROLLBACK
2020-06-08 23:15:41,225 INFO sqlalchemy.engine.base.Engine Thread-146 : BEGIN (implicit)
2020-06-08 23:15:41,227 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:15:41,227 INFO sqlalchemy.engine.base.Engine Thread-146 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:41,228 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:15:41,228 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:15:41,228 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:15:41,228 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:41,229 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:15:41,229 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:41,229 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:41,233 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:15:41,233 INFO sqlalchemy.engine.base.Engine Thread-146 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:41,234 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:15:41,234 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:15:41,238 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:15:41,238 INFO sqlalchemy.engine.base.Engine Thread-146 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:41,239 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:15:41,240 INFO sqlalchemy.engine.base.Engine Thread-146 : ROLLBACK
2020-06-08 23:15:41,267 INFO sqlalchemy.engine.base.Engine Thread-147 : BEGIN (implicit)
2020-06-08 23:15:41,269 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:15:41,269 INFO sqlalchemy.engine.base.Engine Thread-147 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:41,270 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:15:41,270 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:15:41,270 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:15:41,271 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:41,271 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:15:41,271 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:41,271 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:41,278 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:15:41,278 INFO sqlalchemy.engine.base.Engine Thread-147 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:41,279 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:15:41,280 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:15:41,284 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:15:41,284 INFO sqlalchemy.engine.base.Engine Thread-147 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:41,285 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:15:41,285 INFO sqlalchemy.engine.base.Engine Thread-147 : ROLLBACK
2020-06-08 23:15:42,316 INFO sqlalchemy.engine.base.Engine Thread-149 : BEGIN (implicit)
2020-06-08 23:15:42,318 INFO sqlalchemy.engine.base.Engine Thread-149 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:15:42,318 INFO sqlalchemy.engine.base.Engine Thread-149 : ()
2020-06-08 23:15:42,319 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:15:42,320 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:15:42,320 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:15:42,322 INFO sqlalchemy.engine.base.Engine Thread-149 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:15:42,322 INFO sqlalchemy.engine.base.Engine Thread-149 : (100,)
2020-06-08 23:15:42,322 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:15:42,323 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 23:15:42,323 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 23:15:42,323 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 23:15:42,323 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 23:15:42,323 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 23:15:42,325 INFO sqlalchemy.engine.base.Engine Thread-149 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:15:42,325 INFO sqlalchemy.engine.base.Engine Thread-149 : (1, 1)
2020-06-08 23:15:42,326 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:42,326 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:42,331 INFO sqlalchemy.engine.base.Engine Thread-149 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:15:42,331 INFO sqlalchemy.engine.base.Engine Thread-149 : ('philip', 1, 1)
2020-06-08 23:15:42,332 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:42,332 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:42,334 INFO sqlalchemy.engine.base.Engine Thread-149 : ROLLBACK
2020-06-08 23:15:42,567 INFO sqlalchemy.engine.base.Engine Thread-159 : BEGIN (implicit)
2020-06-08 23:15:42,568 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:15:42,569 INFO sqlalchemy.engine.base.Engine Thread-159 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:42,570 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:15:42,570 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:15:42,570 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:15:42,570 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:42,570 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:15:42,570 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:42,570 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:42,574 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:15:42,574 INFO sqlalchemy.engine.base.Engine Thread-159 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:42,575 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:15:42,575 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:15:42,579 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:15:42,579 INFO sqlalchemy.engine.base.Engine Thread-159 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:42,580 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:15:42,581 INFO sqlalchemy.engine.base.Engine Thread-159 : ROLLBACK
2020-06-08 23:15:42,610 INFO sqlalchemy.engine.base.Engine Thread-161 : BEGIN (implicit)
2020-06-08 23:15:42,612 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:15:42,612 INFO sqlalchemy.engine.base.Engine Thread-161 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:42,613 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:15:42,613 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:15:42,613 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:15:42,613 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:42,613 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:15:42,613 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:42,613 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:15:42,618 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:15:42,618 INFO sqlalchemy.engine.base.Engine Thread-161 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:42,619 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:15:42,619 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:15:42,624 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:15:42,624 INFO sqlalchemy.engine.base.Engine Thread-161 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:15:42,624 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:15:42,625 INFO sqlalchemy.engine.base.Engine Thread-161 : ROLLBACK
2020-06-08 23:15:45,164 INFO sqlalchemy.engine.base.Engine Thread-162 : BEGIN (implicit)
2020-06-08 23:15:45,165 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:15:45,165 INFO sqlalchemy.engine.base.Engine Thread-162 : (1, 1)
2020-06-08 23:15:45,166 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:45,166 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:45,171 INFO sqlalchemy.engine.base.Engine Thread-162 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:15:45,171 INFO sqlalchemy.engine.base.Engine Thread-162 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:15:45,172 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:15:45,172 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:15:45,172 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:15:45,172 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:15:45,172 DEBUG sqlalchemy.engine.base.Engine Thread-162 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:15:45,174 INFO sqlalchemy.engine.base.Engine Thread-162 : ROLLBACK
2020-06-08 23:15:49,211 INFO sqlalchemy.engine.base.Engine Thread-163 : BEGIN (implicit)
2020-06-08 23:15:49,212 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:15:49,212 INFO sqlalchemy.engine.base.Engine Thread-163 : (1, 1)
2020-06-08 23:15:49,213 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:49,213 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:49,217 INFO sqlalchemy.engine.base.Engine Thread-163 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:15:49,217 INFO sqlalchemy.engine.base.Engine Thread-163 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:15:49,218 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:15:49,218 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:15:49,218 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:15:49,218 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:15:49,218 DEBUG sqlalchemy.engine.base.Engine Thread-163 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:15:49,220 INFO sqlalchemy.engine.base.Engine Thread-163 : ROLLBACK
2020-06-08 23:15:51,003 INFO sqlalchemy.engine.base.Engine Thread-164 : BEGIN (implicit)
2020-06-08 23:15:51,004 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:15:51,004 INFO sqlalchemy.engine.base.Engine Thread-164 : (1, 1)
2020-06-08 23:15:51,004 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:51,005 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:51,008 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 23:15:51,008 INFO sqlalchemy.engine.base.Engine Thread-164 : (20,)
2020-06-08 23:15:51,009 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:15:51,009 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:15:51,013 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 23:15:51,013 INFO sqlalchemy.engine.base.Engine Thread-164 : (20,)
2020-06-08 23:15:51,013 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 23:15:51,015 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 23:15:51,015 INFO sqlalchemy.engine.base.Engine Thread-164 : ()
2020-06-08 23:15:51,015 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 23:15:51,016 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 23:15:51,016 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 23:15:51,019 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:15:51,019 INFO sqlalchemy.engine.base.Engine Thread-164 : ()
2020-06-08 23:15:51,020 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:15:51,020 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:15:51,020 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:15:51,022 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 23:15:51,022 INFO sqlalchemy.engine.base.Engine Thread-164 : (20,)
2020-06-08 23:15:51,023 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 23:15:51,023 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'Zone 2 Complexes')
2020-06-08 23:15:51,024 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 23:15:51,024 INFO sqlalchemy.engine.base.Engine Thread-164 : (1,)
2020-06-08 23:15:51,024 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('complexgroups_1_group_members',)
2020-06-08 23:15:51,024 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row ('1',)
2020-06-08 23:15:51,030 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-08 23:15:51,030 INFO sqlalchemy.engine.base.Engine Thread-164 : ('1',)
2020-06-08 23:15:51,030 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 23:15:51,031 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'Made Up CheckPoint')
2020-06-08 23:15:51,033 INFO sqlalchemy.engine.base.Engine Thread-164 : ROLLBACK
2020-06-08 23:15:54,946 INFO sqlalchemy.engine.base.Engine Thread-165 : BEGIN (implicit)
2020-06-08 23:15:54,947 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:15:54,947 INFO sqlalchemy.engine.base.Engine Thread-165 : (1, 1)
2020-06-08 23:15:54,948 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:54,948 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:54,952 INFO sqlalchemy.engine.base.Engine Thread-165 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:15:54,952 INFO sqlalchemy.engine.base.Engine Thread-165 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:15:54,953 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:15:54,953 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:15:54,953 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:15:54,953 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:15:54,953 DEBUG sqlalchemy.engine.base.Engine Thread-165 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:15:54,955 INFO sqlalchemy.engine.base.Engine Thread-165 : ROLLBACK
2020-06-08 23:15:58,647 INFO sqlalchemy.engine.base.Engine Thread-166 : BEGIN (implicit)
2020-06-08 23:15:58,648 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:15:58,648 INFO sqlalchemy.engine.base.Engine Thread-166 : (1, 1)
2020-06-08 23:15:58,649 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:15:58,649 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:15:58,653 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 23:15:58,653 INFO sqlalchemy.engine.base.Engine Thread-166 : (20,)
2020-06-08 23:15:58,654 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:15:58,654 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:15:58,658 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 23:15:58,658 INFO sqlalchemy.engine.base.Engine Thread-166 : (20,)
2020-06-08 23:15:58,659 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 23:15:58,663 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 23:15:58,663 INFO sqlalchemy.engine.base.Engine Thread-166 : ()
2020-06-08 23:15:58,664 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 23:15:58,664 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 23:15:58,664 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 23:15:58,667 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:15:58,667 INFO sqlalchemy.engine.base.Engine Thread-166 : ()
2020-06-08 23:15:58,668 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:15:58,669 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:15:58,669 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:15:58,671 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 23:15:58,672 INFO sqlalchemy.engine.base.Engine Thread-166 : (20,)
2020-06-08 23:15:58,672 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 23:15:58,672 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (1, 'Zone 2 Complexes')
2020-06-08 23:15:58,673 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 23:15:58,673 INFO sqlalchemy.engine.base.Engine Thread-166 : (1,)
2020-06-08 23:15:58,674 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('complexgroups_1_group_members',)
2020-06-08 23:15:58,674 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row ('1',)
2020-06-08 23:15:58,679 INFO sqlalchemy.engine.base.Engine Thread-166 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-08 23:15:58,680 INFO sqlalchemy.engine.base.Engine Thread-166 : ('1',)
2020-06-08 23:15:58,680 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 23:15:58,680 DEBUG sqlalchemy.engine.base.Engine Thread-166 : Row (1, 'Made Up CheckPoint')
2020-06-08 23:15:58,682 INFO sqlalchemy.engine.base.Engine Thread-166 : ROLLBACK
2020-06-08 23:16:17,001 INFO sqlalchemy.engine.base.Engine Thread-167 : BEGIN (implicit)
2020-06-08 23:16:17,001 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:16:17,001 INFO sqlalchemy.engine.base.Engine Thread-167 : (71,)
2020-06-08 23:16:17,002 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:16:17,002 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-06-08 23:16:17,002 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-06-08 23:16:17,002 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-06-08 23:16:17,004 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:16:17,004 INFO sqlalchemy.engine.base.Engine Thread-167 : (1, 1)
2020-06-08 23:16:17,005 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:17,005 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:17,022 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:16:17,022 INFO sqlalchemy.engine.base.Engine Thread-167 : ('philip', 1, 1)
2020-06-08 23:16:17,023 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:17,023 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:17,026 INFO sqlalchemy.engine.base.Engine Thread-167 : ROLLBACK
2020-06-08 23:16:21,306 INFO sqlalchemy.engine.base.Engine Thread-177 : BEGIN (implicit)
2020-06-08 23:16:21,307 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:16:21,307 INFO sqlalchemy.engine.base.Engine Thread-177 : (71,)
2020-06-08 23:16:21,308 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:16:21,309 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-06-08 23:16:21,309 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-06-08 23:16:21,309 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-06-08 23:16:21,313 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-06-08 23:16:21,313 INFO sqlalchemy.engine.base.Engine Thread-177 : (' ', '%zone%', ' ', '%2%')
2020-06-08 23:16:21,314 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-06-08 23:16:21,314 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (18, 'Zone 2 BAU', 'Zone 2 BAU', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0))
2020-06-08 23:16:21,314 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (20, 'BaU Zone 2', '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45))
2020-06-08 23:16:21,314 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (22, 'Zone 5 BAU', 'Zone 5 test', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45))
2020-06-08 23:16:21,314 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (23, 'Zone 5 BAU', 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45))
2020-06-08 23:16:21,319 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(bookings_1.description) LIKE lower(%s) OR lower(bookings_1.title) LIKE lower(%s) OR lower(bookings_1.change_ref) LIKE lower(%s) OR lower(bookings_1.change_subref) LIKE lower(%s) OR lower(bookings_1.stakeholder_id) LIKE lower(%s) OR lower(bookings_1.description) LIKE lower(%s) OR lower(bookings_1.title) LIKE lower(%s) OR lower(bookings_1.change_ref) LIKE lower(%s) OR lower(bookings_1.change_subref) LIKE lower(%s) OR lower(bookings_1.stakeholder_id) LIKE lower(%s)
2020-06-08 23:16:21,320 INFO sqlalchemy.engine.base.Engine Thread-177 : ('%zone%', '%zone%', '%zone%', '%zone%', '%zone%', '%2%', '%2%', '%2%', '%2%', '%2%')
2020-06-08 23:16:21,320 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (13, "Bob's test booking", 'project doing something', datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (21, 'TestA', 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (22, 'TestB', 'test b', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (23, 'Booking1', 'Booking for testing rules against complex 1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (25, 'Booking2', 'Booking for testing rules #2 on Fortigate', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0))
2020-06-08 23:16:21,321 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (26, 'Booking3', 'Testing booking #3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0))
2020-06-08 23:16:21,322 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (28, 'Booking4', 'Booking test #4 on Fortigate', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0))
2020-06-08 23:16:21,322 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (29, 'A better title for this change', 'werwer', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0))
2020-06-08 23:16:21,322 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (30, 'Test Booking', 'test booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0))
2020-06-08 23:16:21,324 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:16:21,324 INFO sqlalchemy.engine.base.Engine Thread-177 : (1, 1)
2020-06-08 23:16:21,324 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:21,324 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:21,328 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:16:21,328 INFO sqlalchemy.engine.base.Engine Thread-177 : ('philip', 1, 1)
2020-06-08 23:16:21,329 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:21,329 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:21,334 INFO sqlalchemy.engine.base.Engine Thread-177 : ROLLBACK
2020-06-08 23:16:41,906 INFO sqlalchemy.engine.base.Engine Thread-187 : BEGIN (implicit)
2020-06-08 23:16:41,909 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:16:41,909 INFO sqlalchemy.engine.base.Engine Thread-187 : ()
2020-06-08 23:16:41,910 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:16:41,911 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:16:41,911 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:16:41,912 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:16:41,913 INFO sqlalchemy.engine.base.Engine Thread-187 : (100,)
2020-06-08 23:16:41,913 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:16:41,914 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-08 23:16:41,914 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-08 23:16:41,914 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-08 23:16:41,914 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-08 23:16:41,914 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-08 23:16:41,916 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:16:41,916 INFO sqlalchemy.engine.base.Engine Thread-187 : (1, 1)
2020-06-08 23:16:41,917 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:41,917 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:41,922 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:16:41,922 INFO sqlalchemy.engine.base.Engine Thread-187 : ('philip', 1, 1)
2020-06-08 23:16:41,923 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:41,923 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:41,925 INFO sqlalchemy.engine.base.Engine Thread-187 : ROLLBACK
2020-06-08 23:16:42,196 INFO sqlalchemy.engine.base.Engine Thread-197 : BEGIN (implicit)
2020-06-08 23:16:42,197 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:16:42,197 INFO sqlalchemy.engine.base.Engine Thread-197 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:16:42,199 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:16:42,199 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:16:42,199 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:16:42,199 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:16:42,199 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:16:42,199 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:16:42,199 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:16:42,204 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:16:42,204 INFO sqlalchemy.engine.base.Engine Thread-197 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:16:42,205 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:16:42,205 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:16:42,210 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:16:42,210 INFO sqlalchemy.engine.base.Engine Thread-197 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:16:42,211 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:16:42,212 INFO sqlalchemy.engine.base.Engine Thread-197 : ROLLBACK
2020-06-08 23:16:42,236 INFO sqlalchemy.engine.base.Engine Thread-198 : BEGIN (implicit)
2020-06-08 23:16:42,237 INFO sqlalchemy.engine.base.Engine Thread-198 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-08 23:16:42,237 INFO sqlalchemy.engine.base.Engine Thread-198 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:16:42,238 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-08 23:16:42,238 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-08 23:16:42,238 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', 'test locked', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-08 23:16:42,239 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:16:42,239 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-08 23:16:42,239 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'Zone 5 BAU', 'Zone 5 test', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:16:42,239 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 'Zone 5 BAU', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-08 23:16:42,243 INFO sqlalchemy.engine.base.Engine Thread-198 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-08 23:16:42,243 INFO sqlalchemy.engine.base.Engine Thread-198 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:16:42,244 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:16:42,244 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), 'Test Booking', 'philip', 'test booking', 'Made Up CheckPoint', datetime.datetime(2020, 6, 7, 21, 19, 20), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-06-08 23:16:42,248 INFO sqlalchemy.engine.base.Engine Thread-198 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-08 23:16:42,249 INFO sqlalchemy.engine.base.Engine Thread-198 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-08 23:16:42,249 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-08 23:16:42,250 INFO sqlalchemy.engine.base.Engine Thread-198 : ROLLBACK
2020-06-08 23:16:43,328 INFO sqlalchemy.engine.base.Engine Thread-199 : BEGIN (implicit)
2020-06-08 23:16:43,329 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:16:43,329 INFO sqlalchemy.engine.base.Engine Thread-199 : (1, 1)
2020-06-08 23:16:43,330 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:43,330 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:43,335 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-08 23:16:43,335 INFO sqlalchemy.engine.base.Engine Thread-199 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-08 23:16:43,336 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:16:43,336 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (15, 'Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-08 23:16:43,336 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (19, 'Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'test locked', 128)
2020-06-08 23:16:43,336 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:16:43,336 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (23, 'Zone 5 BAU', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Zone 5 BAU', 131)
2020-06-08 23:16:43,338 INFO sqlalchemy.engine.base.Engine Thread-199 : ROLLBACK
2020-06-08 23:16:44,795 INFO sqlalchemy.engine.base.Engine Thread-200 : BEGIN (implicit)
2020-06-08 23:16:44,796 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:16:44,796 INFO sqlalchemy.engine.base.Engine Thread-200 : (1, 1)
2020-06-08 23:16:44,797 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:44,797 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:44,801 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.id = %s
2020-06-08 23:16:44,801 INFO sqlalchemy.engine.base.Engine Thread-200 : (20,)
2020-06-08 23:16:44,801 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-08 23:16:44,802 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (20, 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-08 23:16:44,806 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT bookings_1.id AS bookings_1_id, bookings_1.slot_id AS bookings_1_slot_id, bookings_1.title AS bookings_1_title, bookings_1.ticket AS bookings_1_ticket, bookings_1.owner_id AS bookings_1_owner_id 
FROM bookings AS bookings_1 
WHERE CAST(bookings_1.slot_id AS SIGNED INTEGER) = %s
2020-06-08 23:16:44,806 INFO sqlalchemy.engine.base.Engine Thread-200 : (20,)
2020-06-08 23:16:44,806 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('bookings_1_id', 'bookings_1_slot_id', 'bookings_1_title', 'bookings_1_ticket', 'bookings_1_owner_id')
2020-06-08 23:16:44,808 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name
2020-06-08 23:16:44,808 INFO sqlalchemy.engine.base.Engine Thread-200 : ()
2020-06-08 23:16:44,809 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 23:16:44,812 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 23:16:44,812 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 23:16:44,816 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-08 23:16:44,816 INFO sqlalchemy.engine.base.Engine Thread-200 : ()
2020-06-08 23:16:44,817 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:16:44,817 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:16:44,817 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:16:44,820 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT complexgroups_1.id AS complexgroups_1_id, complexgroups_1.group_name AS complexgroups_1_group_name 
FROM complexgroups AS complexgroups_1 INNER JOIN datesofinterest AS datesofinterest_1 ON datesofinterest_1.doi_filter = complexgroups_1.id 
WHERE datesofinterest_1.id = %s
2020-06-08 23:16:44,820 INFO sqlalchemy.engine.base.Engine Thread-200 : (20,)
2020-06-08 23:16:44,820 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('complexgroups_1_id', 'complexgroups_1_group_name')
2020-06-08 23:16:44,820 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'Zone 2 Complexes')
2020-06-08 23:16:44,821 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT complexgroups_1.group_members AS complexgroups_1_group_members 
FROM complexgroups AS complexgroups_1 
WHERE complexgroups_1.id = %s
2020-06-08 23:16:44,821 INFO sqlalchemy.engine.base.Engine Thread-200 : (1,)
2020-06-08 23:16:44,822 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('complexgroups_1_group_members',)
2020-06-08 23:16:44,822 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row ('1',)
2020-06-08 23:16:44,828 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT complexes_1.id AS complexes_1_id, complexes_1.complex_name AS complexes_1_complex_name 
FROM complexes AS complexes_1 
WHERE complexes_1.id IN (%s)
2020-06-08 23:16:44,828 INFO sqlalchemy.engine.base.Engine Thread-200 : ('1',)
2020-06-08 23:16:44,828 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('complexes_1_id', 'complexes_1_complex_name')
2020-06-08 23:16:44,829 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'Made Up CheckPoint')
2020-06-08 23:16:44,831 INFO sqlalchemy.engine.base.Engine Thread-200 : ROLLBACK
2020-06-08 23:16:51,839 INFO sqlalchemy.engine.base.Engine Thread-201 : BEGIN (implicit)
2020-06-08 23:16:51,840 INFO sqlalchemy.engine.base.Engine Thread-201 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:16:51,841 INFO sqlalchemy.engine.base.Engine Thread-201 : (1, 1)
2020-06-08 23:16:51,841 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:51,842 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:51,844 INFO sqlalchemy.engine.base.Engine Thread-201 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:16:51,844 INFO sqlalchemy.engine.base.Engine Thread-201 : ('philip', 1, 1)
2020-06-08 23:16:51,845 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:51,845 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:51,854 INFO sqlalchemy.engine.base.Engine Thread-201 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 23:16:51,854 INFO sqlalchemy.engine.base.Engine Thread-201 : ()
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:16:51,855 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 23:16:51,856 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:16:51,856 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:16:51,856 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:16:51,856 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:16:51,856 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 23:16:51,856 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:16:51,873 INFO sqlalchemy.engine.base.Engine Thread-201 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:16:51,873 INFO sqlalchemy.engine.base.Engine Thread-201 : ('philip', 1, 1)
2020-06-08 23:16:51,874 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:51,874 DEBUG sqlalchemy.engine.base.Engine Thread-201 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:51,878 INFO sqlalchemy.engine.base.Engine Thread-201 : ROLLBACK
2020-06-08 23:16:53,295 INFO sqlalchemy.engine.base.Engine Thread-211 : BEGIN (implicit)
2020-06-08 23:16:53,296 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:16:53,296 INFO sqlalchemy.engine.base.Engine Thread-211 : (1, 1)
2020-06-08 23:16:53,297 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:53,297 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:53,299 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:16:53,300 INFO sqlalchemy.engine.base.Engine Thread-211 : ('philip', 1, 1)
2020-06-08 23:16:53,300 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:53,300 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:53,303 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 23:16:53,303 INFO sqlalchemy.engine.base.Engine Thread-211 : ('20', 1)
2020-06-08 23:16:53,303 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 23:16:53,304 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 23:16:53,306 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:16:53,306 INFO sqlalchemy.engine.base.Engine Thread-211 : (82,)
2020-06-08 23:16:53,307 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:16:53,307 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 23:16:53,307 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 23:16:53,307 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 23:16:53,308 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 23:16:53,309 INFO sqlalchemy.engine.base.Engine Thread-211 : (1,)
2020-06-08 23:16:53,309 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:16:53,309 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 23:16:53,309 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 23:16:53,311 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 23:16:53,311 INFO sqlalchemy.engine.base.Engine Thread-211 : ()
2020-06-08 23:16:53,311 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 23:16:53,311 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 23:16:53,312 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 23:16:53,313 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:16:53,313 INFO sqlalchemy.engine.base.Engine Thread-211 : (127,)
2020-06-08 23:16:53,314 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:16:53,314 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 23:16:53,314 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 23:16:53,314 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 23:16:53,314 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 23:16:53,316 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:16:53,316 INFO sqlalchemy.engine.base.Engine Thread-211 : (105,)
2020-06-08 23:16:53,316 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:16:53,317 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 23:16:53,317 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 23:16:53,353 INFO sqlalchemy.engine.base.Engine Thread-211 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:16:53,353 INFO sqlalchemy.engine.base.Engine Thread-211 : ('philip', 1, 1)
2020-06-08 23:16:53,354 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:16:53,354 DEBUG sqlalchemy.engine.base.Engine Thread-211 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:16:53,358 INFO sqlalchemy.engine.base.Engine Thread-211 : ROLLBACK
2020-06-08 23:19:32,946 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-08 23:19:32,946 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 23:19:32,948 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 23:19:32,948 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-08 23:19:32,949 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-08 23:19:32,949 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 23:19:32,949 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-08 23:19:32,950 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-08 23:19:32,950 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-08 23:19:32,950 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 23:19:32,951 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-08 23:19:32,951 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-08 23:19:32,951 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-08 23:19:32,951 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 23:19:32,952 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-08 23:19:32,952 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-08 23:19:32,953 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-08 23:19:32,953 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 23:19:32,953 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-08 23:19:32,953 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 23:19:32,954 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-08 23:19:32,954 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 23:19:32,955 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-08 23:19:32,957 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:19:32,958 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-08 23:19:32,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:32,959 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:32,961 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:19:32,961 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 23:19:32,962 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:32,962 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:32,965 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-08 23:19:32,965 INFO sqlalchemy.engine.base.Engine Thread-2 : ('20', 1)
2020-06-08 23:19:32,966 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-08 23:19:32,966 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (20, 'BaU Zone 2', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 107)
2020-06-08 23:19:32,970 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:19:32,970 INFO sqlalchemy.engine.base.Engine Thread-2 : (82,)
2020-06-08 23:19:32,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:19:32,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-08 23:19:32,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-08 23:19:32,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-08 23:19:32,973 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-08 23:19:32,973 INFO sqlalchemy.engine.base.Engine Thread-2 : (1,)
2020-06-08 23:19:32,974 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:19:32,974 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-08 23:19:32,974 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-08 23:19:32,976 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-08 23:19:32,976 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-08 23:19:32,977 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-08 23:19:32,977 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Zone 2 Complexes', 8, '1', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-08 23:19:32,977 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Zone 5 Complexes', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-08 23:19:32,978 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:19:32,979 INFO sqlalchemy.engine.base.Engine Thread-2 : (127,)
2020-06-08 23:19:32,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:19:32,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-08 23:19:32,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-08 23:19:32,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-08 23:19:32,979 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-08 23:19:32,981 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-08 23:19:32,981 INFO sqlalchemy.engine.base.Engine Thread-2 : (105,)
2020-06-08 23:19:32,981 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-08 23:19:32,982 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-08 23:19:32,982 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-08 23:19:33,082 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:19:33,082 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-08 23:19:33,083 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:33,083 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:33,088 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-08 23:19:42,253 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-08 23:19:42,254 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:19:42,254 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-08 23:19:42,255 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:42,255 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:42,259 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:19:42,259 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-06-08 23:19:42,260 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:42,260 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:42,268 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 23:19:42,269 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-06-08 23:19:42,270 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 23:19:42,270 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:19:42,270 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:19:42,270 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 23:19:42,270 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:19:42,270 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:19:42,270 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:19:42,270 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:19:42,271 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 23:19:42,271 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:19:42,271 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:19:42,271 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:19:42,271 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:19:42,271 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 23:19:42,271 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:19:42,290 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:19:42,290 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-06-08 23:19:42,290 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:42,291 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:42,295 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-08 23:19:49,701 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-08 23:19:49,702 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:19:49,702 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-08 23:19:49,703 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:49,703 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:49,715 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:19:49,715 INFO sqlalchemy.engine.base.Engine Thread-23 : ()
2020-06-08 23:19:49,718 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:19:49,718 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,718 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,719 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:19:49,719 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,719 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,719 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,719 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,720 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,720 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,720 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:19:49,720 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:19:49,720 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:19:49,720 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,721 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:19:49,724 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:19:49,724 INFO sqlalchemy.engine.base.Engine Thread-23 : ('philip',)
2020-06-08 23:19:49,725 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:19:49,725 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:19:49,725 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:19:49,725 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:19:49,725 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:19:49,725 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:19:49,725 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:19:49,726 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:19:49,754 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:19:49,754 INFO sqlalchemy.engine.base.Engine Thread-23 : ('philip', 1, 1)
2020-06-08 23:19:49,754 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:49,754 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:49,757 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:19:49,757 INFO sqlalchemy.engine.base.Engine Thread-23 : ('philip', 1, 1)
2020-06-08 23:19:49,758 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:19:49,758 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:19:49,763 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-08 23:20:39,996 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-06-08 23:20:39,997 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:20:39,998 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-06-08 23:20:39,999 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:20:39,999 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:20:40,003 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:20:40,003 INFO sqlalchemy.engine.base.Engine Thread-33 : ()
2020-06-08 23:20:40,005 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:20:40,005 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,006 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,006 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:20:40,006 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,006 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,006 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,006 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,006 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,007 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,007 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:20:40,007 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:20:40,007 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:20:40,007 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,007 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:20:40,011 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:20:40,011 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip',)
2020-06-08 23:20:40,012 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:20:40,012 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:20:40,012 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:20:40,012 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:20:40,012 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:20:40,012 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:20:40,012 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:20:40,013 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:20:40,038 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:20:40,038 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-06-08 23:20:40,039 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:20:40,039 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:20:40,042 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:20:40,042 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-06-08 23:20:40,043 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:20:40,043 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:20:40,048 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-06-08 23:21:43,783 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-06-08 23:21:43,784 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:21:43,784 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-06-08 23:21:43,786 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:21:43,786 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:21:43,791 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:21:43,791 INFO sqlalchemy.engine.base.Engine Thread-44 : ()
2020-06-08 23:21:43,793 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:21:43,793 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,794 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,794 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:21:43,794 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,794 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,794 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,794 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,795 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,795 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,795 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:21:43,795 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:21:43,795 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:21:43,796 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,796 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:21:43,799 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:21:43,799 INFO sqlalchemy.engine.base.Engine Thread-44 : ('philip',)
2020-06-08 23:21:43,800 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:21:43,800 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:21:43,800 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:21:43,801 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:21:43,801 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:21:43,801 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:21:43,801 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:21:43,801 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:21:43,831 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:21:43,832 INFO sqlalchemy.engine.base.Engine Thread-44 : ('philip', 1, 1)
2020-06-08 23:21:43,832 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:21:43,833 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:21:43,836 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:21:43,836 INFO sqlalchemy.engine.base.Engine Thread-44 : ('philip', 1, 1)
2020-06-08 23:21:43,836 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:21:43,837 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:21:43,842 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-06-08 23:34:31,651 INFO sqlalchemy.engine.base.Engine Thread-56 : BEGIN (implicit)
2020-06-08 23:34:31,652 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:34:31,652 INFO sqlalchemy.engine.base.Engine Thread-56 : (1, 1)
2020-06-08 23:34:31,654 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:31,654 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:31,659 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:34:31,659 INFO sqlalchemy.engine.base.Engine Thread-56 : ()
2020-06-08 23:34:31,661 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:34:31,662 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,662 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,662 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:34:31,662 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,662 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,662 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,663 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,663 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,663 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,663 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:34:31,663 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:34:31,663 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:34:31,663 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,664 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:31,666 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:34:31,666 INFO sqlalchemy.engine.base.Engine Thread-56 : ('philip',)
2020-06-08 23:34:31,667 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:34:31,667 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:34:31,668 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:34:31,668 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:34:31,668 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:34:31,668 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:34:31,668 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:34:31,668 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:34:31,726 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:34:31,726 INFO sqlalchemy.engine.base.Engine Thread-56 : ('philip', 1, 1)
2020-06-08 23:34:31,727 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:31,727 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:31,730 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:34:31,730 INFO sqlalchemy.engine.base.Engine Thread-56 : ('philip', 1, 1)
2020-06-08 23:34:31,731 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:31,731 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:31,736 INFO sqlalchemy.engine.base.Engine Thread-56 : ROLLBACK
2020-06-08 23:34:41,246 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-06-08 23:34:41,248 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:34:41,248 INFO sqlalchemy.engine.base.Engine Thread-68 : (1, 1)
2020-06-08 23:34:41,249 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:41,249 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:41,251 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:34:41,251 INFO sqlalchemy.engine.base.Engine Thread-68 : ('philip', 1, 1)
2020-06-08 23:34:41,252 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:41,252 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:41,262 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-08 23:34:41,262 INFO sqlalchemy.engine.base.Engine Thread-68 : ()
2020-06-08 23:34:41,263 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-08 23:34:41,263 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:34:41,263 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:34:41,263 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 23:34:41,263 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (22, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (23, 'Zone 5 BAU', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-08 23:34:41,264 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-08 23:34:41,268 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:34:41,269 INFO sqlalchemy.engine.base.Engine Thread-68 : ('philip', 1, 1)
2020-06-08 23:34:41,269 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:41,269 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:41,273 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-06-08 23:34:43,482 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-06-08 23:34:43,483 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:34:43,483 INFO sqlalchemy.engine.base.Engine Thread-79 : (1, 1)
2020-06-08 23:34:43,484 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:43,484 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:43,489 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:34:43,489 INFO sqlalchemy.engine.base.Engine Thread-79 : ()
2020-06-08 23:34:43,498 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:34:43,498 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,498 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,498 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:34:43,498 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,499 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,499 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,499 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,499 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,499 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,499 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:34:43,499 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:34:43,499 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:34:43,500 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,500 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:34:43,503 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:34:43,503 INFO sqlalchemy.engine.base.Engine Thread-79 : ('philip',)
2020-06-08 23:34:43,504 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:34:43,504 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:34:43,504 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:34:43,504 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:34:43,504 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:34:43,504 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:34:43,504 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:34:43,505 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:34:43,509 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:34:43,509 INFO sqlalchemy.engine.base.Engine Thread-79 : ('philip', 1, 1)
2020-06-08 23:34:43,509 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:43,510 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:43,512 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:34:43,513 INFO sqlalchemy.engine.base.Engine Thread-79 : ('philip', 1, 1)
2020-06-08 23:34:43,513 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:34:43,513 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:34:43,518 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-06-08 23:35:07,746 INFO sqlalchemy.engine.base.Engine Thread-90 : BEGIN (implicit)
2020-06-08 23:35:07,747 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:35:07,747 INFO sqlalchemy.engine.base.Engine Thread-90 : (1, 1)
2020-06-08 23:35:07,753 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:35:07,761 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:35:07,757 INFO sqlalchemy.engine.base.Engine Thread-91 : BEGIN (implicit)
2020-06-08 23:35:07,762 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:35:07,762 INFO sqlalchemy.engine.base.Engine Thread-91 : (1, 1)
2020-06-08 23:35:07,763 INFO sqlalchemy.engine.base.Engine Thread-94 : BEGIN (implicit)
2020-06-08 23:35:07,764 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:35:07,764 INFO sqlalchemy.engine.base.Engine Thread-94 : (1, 1)
2020-06-08 23:35:07,770 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:35:07,775 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:35:07,777 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:35:07,777 INFO sqlalchemy.engine.base.Engine Thread-93 : BEGIN (implicit)
2020-06-08 23:35:07,778 INFO sqlalchemy.engine.base.Engine Thread-91 : ROLLBACK
2020-06-08 23:35:07,779 INFO sqlalchemy.engine.base.Engine Thread-90 : ROLLBACK
2020-06-08 23:35:07,779 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:35:07,779 INFO sqlalchemy.engine.base.Engine Thread-92 : BEGIN (implicit)
2020-06-08 23:35:07,780 INFO sqlalchemy.engine.base.Engine Thread-93 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:35:07,785 INFO sqlalchemy.engine.base.Engine Thread-93 : (1, 1)
2020-06-08 23:35:07,785 INFO sqlalchemy.engine.base.Engine Thread-92 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:35:07,783 INFO sqlalchemy.engine.base.Engine Thread-94 : ROLLBACK
2020-06-08 23:35:07,785 INFO sqlalchemy.engine.base.Engine Thread-92 : (1, 1)
2020-06-08 23:35:07,786 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:35:07,787 DEBUG sqlalchemy.engine.base.Engine Thread-93 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:35:07,787 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:35:07,787 DEBUG sqlalchemy.engine.base.Engine Thread-92 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:35:07,790 INFO sqlalchemy.engine.base.Engine Thread-93 : ROLLBACK
2020-06-08 23:35:07,791 INFO sqlalchemy.engine.base.Engine Thread-92 : ROLLBACK
2020-06-08 23:48:23,499 INFO sqlalchemy.engine.base.Engine Thread-95 : BEGIN (implicit)
2020-06-08 23:48:23,501 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:48:23,501 INFO sqlalchemy.engine.base.Engine Thread-95 : (1, 1)
2020-06-08 23:48:23,503 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:48:23,503 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:48:23,507 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:48:23,507 INFO sqlalchemy.engine.base.Engine Thread-95 : ()
2020-06-08 23:48:23,509 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:48:23,510 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,510 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,510 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:48:23,510 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,510 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,511 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,511 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,511 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,511 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,511 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:48:23,511 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:48:23,511 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:48:23,512 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,512 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:48:23,515 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:48:23,515 INFO sqlalchemy.engine.base.Engine Thread-95 : ('philip',)
2020-06-08 23:48:23,516 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:48:23,516 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:48:23,516 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:48:23,517 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:48:23,517 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:48:23,517 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:48:23,517 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:48:23,517 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:48:23,546 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:48:23,546 INFO sqlalchemy.engine.base.Engine Thread-95 : ('philip', 1, 1)
2020-06-08 23:48:23,547 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:48:23,547 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:48:23,551 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:48:23,551 INFO sqlalchemy.engine.base.Engine Thread-95 : ('philip', 1, 1)
2020-06-08 23:48:23,552 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:48:23,552 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:48:23,557 INFO sqlalchemy.engine.base.Engine Thread-95 : ROLLBACK
2020-06-08 23:48:23,901 INFO sqlalchemy.engine.base.Engine Thread-106 : BEGIN (implicit)
2020-06-08 23:48:23,902 INFO sqlalchemy.engine.base.Engine Thread-106 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:48:23,902 INFO sqlalchemy.engine.base.Engine Thread-106 : (1, 1)
2020-06-08 23:48:23,903 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:48:23,903 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:48:23,906 INFO sqlalchemy.engine.base.Engine Thread-106 : ROLLBACK
2020-06-08 23:48:24,028 INFO sqlalchemy.engine.base.Engine Thread-107 : BEGIN (implicit)
2020-06-08 23:48:24,029 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:48:24,029 INFO sqlalchemy.engine.base.Engine Thread-107 : (1, 1)
2020-06-08 23:48:24,030 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:48:24,033 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:48:24,032 INFO sqlalchemy.engine.base.Engine Thread-108 : BEGIN (implicit)
2020-06-08 23:48:24,036 INFO sqlalchemy.engine.base.Engine Thread-108 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:48:24,036 INFO sqlalchemy.engine.base.Engine Thread-108 : (1, 1)
2020-06-08 23:48:24,037 DEBUG sqlalchemy.engine.base.Engine Thread-108 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:48:24,038 DEBUG sqlalchemy.engine.base.Engine Thread-108 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:48:24,040 INFO sqlalchemy.engine.base.Engine Thread-107 : ROLLBACK
2020-06-08 23:48:24,042 INFO sqlalchemy.engine.base.Engine Thread-108 : ROLLBACK
2020-06-08 23:48:24,047 INFO sqlalchemy.engine.base.Engine Thread-109 : BEGIN (implicit)
2020-06-08 23:48:24,049 INFO sqlalchemy.engine.base.Engine Thread-109 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:48:24,049 INFO sqlalchemy.engine.base.Engine Thread-109 : (1, 1)
2020-06-08 23:48:24,051 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:48:24,052 DEBUG sqlalchemy.engine.base.Engine Thread-109 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:48:24,052 INFO sqlalchemy.engine.base.Engine Thread-110 : BEGIN (implicit)
2020-06-08 23:48:24,055 INFO sqlalchemy.engine.base.Engine Thread-109 : ROLLBACK
2020-06-08 23:48:24,061 INFO sqlalchemy.engine.base.Engine Thread-110 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:48:24,062 INFO sqlalchemy.engine.base.Engine Thread-110 : (1, 1)
2020-06-08 23:48:24,062 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:48:24,063 DEBUG sqlalchemy.engine.base.Engine Thread-110 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:48:24,065 INFO sqlalchemy.engine.base.Engine Thread-110 : ROLLBACK
2020-06-08 23:50:48,222 INFO sqlalchemy.engine.base.Engine Thread-112 : BEGIN (implicit)
2020-06-08 23:50:48,223 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:50:48,223 INFO sqlalchemy.engine.base.Engine Thread-112 : (1, 1)
2020-06-08 23:50:48,225 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:50:48,226 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:50:48,230 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:50:48,230 INFO sqlalchemy.engine.base.Engine Thread-112 : ()
2020-06-08 23:50:48,232 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:50:48,233 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,233 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,233 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:50:48,233 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,234 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,234 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,234 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,234 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,234 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,234 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:50:48,235 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:50:48,235 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:50:48,235 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,235 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:50:48,239 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:50:48,239 INFO sqlalchemy.engine.base.Engine Thread-112 : ('philip',)
2020-06-08 23:50:48,240 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:50:48,240 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:50:48,240 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:50:48,240 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:50:48,240 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:50:48,240 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:50:48,240 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:50:48,241 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:50:48,245 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:50:48,245 INFO sqlalchemy.engine.base.Engine Thread-112 : ('philip', 1, 1)
2020-06-08 23:50:48,246 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:50:48,246 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:50:48,249 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:50:48,249 INFO sqlalchemy.engine.base.Engine Thread-112 : ('philip', 1, 1)
2020-06-08 23:50:48,250 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:50:48,250 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:50:48,255 INFO sqlalchemy.engine.base.Engine Thread-112 : ROLLBACK
2020-06-08 23:50:48,637 INFO sqlalchemy.engine.base.Engine Thread-123 : BEGIN (implicit)
2020-06-08 23:50:48,638 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:50:48,638 INFO sqlalchemy.engine.base.Engine Thread-123 : (1, 1)
2020-06-08 23:50:48,639 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:50:48,639 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:50:48,641 INFO sqlalchemy.engine.base.Engine Thread-123 : ROLLBACK
2020-06-08 23:50:48,740 INFO sqlalchemy.engine.base.Engine Thread-124 : BEGIN (implicit)
2020-06-08 23:50:48,741 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:50:48,744 INFO sqlalchemy.engine.base.Engine Thread-125 : BEGIN (implicit)
2020-06-08 23:50:48,744 INFO sqlalchemy.engine.base.Engine Thread-124 : (1, 1)
2020-06-08 23:50:48,747 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:50:48,751 INFO sqlalchemy.engine.base.Engine Thread-125 : (1, 1)
2020-06-08 23:50:48,751 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:50:48,752 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:50:48,749 INFO sqlalchemy.engine.base.Engine Thread-126 : BEGIN (implicit)
2020-06-08 23:50:48,753 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:50:48,757 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:50:48,756 INFO sqlalchemy.engine.base.Engine Thread-124 : ROLLBACK
2020-06-08 23:50:48,757 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:50:48,760 INFO sqlalchemy.engine.base.Engine Thread-126 : (1, 1)
2020-06-08 23:50:48,760 INFO sqlalchemy.engine.base.Engine Thread-125 : ROLLBACK
2020-06-08 23:50:48,755 INFO sqlalchemy.engine.base.Engine Thread-127 : BEGIN (implicit)
2020-06-08 23:50:48,761 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:50:48,762 INFO sqlalchemy.engine.base.Engine Thread-127 : (1, 1)
2020-06-08 23:50:48,763 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:50:48,763 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:50:48,765 INFO sqlalchemy.engine.base.Engine Thread-126 : ROLLBACK
2020-06-08 23:50:48,766 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:50:48,766 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:50:48,769 INFO sqlalchemy.engine.base.Engine Thread-127 : ROLLBACK
2020-06-08 23:51:26,223 INFO sqlalchemy.engine.base.Engine Thread-129 : BEGIN (implicit)
2020-06-08 23:51:26,224 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:26,224 INFO sqlalchemy.engine.base.Engine Thread-129 : (1, 1)
2020-06-08 23:51:26,225 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:26,225 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:26,230 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:51:26,230 INFO sqlalchemy.engine.base.Engine Thread-129 : ()
2020-06-08 23:51:26,232 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:51:26,232 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,232 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,233 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:51:26,233 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,233 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,233 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,233 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,233 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,234 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,234 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:51:26,234 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:51:26,234 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:51:26,234 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,234 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:26,237 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:51:26,237 INFO sqlalchemy.engine.base.Engine Thread-129 : ('philip',)
2020-06-08 23:51:26,238 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:51:26,238 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:51:26,239 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:51:26,239 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:51:26,239 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:51:26,239 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:51:26,239 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:51:26,239 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:51:26,266 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:51:26,266 INFO sqlalchemy.engine.base.Engine Thread-129 : ('philip', 1, 1)
2020-06-08 23:51:26,266 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:26,267 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:26,270 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:51:26,270 INFO sqlalchemy.engine.base.Engine Thread-129 : ('philip', 1, 1)
2020-06-08 23:51:26,270 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:26,271 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:26,275 INFO sqlalchemy.engine.base.Engine Thread-129 : ROLLBACK
2020-06-08 23:51:26,514 INFO sqlalchemy.engine.base.Engine Thread-140 : BEGIN (implicit)
2020-06-08 23:51:26,515 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:26,515 INFO sqlalchemy.engine.base.Engine Thread-140 : (1, 1)
2020-06-08 23:51:26,516 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:26,516 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:26,519 INFO sqlalchemy.engine.base.Engine Thread-140 : ROLLBACK
2020-06-08 23:51:26,600 INFO sqlalchemy.engine.base.Engine Thread-142 : BEGIN (implicit)
2020-06-08 23:51:26,602 INFO sqlalchemy.engine.base.Engine Thread-141 : BEGIN (implicit)
2020-06-08 23:51:26,604 INFO sqlalchemy.engine.base.Engine Thread-142 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:26,605 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:26,609 INFO sqlalchemy.engine.base.Engine Thread-141 : (1, 1)
2020-06-08 23:51:26,608 INFO sqlalchemy.engine.base.Engine Thread-142 : (1, 1)
2020-06-08 23:51:26,608 INFO sqlalchemy.engine.base.Engine Thread-143 : BEGIN (implicit)
2020-06-08 23:51:26,610 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:26,611 INFO sqlalchemy.engine.base.Engine Thread-143 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:26,614 INFO sqlalchemy.engine.base.Engine Thread-143 : (1, 1)
2020-06-08 23:51:26,612 DEBUG sqlalchemy.engine.base.Engine Thread-142 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:26,614 INFO sqlalchemy.engine.base.Engine Thread-144 : BEGIN (implicit)
2020-06-08 23:51:26,611 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:26,616 INFO sqlalchemy.engine.base.Engine Thread-144 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:26,616 DEBUG sqlalchemy.engine.base.Engine Thread-143 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:26,619 DEBUG sqlalchemy.engine.base.Engine Thread-143 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:26,619 INFO sqlalchemy.engine.base.Engine Thread-142 : ROLLBACK
2020-06-08 23:51:26,619 INFO sqlalchemy.engine.base.Engine Thread-144 : (1, 1)
2020-06-08 23:51:26,618 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:26,622 INFO sqlalchemy.engine.base.Engine Thread-143 : ROLLBACK
2020-06-08 23:51:26,624 INFO sqlalchemy.engine.base.Engine Thread-141 : ROLLBACK
2020-06-08 23:51:26,626 DEBUG sqlalchemy.engine.base.Engine Thread-144 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:26,627 DEBUG sqlalchemy.engine.base.Engine Thread-144 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:26,629 INFO sqlalchemy.engine.base.Engine Thread-144 : ROLLBACK
2020-06-08 23:51:39,123 INFO sqlalchemy.engine.base.Engine Thread-146 : BEGIN (implicit)
2020-06-08 23:51:39,124 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:39,124 INFO sqlalchemy.engine.base.Engine Thread-146 : (1, 1)
2020-06-08 23:51:39,125 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:39,125 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:39,129 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:51:39,129 INFO sqlalchemy.engine.base.Engine Thread-146 : ()
2020-06-08 23:51:39,131 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:51:39,132 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,132 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,132 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:51:39,132 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,133 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,133 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,133 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,133 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,133 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,133 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:51:39,133 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:51:39,134 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:51:39,134 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,134 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:51:39,137 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:51:39,137 INFO sqlalchemy.engine.base.Engine Thread-146 : ('philip',)
2020-06-08 23:51:39,138 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:51:39,138 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:51:39,139 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:51:39,139 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:51:39,139 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:51:39,139 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:51:39,139 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:51:39,139 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:51:39,165 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:51:39,165 INFO sqlalchemy.engine.base.Engine Thread-146 : ('philip', 1, 1)
2020-06-08 23:51:39,166 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:39,166 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:39,170 INFO sqlalchemy.engine.base.Engine Thread-146 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:51:39,170 INFO sqlalchemy.engine.base.Engine Thread-146 : ('philip', 1, 1)
2020-06-08 23:51:39,170 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:39,171 DEBUG sqlalchemy.engine.base.Engine Thread-146 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:39,175 INFO sqlalchemy.engine.base.Engine Thread-146 : ROLLBACK
2020-06-08 23:51:39,431 INFO sqlalchemy.engine.base.Engine Thread-157 : BEGIN (implicit)
2020-06-08 23:51:39,434 INFO sqlalchemy.engine.base.Engine Thread-158 : BEGIN (implicit)
2020-06-08 23:51:39,435 INFO sqlalchemy.engine.base.Engine Thread-157 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:39,442 INFO sqlalchemy.engine.base.Engine Thread-157 : (1, 1)
2020-06-08 23:51:39,439 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:39,442 INFO sqlalchemy.engine.base.Engine Thread-158 : (1, 1)
2020-06-08 23:51:39,442 INFO sqlalchemy.engine.base.Engine Thread-160 : BEGIN (implicit)
2020-06-08 23:51:39,438 INFO sqlalchemy.engine.base.Engine Thread-159 : BEGIN (implicit)
2020-06-08 23:51:39,443 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:39,443 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:39,444 INFO sqlalchemy.engine.base.Engine Thread-160 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:39,445 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:39,445 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:39,446 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:39,446 INFO sqlalchemy.engine.base.Engine Thread-160 : (1, 1)
2020-06-08 23:51:39,446 INFO sqlalchemy.engine.base.Engine Thread-159 : (1, 1)
2020-06-08 23:51:39,449 INFO sqlalchemy.engine.base.Engine Thread-157 : ROLLBACK
2020-06-08 23:51:39,449 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:39,449 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:39,452 INFO sqlalchemy.engine.base.Engine Thread-159 : ROLLBACK
2020-06-08 23:51:39,455 INFO sqlalchemy.engine.base.Engine Thread-158 : ROLLBACK
2020-06-08 23:51:39,456 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:39,456 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:39,459 INFO sqlalchemy.engine.base.Engine Thread-160 : ROLLBACK
2020-06-08 23:51:39,467 INFO sqlalchemy.engine.base.Engine Thread-161 : BEGIN (implicit)
2020-06-08 23:51:39,468 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:51:39,468 INFO sqlalchemy.engine.base.Engine Thread-161 : (1, 1)
2020-06-08 23:51:39,469 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:51:39,469 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:51:39,471 INFO sqlalchemy.engine.base.Engine Thread-161 : ROLLBACK
2020-06-08 23:56:53,124 INFO sqlalchemy.engine.base.Engine Thread-164 : BEGIN (implicit)
2020-06-08 23:56:53,126 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:56:53,126 INFO sqlalchemy.engine.base.Engine Thread-164 : (1, 1)
2020-06-08 23:56:53,128 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:56:53,128 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:56:53,133 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:56:53,133 INFO sqlalchemy.engine.base.Engine Thread-164 : ()
2020-06-08 23:56:53,136 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:56:53,138 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,139 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,139 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:56:53,139 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,139 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,139 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,139 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,140 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,140 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,140 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:56:53,140 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:56:53,140 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:56:53,140 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,140 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:56:53,144 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:56:53,144 INFO sqlalchemy.engine.base.Engine Thread-164 : ('philip',)
2020-06-08 23:56:53,145 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:56:53,145 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:56:53,146 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:56:53,146 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:56:53,146 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:56:53,146 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:56:53,146 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:56:53,146 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:56:53,175 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:56:53,175 INFO sqlalchemy.engine.base.Engine Thread-164 : ('philip', 1, 1)
2020-06-08 23:56:53,176 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:56:53,176 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:56:53,179 INFO sqlalchemy.engine.base.Engine Thread-164 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:56:53,179 INFO sqlalchemy.engine.base.Engine Thread-164 : ('philip', 1, 1)
2020-06-08 23:56:53,180 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:56:53,180 DEBUG sqlalchemy.engine.base.Engine Thread-164 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:56:53,185 INFO sqlalchemy.engine.base.Engine Thread-164 : ROLLBACK
2020-06-08 23:56:53,478 INFO sqlalchemy.engine.base.Engine Thread-175 : BEGIN (implicit)
2020-06-08 23:56:53,479 INFO sqlalchemy.engine.base.Engine Thread-175 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:56:53,479 INFO sqlalchemy.engine.base.Engine Thread-175 : (1, 1)
2020-06-08 23:56:53,480 DEBUG sqlalchemy.engine.base.Engine Thread-175 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:56:53,480 DEBUG sqlalchemy.engine.base.Engine Thread-175 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:56:53,483 INFO sqlalchemy.engine.base.Engine Thread-175 : ROLLBACK
2020-06-08 23:56:53,577 INFO sqlalchemy.engine.base.Engine Thread-176 : BEGIN (implicit)
2020-06-08 23:56:53,578 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:56:53,578 INFO sqlalchemy.engine.base.Engine Thread-176 : (1, 1)
2020-06-08 23:56:53,580 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:56:53,581 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:56:53,583 INFO sqlalchemy.engine.base.Engine Thread-177 : BEGIN (implicit)
2020-06-08 23:56:53,585 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:56:53,585 INFO sqlalchemy.engine.base.Engine Thread-177 : (1, 1)
2020-06-08 23:56:53,587 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:56:53,587 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:56:53,589 INFO sqlalchemy.engine.base.Engine Thread-178 : BEGIN (implicit)
2020-06-08 23:56:53,590 INFO sqlalchemy.engine.base.Engine Thread-178 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:56:53,590 INFO sqlalchemy.engine.base.Engine Thread-178 : (1, 1)
2020-06-08 23:56:53,593 INFO sqlalchemy.engine.base.Engine Thread-179 : BEGIN (implicit)
2020-06-08 23:56:53,599 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:56:53,599 INFO sqlalchemy.engine.base.Engine Thread-179 : (1, 1)
2020-06-08 23:56:53,598 INFO sqlalchemy.engine.base.Engine Thread-176 : ROLLBACK
2020-06-08 23:56:53,596 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:56:53,600 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:56:53,596 INFO sqlalchemy.engine.base.Engine Thread-177 : ROLLBACK
2020-06-08 23:56:53,603 INFO sqlalchemy.engine.base.Engine Thread-178 : ROLLBACK
2020-06-08 23:56:53,603 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:56:53,605 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:56:53,608 INFO sqlalchemy.engine.base.Engine Thread-179 : ROLLBACK
2020-06-08 23:57:13,800 INFO sqlalchemy.engine.base.Engine Thread-181 : BEGIN (implicit)
2020-06-08 23:57:13,801 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:57:13,801 INFO sqlalchemy.engine.base.Engine Thread-181 : (1, 1)
2020-06-08 23:57:13,802 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:57:13,802 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:57:13,806 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:57:13,806 INFO sqlalchemy.engine.base.Engine Thread-181 : ()
2020-06-08 23:57:13,808 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:57:13,809 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,809 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,809 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:57:13,810 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,810 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,810 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,810 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,810 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,810 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,810 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:57:13,811 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:57:13,811 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:57:13,811 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,811 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:57:13,814 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:57:13,814 INFO sqlalchemy.engine.base.Engine Thread-181 : ('philip',)
2020-06-08 23:57:13,815 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:57:13,815 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:57:13,815 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:57:13,815 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:57:13,816 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:57:13,816 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:57:13,816 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:57:13,816 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:57:13,821 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:57:13,822 INFO sqlalchemy.engine.base.Engine Thread-181 : ('philip', 1, 1)
2020-06-08 23:57:13,822 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:57:13,823 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:57:13,825 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:57:13,825 INFO sqlalchemy.engine.base.Engine Thread-181 : ('philip', 1, 1)
2020-06-08 23:57:13,826 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:57:13,826 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:57:13,830 INFO sqlalchemy.engine.base.Engine Thread-181 : ROLLBACK
2020-06-08 23:57:13,948 INFO sqlalchemy.engine.base.Engine Thread-182 : BEGIN (implicit)
2020-06-08 23:57:13,949 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:57:13,949 INFO sqlalchemy.engine.base.Engine Thread-182 : (1, 1)
2020-06-08 23:57:13,949 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:57:13,950 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:57:13,952 INFO sqlalchemy.engine.base.Engine Thread-182 : ROLLBACK
2020-06-08 23:58:16,779 INFO sqlalchemy.engine.base.Engine Thread-183 : BEGIN (implicit)
2020-06-08 23:58:16,780 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:58:16,780 INFO sqlalchemy.engine.base.Engine Thread-183 : (1, 1)
2020-06-08 23:58:16,781 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:58:16,781 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:58:16,786 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:58:16,786 INFO sqlalchemy.engine.base.Engine Thread-183 : ()
2020-06-08 23:58:16,787 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:58:16,788 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,788 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,788 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:58:16,788 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,788 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,789 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,789 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,789 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,789 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,789 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:58:16,789 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:58:16,789 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:58:16,789 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,790 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:58:16,793 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:58:16,793 INFO sqlalchemy.engine.base.Engine Thread-183 : ('philip',)
2020-06-08 23:58:16,794 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:58:16,794 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:58:16,794 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:58:16,794 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:58:16,794 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:58:16,794 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:58:16,794 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:58:16,794 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:58:16,819 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:58:16,819 INFO sqlalchemy.engine.base.Engine Thread-183 : ('philip', 1, 1)
2020-06-08 23:58:16,820 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:58:16,820 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:58:16,823 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:58:16,823 INFO sqlalchemy.engine.base.Engine Thread-183 : ('philip', 1, 1)
2020-06-08 23:58:16,823 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:58:16,824 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:58:16,828 INFO sqlalchemy.engine.base.Engine Thread-183 : ROLLBACK
2020-06-08 23:58:17,488 INFO sqlalchemy.engine.base.Engine Thread-195 : BEGIN (implicit)
2020-06-08 23:58:17,489 INFO sqlalchemy.engine.base.Engine Thread-195 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:58:17,489 INFO sqlalchemy.engine.base.Engine Thread-195 : (1, 1)
2020-06-08 23:58:17,492 INFO sqlalchemy.engine.base.Engine Thread-196 : BEGIN (implicit)
2020-06-08 23:58:17,492 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:58:17,495 INFO sqlalchemy.engine.base.Engine Thread-194 : BEGIN (implicit)
2020-06-08 23:58:17,500 INFO sqlalchemy.engine.base.Engine Thread-194 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:58:17,500 INFO sqlalchemy.engine.base.Engine Thread-194 : (1, 1)
2020-06-08 23:58:17,499 DEBUG sqlalchemy.engine.base.Engine Thread-195 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:58:17,498 INFO sqlalchemy.engine.base.Engine Thread-197 : BEGIN (implicit)
2020-06-08 23:58:17,502 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:58:17,501 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:58:17,503 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:58:17,503 INFO sqlalchemy.engine.base.Engine Thread-197 : (1, 1)
2020-06-08 23:58:17,496 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:58:17,505 INFO sqlalchemy.engine.base.Engine Thread-194 : ROLLBACK
2020-06-08 23:58:17,506 INFO sqlalchemy.engine.base.Engine Thread-195 : ROLLBACK
2020-06-08 23:58:17,506 INFO sqlalchemy.engine.base.Engine Thread-196 : (1, 1)
2020-06-08 23:58:17,506 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:58:17,507 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:58:17,509 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:58:17,509 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:58:17,511 INFO sqlalchemy.engine.base.Engine Thread-196 : ROLLBACK
2020-06-08 23:58:17,512 INFO sqlalchemy.engine.base.Engine Thread-197 : ROLLBACK
2020-06-08 23:58:17,520 INFO sqlalchemy.engine.base.Engine Thread-198 : BEGIN (implicit)
2020-06-08 23:58:17,521 INFO sqlalchemy.engine.base.Engine Thread-198 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:58:17,521 INFO sqlalchemy.engine.base.Engine Thread-198 : (1, 1)
2020-06-08 23:58:17,521 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:58:17,522 DEBUG sqlalchemy.engine.base.Engine Thread-198 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:58:17,524 INFO sqlalchemy.engine.base.Engine Thread-198 : ROLLBACK
2020-06-08 23:59:17,130 INFO sqlalchemy.engine.base.Engine Thread-200 : BEGIN (implicit)
2020-06-08 23:59:17,131 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:17,131 INFO sqlalchemy.engine.base.Engine Thread-200 : (1, 1)
2020-06-08 23:59:17,132 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:17,132 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:17,137 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:59:17,137 INFO sqlalchemy.engine.base.Engine Thread-200 : ()
2020-06-08 23:59:17,139 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:59:17,139 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,139 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,140 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:59:17,140 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,140 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,140 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,140 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,140 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,140 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,140 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:59:17,141 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:59:17,141 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:59:17,141 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,141 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:17,145 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:59:17,145 INFO sqlalchemy.engine.base.Engine Thread-200 : ('philip',)
2020-06-08 23:59:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:59:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:59:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:59:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:59:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:59:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:59:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:59:17,146 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:59:17,176 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:59:17,176 INFO sqlalchemy.engine.base.Engine Thread-200 : ('philip', 1, 1)
2020-06-08 23:59:17,177 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:17,177 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:17,180 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:59:17,180 INFO sqlalchemy.engine.base.Engine Thread-200 : ('philip', 1, 1)
2020-06-08 23:59:17,181 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:17,181 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:17,187 INFO sqlalchemy.engine.base.Engine Thread-200 : ROLLBACK
2020-06-08 23:59:29,538 INFO sqlalchemy.engine.base.Engine Thread-212 : BEGIN (implicit)
2020-06-08 23:59:29,545 INFO sqlalchemy.engine.base.Engine Thread-212 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:29,545 INFO sqlalchemy.engine.base.Engine Thread-212 : (1, 1)
2020-06-08 23:59:29,541 INFO sqlalchemy.engine.base.Engine Thread-213 : BEGIN (implicit)
2020-06-08 23:59:29,546 INFO sqlalchemy.engine.base.Engine Thread-213 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:29,546 INFO sqlalchemy.engine.base.Engine Thread-213 : (1, 1)
2020-06-08 23:59:29,543 INFO sqlalchemy.engine.base.Engine Thread-214 : BEGIN (implicit)
2020-06-08 23:59:29,547 INFO sqlalchemy.engine.base.Engine Thread-214 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:29,547 INFO sqlalchemy.engine.base.Engine Thread-214 : (1, 1)
2020-06-08 23:59:29,548 DEBUG sqlalchemy.engine.base.Engine Thread-214 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:29,549 DEBUG sqlalchemy.engine.base.Engine Thread-213 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:29,549 DEBUG sqlalchemy.engine.base.Engine Thread-214 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:29,552 INFO sqlalchemy.engine.base.Engine Thread-215 : BEGIN (implicit)
2020-06-08 23:59:29,552 DEBUG sqlalchemy.engine.base.Engine Thread-213 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:29,560 INFO sqlalchemy.engine.base.Engine Thread-213 : ROLLBACK
2020-06-08 23:59:29,555 INFO sqlalchemy.engine.base.Engine Thread-216 : BEGIN (implicit)
2020-06-08 23:59:29,557 INFO sqlalchemy.engine.base.Engine Thread-214 : ROLLBACK
2020-06-08 23:59:29,558 INFO sqlalchemy.engine.base.Engine Thread-215 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:29,554 DEBUG sqlalchemy.engine.base.Engine Thread-212 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:29,561 INFO sqlalchemy.engine.base.Engine Thread-216 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:29,563 INFO sqlalchemy.engine.base.Engine Thread-216 : (1, 1)
2020-06-08 23:59:29,563 DEBUG sqlalchemy.engine.base.Engine Thread-212 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:29,562 INFO sqlalchemy.engine.base.Engine Thread-215 : (1, 1)
2020-06-08 23:59:29,566 INFO sqlalchemy.engine.base.Engine Thread-212 : ROLLBACK
2020-06-08 23:59:29,566 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:29,567 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:29,569 INFO sqlalchemy.engine.base.Engine Thread-216 : ROLLBACK
2020-06-08 23:59:29,570 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:29,571 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:29,573 INFO sqlalchemy.engine.base.Engine Thread-215 : ROLLBACK
2020-06-08 23:59:46,673 INFO sqlalchemy.engine.base.Engine Thread-217 : BEGIN (implicit)
2020-06-08 23:59:46,674 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:46,674 INFO sqlalchemy.engine.base.Engine Thread-217 : (1, 1)
2020-06-08 23:59:46,675 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:46,675 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:46,679 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged, complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM bookings, complexes 
WHERE bookings.complex = complexes.id
2020-06-08 23:59:46,679 INFO sqlalchemy.engine.base.Engine Thread-217 : ()
2020-06-08 23:59:46,681 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged', 'complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-08 23:59:46,682 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (7, 0.0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,682 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (8, 0.0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,682 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (9, 0.0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:59:46,682 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (11, 0.0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 13), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,683 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (12, 0.0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 12, 16), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,683 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (13, 0.0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'troopaq', '987654321', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, datetime.datetime(2020, 2, 21, 0, 30, 5), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,683 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,683 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,683 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,683 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:59:46,683 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:59:46,684 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51), 2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-08 23:59:46,684 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (29, 0.0, 'A better title for this change', datetime.datetime(2020, 3, 8, 2, 0), datetime.datetime(2020, 3, 8, 5, 0), 'werwer', 'werwer', '2234234243234', 'werwer', 'werwer', 'bob', 1, 98, 0, datetime.datetime(2020, 2, 21, 1, 50, 30), 'philip', 'Approved by philip', 'SCR1234566', '', datetime.datetime(2020, 2, 21, 0, 35, 18), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,684 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20), 1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-08 23:59:46,687 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.approval_reason AS bookings_approval_reason, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-06-08 23:59:46,687 INFO sqlalchemy.engine.base.Engine Thread-217 : ('philip',)
2020-06-08 23:59:46,688 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_approval_reason', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-06-08 23:59:46,689 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (21, 0.0, 'TestA', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestA', 'TestA', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 21, 0, 13, 22), 'philip', 'Approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 9, 44))
2020-06-08 23:59:46,689 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (22, 0.0, 'TestB', datetime.datetime(2020, 3, 4, 2, 0), datetime.datetime(2020, 3, 4, 4, 0), '123456', 'troopaq', '100000', 'TestB', 'test b', 'philip', 1, 98, 0, None, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 20, 15, 10, 17))
2020-06-08 23:59:46,689 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (23, 0.0, 'Booking1', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules', 'Booking for testing rules against complex 1', 'philip', 1, 98, 0, datetime.datetime(2020, 2, 20, 23, 58, 3), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 20, 23, 58, 3))
2020-06-08 23:59:46,689 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (25, 0.0, 'Booking2', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 2', 'Booking for testing rules #2 on Fortigate', 'philip', 2, 98, 0, datetime.datetime(2020, 2, 21, 0, 3, 10), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 3, 10))
2020-06-08 23:59:46,689 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (26, 0.0, 'Booking3', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 3', 'Testing booking #3', 'philip', 2, 98, 0, None, None, 'Manually set to not approved by philip', 'SCR1234568', '', datetime.datetime(2020, 2, 21, 0, 5, 36))
2020-06-08 23:59:46,689 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (28, 0.0, 'Booking4', datetime.datetime(2020, 3, 7, 2, 0), datetime.datetime(2020, 3, 7, 4, 0), '123456', 'troopaq', '100000', 'Booking for testing rules 4', 'Booking test #4 on Fortigate', 'philip', 2, 98, 0, None, None, 'Booking pending, too many bookings per day/complex)', 'SCR1234567', '', datetime.datetime(2020, 2, 21, 0, 11, 51))
2020-06-08 23:59:46,689 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (30, 0.0, 'Test Booking', datetime.datetime(2020, 6, 10, 2, 0), datetime.datetime(2020, 6, 10, 4, 0), '123456', 'troopaq', '100000', 'Testing project', 'test booking', 'philip', 1, 99, 0, datetime.datetime(2020, 6, 7, 21, 19, 20), 'Automatic Approval', 'Automatic Approval', 'SCR1234568', '', datetime.datetime(2020, 6, 7, 21, 19, 20))
2020-06-08 23:59:46,716 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:59:46,716 INFO sqlalchemy.engine.base.Engine Thread-217 : ('philip', 1, 1)
2020-06-08 23:59:46,716 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:46,717 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:46,720 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-08 23:59:46,720 INFO sqlalchemy.engine.base.Engine Thread-217 : ('philip', 1, 1)
2020-06-08 23:59:46,720 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:46,720 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:46,725 INFO sqlalchemy.engine.base.Engine Thread-217 : ROLLBACK
2020-06-08 23:59:46,971 INFO sqlalchemy.engine.base.Engine Thread-228 : BEGIN (implicit)
2020-06-08 23:59:46,972 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:46,972 INFO sqlalchemy.engine.base.Engine Thread-228 : (1, 1)
2020-06-08 23:59:46,973 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:46,974 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:46,976 INFO sqlalchemy.engine.base.Engine Thread-228 : ROLLBACK
2020-06-08 23:59:47,044 INFO sqlalchemy.engine.base.Engine Thread-231 : BEGIN (implicit)
2020-06-08 23:59:47,046 INFO sqlalchemy.engine.base.Engine Thread-229 : BEGIN (implicit)
2020-06-08 23:59:47,048 INFO sqlalchemy.engine.base.Engine Thread-231 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:47,051 INFO sqlalchemy.engine.base.Engine Thread-231 : (1, 1)
2020-06-08 23:59:47,050 INFO sqlalchemy.engine.base.Engine Thread-229 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:47,051 INFO sqlalchemy.engine.base.Engine Thread-229 : (1, 1)
2020-06-08 23:59:47,049 INFO sqlalchemy.engine.base.Engine Thread-230 : BEGIN (implicit)
2020-06-08 23:59:47,051 DEBUG sqlalchemy.engine.base.Engine Thread-231 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:47,052 DEBUG sqlalchemy.engine.base.Engine Thread-229 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:47,056 DEBUG sqlalchemy.engine.base.Engine Thread-229 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:47,053 INFO sqlalchemy.engine.base.Engine Thread-230 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:47,058 INFO sqlalchemy.engine.base.Engine Thread-230 : (1, 1)
2020-06-08 23:59:47,055 DEBUG sqlalchemy.engine.base.Engine Thread-231 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:47,058 INFO sqlalchemy.engine.base.Engine Thread-229 : ROLLBACK
2020-06-08 23:59:47,055 INFO sqlalchemy.engine.base.Engine Thread-232 : BEGIN (implicit)
2020-06-08 23:59:47,062 INFO sqlalchemy.engine.base.Engine Thread-232 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-08 23:59:47,060 INFO sqlalchemy.engine.base.Engine Thread-231 : ROLLBACK
2020-06-08 23:59:47,062 INFO sqlalchemy.engine.base.Engine Thread-232 : (1, 1)
2020-06-08 23:59:47,059 DEBUG sqlalchemy.engine.base.Engine Thread-230 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:47,063 DEBUG sqlalchemy.engine.base.Engine Thread-230 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:47,064 DEBUG sqlalchemy.engine.base.Engine Thread-232 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-08 23:59:47,066 INFO sqlalchemy.engine.base.Engine Thread-230 : ROLLBACK
2020-06-08 23:59:47,066 DEBUG sqlalchemy.engine.base.Engine Thread-232 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-08 23:59:47,069 INFO sqlalchemy.engine.base.Engine Thread-232 : ROLLBACK
