2020-06-06 10:58:20,860 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-06-06 10:58:20,863 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 10:58:20,863 INFO sqlalchemy.engine.base.Engine Thread-74 : (1, 1)
2020-06-06 10:58:20,864 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 10:58:20,865 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 10:58:20,870 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 10:58:20,870 INFO sqlalchemy.engine.base.Engine Thread-74 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 10:58:20,871 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 10:58:20,871 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 10:58:20,871 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 10:58:20,874 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-06-06 10:58:30,563 INFO sqlalchemy.engine.base.Engine Thread-75 : BEGIN (implicit)
2020-06-06 10:58:30,564 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 10:58:30,564 INFO sqlalchemy.engine.base.Engine Thread-75 : (1, 1)
2020-06-06 10:58:30,565 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 10:58:30,566 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 10:58:30,570 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 10:58:30,570 INFO sqlalchemy.engine.base.Engine Thread-75 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 10:58:30,570 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 10:58:30,571 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 10:58:30,573 INFO sqlalchemy.engine.base.Engine Thread-75 : ROLLBACK
2020-06-06 11:00:47,529 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:00:47,529 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:00:47,531 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:00:47,531 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:00:47,532 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:00:47,532 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:00:47,532 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:00:47,532 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:00:47,533 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:00:47,533 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:00:47,533 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:00:47,533 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:00:47,533 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:00:47,534 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:00:47,541 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:00:47,541 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:00:47,542 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:00:47,542 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:00:47,543 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:00:47,543 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:00:47,543 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:00:47,544 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:00:47,544 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:00:47,546 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:00:47,546 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:00:47,547 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:00:47,548 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:00:47,556 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:00:47,556 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:00:47,557 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:00:47,557 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:00:47,557 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:00:53,569 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 11:00:53,572 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 11:00:53,573 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:00:53,573 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 11:00:53,574 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:00:53,575 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:00:53,579 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:00:53,579 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:00:53,580 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:00:53,580 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:01:14,739 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:01:14,739 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:01:14,740 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:01:14,741 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:01:14,742 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:01:14,742 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:01:14,742 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:01:14,742 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:01:14,743 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:01:14,743 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:01:14,743 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:01:14,743 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:01:14,743 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:01:14,743 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:01:14,744 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:01:14,744 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:01:14,745 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:01:14,745 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:01:14,746 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:01:14,746 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:01:14,746 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:01:14,746 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:01:14,747 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:01:14,753 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-06 11:01:14,753 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:01:14,754 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-06 11:01:14,755 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-06 11:01:14,755 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-06 11:01:14,757 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 11:01:14,757 INFO sqlalchemy.engine.base.Engine Thread-2 : (100,)
2020-06-06 11:01:14,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 11:01:14,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-06 11:01:14,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-06 11:01:14,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-06 11:01:14,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-06 11:01:14,758 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-06 11:01:14,762 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:01:14,762 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:01:14,763 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:01:14,763 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:01:14,838 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 11:01:14,838 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-06-06 11:01:14,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:01:14,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:01:14,842 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 11:01:15,171 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-06 11:01:15,173 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 11:01:15,173 INFO sqlalchemy.engine.base.Engine Thread-26 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 11:01:15,174 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 11:01:15,175 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 11:01:15,175 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 11:01:15,179 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 11:01:15,179 INFO sqlalchemy.engine.base.Engine Thread-26 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 11:01:15,180 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 11:01:15,184 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 11:01:15,184 INFO sqlalchemy.engine.base.Engine Thread-26 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 11:01:15,185 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 11:01:15,186 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-06 11:01:15,209 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-06 11:01:15,211 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 11:01:15,211 INFO sqlalchemy.engine.base.Engine Thread-27 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 11:01:15,213 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 11:01:15,213 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 11:01:15,214 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 11:01:15,218 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 11:01:15,218 INFO sqlalchemy.engine.base.Engine Thread-27 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 11:01:15,219 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 11:01:15,223 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 11:01:15,223 INFO sqlalchemy.engine.base.Engine Thread-27 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 11:01:15,224 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 11:01:15,225 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-06 11:01:16,069 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-06-06 11:01:16,070 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:01:16,070 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-06-06 11:01:16,071 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:01:16,071 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:01:16,077 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:01:16,077 INFO sqlalchemy.engine.base.Engine Thread-29 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:01:16,078 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:01:16,078 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:01:16,078 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:02:42,330 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:02:42,330 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:02:42,331 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:02:42,332 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:02:42,332 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:02:42,332 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:02:42,333 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:02:42,333 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:02:42,334 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:02:42,334 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:02:42,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:02:42,334 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:02:42,335 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:02:42,335 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:02:42,335 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:02:42,336 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:02:42,336 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:02:42,337 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:02:42,337 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:02:42,338 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:02:42,338 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:02:42,338 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:02:42,339 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:02:42,341 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:02:42,341 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:02:42,342 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:02:42,343 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:02:42,352 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:02:42,352 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:02:42,353 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:02:42,353 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:02:42,353 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:03:09,651 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:03:09,651 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:03:09,653 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:03:09,653 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:03:09,654 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:03:09,654 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:03:09,654 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:03:09,654 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:03:09,655 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:03:09,655 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:03:09,655 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:03:09,655 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:03:09,655 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:03:09,655 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:03:09,656 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:03:09,656 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:03:09,657 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:03:09,657 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:03:09,658 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:03:09,658 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:03:09,658 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:03:09,658 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:03:09,659 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:03:09,661 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:03:09,661 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:03:09,662 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:03:09,662 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:03:09,670 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:03:09,670 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:03:09,671 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:03:09,671 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:03:09,672 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:03:09,691 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 11:03:12,758 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 11:03:12,759 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:03:12,759 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 11:03:12,760 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:03:12,760 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:03:12,765 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:03:12,765 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:03:12,766 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:03:12,766 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:03:12,768 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 11:03:17,604 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 11:03:17,605 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:03:17,606 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 11:03:17,606 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:03:17,606 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:03:17,611 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:03:17,611 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:03:17,612 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:03:17,612 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:03:17,614 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 11:03:19,365 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 11:03:19,366 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:03:19,366 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 11:03:19,367 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:03:19,367 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:03:19,372 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:03:19,372 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:03:19,373 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:03:19,373 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:03:19,373 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:03:19,375 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 11:04:09,416 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 11:04:09,417 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:04:09,417 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 11:04:09,418 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:04:09,419 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:04:09,425 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:04:09,425 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:04:09,426 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:04:09,426 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:04:09,427 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:04:09,440 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 11:06:31,787 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 11:06:31,788 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:06:31,788 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 11:06:31,789 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:06:31,790 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:06:31,794 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:06:31,794 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:06:31,795 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:06:31,795 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:06:31,795 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:06:31,808 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 11:06:34,527 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 11:06:34,528 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:06:34,528 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 11:06:34,529 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:06:34,529 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:06:34,533 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:06:34,533 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 18, 0, 0), datetime.datetime(2020, 6, 18, 0, 0), datetime.datetime(2020, 6, 18, 0, 0), datetime.datetime(2020, 6, 18, 0, 0), datetime.datetime(2020, 6, 18, 0, 0), datetime.datetime(2020, 6, 18, 0, 0))
2020-06-06 11:06:34,534 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:06:34,536 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 11:06:40,136 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-06 11:06:40,137 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:06:40,137 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-06 11:06:40,137 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:06:40,138 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:06:40,142 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:06:40,142 INFO sqlalchemy.engine.base.Engine Thread-9 : (datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 0, 0))
2020-06-06 11:06:40,143 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:06:40,145 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-06 11:06:42,527 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-06 11:06:42,528 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:06:42,528 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-06 11:06:42,529 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:06:42,529 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:06:42,533 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:06:42,533 INFO sqlalchemy.engine.base.Engine Thread-10 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:06:42,534 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:06:42,534 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:06:42,536 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-06 11:07:10,632 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-06 11:07:10,633 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:07:10,633 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-06 11:07:10,633 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:07:10,634 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:07:10,638 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:07:10,638 INFO sqlalchemy.engine.base.Engine Thread-11 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:07:10,639 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:07:10,639 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:07:10,639 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:07:10,641 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-06 11:07:59,324 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-06 11:07:59,325 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:07:59,325 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-06 11:07:59,326 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:07:59,326 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:07:59,330 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:07:59,330 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:07:59,331 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:07:59,331 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:07:59,331 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:07:59,343 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-06 11:11:44,884 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:11:44,884 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:11:44,886 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:11:44,887 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:11:44,887 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:11:44,887 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:11:44,888 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:11:44,888 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:11:44,889 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:11:44,889 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:11:44,889 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:11:44,889 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:11:44,890 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:11:44,890 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:11:44,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:11:44,891 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:11:44,892 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:11:44,892 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:11:44,893 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:11:44,893 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:11:44,894 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:11:44,894 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:11:44,895 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:11:44,897 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:11:44,897 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:11:44,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:11:44,899 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:11:44,908 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:11:44,908 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:11:44,909 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:11:44,909 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:11:44,909 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:11:44,930 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 11:12:06,879 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 11:12:06,880 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:12:06,880 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 11:12:06,881 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:12:06,881 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:12:06,885 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:12:06,886 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:12:06,886 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:12:06,886 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:12:06,886 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:12:06,899 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 11:12:14,181 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:12:14,181 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:12:14,182 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:12:14,183 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:12:14,183 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:12:14,183 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:12:14,184 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:12:14,184 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:12:14,184 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:12:14,184 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:12:14,184 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:12:14,185 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:12:14,185 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:12:14,185 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:12:14,186 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:12:14,186 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:12:14,187 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:12:14,187 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:12:14,187 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:12:14,187 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:12:14,188 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:12:14,188 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:12:14,189 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:12:14,191 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:12:14,191 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:12:14,192 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:12:14,192 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:12:14,200 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:12:14,200 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:12:14,201 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:12:14,201 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:12:14,201 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:12:14,221 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 11:13:34,187 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 11:13:34,188 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:13:34,188 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 11:13:34,189 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:13:34,190 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:13:34,194 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:13:34,194 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:13:34,195 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:13:34,195 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:13:34,195 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:13:34,211 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 11:16:32,346 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 11:16:32,347 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:16:32,348 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 11:16:32,350 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:16:32,350 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:16:32,355 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:16:32,355 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:16:32,356 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:16:32,357 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:16:32,357 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:16:32,372 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 11:18:23,793 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 11:18:23,795 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:18:23,795 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 11:18:23,795 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:18:23,796 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:18:23,800 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:18:23,801 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:18:23,801 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:18:23,802 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:18:23,802 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:18:23,815 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 11:18:36,376 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 11:18:36,380 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:18:36,380 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 11:18:36,381 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:18:36,381 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:18:36,385 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:18:36,385 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:18:36,386 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:18:36,386 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:18:36,386 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:18:36,400 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 11:18:46,720 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 11:18:46,721 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:18:46,721 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 11:18:46,721 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:18:46,721 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:18:46,726 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:18:46,726 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:18:46,726 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:18:46,727 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:18:46,740 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 11:19:21,304 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 11:19:21,306 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:19:21,306 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 11:19:21,306 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:19:21,307 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:19:21,311 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:19:21,311 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:19:21,312 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:19:21,312 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:19:21,312 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:19:21,314 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 11:19:41,775 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:19:41,775 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:19:41,777 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:19:41,777 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:19:41,778 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:19:41,778 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:19:41,779 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:19:41,779 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:19:41,779 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:19:41,779 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:19:41,779 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:19:41,779 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:19:41,780 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:19:41,780 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:19:41,781 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:19:41,781 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:19:41,782 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:19:41,782 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:19:41,782 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:19:41,782 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:19:41,783 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:19:41,783 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:19:41,784 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:19:41,786 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:19:41,786 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:19:41,787 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:19:41,787 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:19:41,796 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:19:41,796 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:19:41,797 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:19:41,797 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:19:41,797 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:19:41,817 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 11:19:46,770 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 11:19:46,771 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:19:46,771 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 11:19:46,771 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:19:46,772 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:19:46,776 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:19:46,776 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:19:46,776 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:19:46,777 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:19:46,778 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 11:19:53,081 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 11:19:53,081 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:19:53,082 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 11:19:53,082 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:19:53,083 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:19:53,086 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:19:53,086 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 11:19:53,087 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:19:53,087 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:19:53,089 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 11:19:58,601 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 11:19:58,602 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:19:58,602 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 11:19:58,603 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:19:58,603 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:19:58,607 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:19:58,607 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:19:58,608 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:19:58,608 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:19:58,609 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:19:58,611 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 11:20:05,889 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 11:20:05,890 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:20:05,890 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 11:20:05,891 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:20:05,891 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:20:05,897 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:20:05,897 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 25, 0, 0), datetime.datetime(2020, 6, 25, 0, 0), datetime.datetime(2020, 6, 25, 0, 0), datetime.datetime(2020, 6, 25, 0, 0), datetime.datetime(2020, 6, 25, 0, 0), datetime.datetime(2020, 6, 25, 0, 0))
2020-06-06 11:20:05,897 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:20:05,899 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 11:20:38,483 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:20:38,483 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:20:38,484 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:20:38,485 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:20:38,485 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:20:38,485 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:20:38,486 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:20:38,486 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:20:38,487 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:20:38,487 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:20:38,487 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:20:38,487 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:20:38,487 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:20:38,487 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:20:38,488 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:20:38,488 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:20:38,489 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:20:38,489 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:20:38,490 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:20:38,490 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:20:38,491 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:20:38,491 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:20:38,492 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:20:38,494 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:20:38,494 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:20:38,495 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:20:38,495 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:20:38,504 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:20:38,505 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:20:38,505 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:20:38,506 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:20:38,506 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:20:38,526 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 11:21:16,799 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 11:21:16,800 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:21:16,800 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 11:21:16,801 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:21:16,801 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:21:16,805 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:21:16,805 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:21:16,806 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:21:16,806 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:21:16,806 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:21:16,819 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 11:21:22,929 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 11:21:22,930 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:21:22,930 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 11:21:22,930 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:21:22,931 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:21:22,934 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:21:22,935 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:21:22,935 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:21:22,935 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:21:22,936 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:21:22,948 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 11:21:34,740 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 11:21:34,742 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:21:34,742 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 11:21:34,743 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:21:34,743 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:21:34,747 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:21:34,747 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:21:34,748 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:21:34,748 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:21:34,760 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 11:21:44,712 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 11:21:44,715 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:21:44,715 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 11:21:44,715 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:21:44,716 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:21:44,720 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:21:44,720 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:21:44,721 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:21:44,721 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:21:44,721 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:21:44,724 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 11:22:42,302 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 11:22:42,302 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:22:42,303 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:22:42,303 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 11:22:42,304 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 11:22:42,304 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:22:42,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 11:22:42,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 11:22:42,305 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 11:22:42,305 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:22:42,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 11:22:42,306 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 11:22:42,306 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 11:22:42,306 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:22:42,306 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 11:22:42,307 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 11:22:42,307 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 11:22:42,307 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:22:42,308 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 11:22:42,308 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:22:42,309 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 11:22:42,309 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 11:22:42,309 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 11:22:42,311 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:22:42,312 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 11:22:42,312 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:22:42,313 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:22:42,321 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:22:42,321 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:22:42,321 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:22:42,322 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:22:42,322 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:22:42,340 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 11:22:54,668 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 11:22:54,669 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:22:54,669 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 11:22:54,669 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:22:54,670 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:22:54,674 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:22:54,674 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:22:54,674 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:22:54,675 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:22:54,675 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:22:54,677 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 11:28:24,597 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 11:28:24,599 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:28:24,599 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 11:28:24,601 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:28:24,602 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:28:24,606 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:28:24,607 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:28:24,608 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:28:24,608 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:28:24,608 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:28:24,612 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 11:31:30,238 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 11:31:30,240 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:31:30,240 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 11:31:30,242 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:31:30,242 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:31:30,247 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:31:30,247 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:31:30,248 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:31:30,249 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:31:30,249 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:31:30,264 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 11:31:32,593 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 11:31:32,594 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:31:32,594 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 11:31:32,595 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:31:32,595 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:31:32,601 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:31:32,601 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 11:31:32,601 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:31:32,602 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:31:32,604 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 11:31:35,305 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 11:31:35,306 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:31:35,306 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 11:31:35,307 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:31:35,307 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:31:35,311 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:31:35,311 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:31:35,311 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:31:35,311 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:31:35,311 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:31:35,313 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 11:31:41,585 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-06 11:31:41,586 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:31:41,586 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-06 11:31:41,587 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:31:41,587 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:31:41,591 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:31:41,591 INFO sqlalchemy.engine.base.Engine Thread-9 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:31:41,592 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:31:41,592 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:31:41,594 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-06 11:31:45,147 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-06 11:31:45,149 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:31:45,149 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-06 11:31:45,150 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:31:45,150 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:31:45,154 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:31:45,154 INFO sqlalchemy.engine.base.Engine Thread-10 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 11:31:45,155 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:31:45,155 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:31:45,157 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-06 11:31:49,088 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-06 11:31:49,088 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:31:49,089 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-06 11:31:49,089 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:31:49,090 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:31:49,093 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:31:49,094 INFO sqlalchemy.engine.base.Engine Thread-11 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:31:49,094 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:31:49,094 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:31:49,094 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:31:49,096 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-06 11:33:22,682 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-06 11:33:22,683 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:33:22,683 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-06 11:33:22,684 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:33:22,685 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:33:22,689 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:33:22,689 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 11:33:22,690 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:33:22,690 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:33:22,692 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-06 11:33:25,251 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-06 11:33:25,252 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:33:25,252 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-06 11:33:25,253 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:33:25,253 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:33:25,258 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:33:25,258 INFO sqlalchemy.engine.base.Engine Thread-13 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:33:25,258 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:33:25,258 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:33:25,259 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:33:25,260 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-06 11:39:50,027 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-06 11:39:50,029 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:39:50,029 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-06 11:39:50,031 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:39:50,031 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:39:50,036 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:39:50,036 INFO sqlalchemy.engine.base.Engine Thread-14 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 11:39:50,037 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:39:50,038 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:39:50,054 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-06 11:39:56,488 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-06 11:39:56,489 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:39:56,489 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-06 11:39:56,490 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:39:56,490 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:39:56,495 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:39:56,495 INFO sqlalchemy.engine.base.Engine Thread-15 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:39:56,496 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:39:56,496 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:39:56,496 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:39:56,498 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-06 11:40:00,135 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-06 11:40:00,136 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:40:00,136 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-06 11:40:00,137 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:40:00,137 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:40:00,141 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:40:00,142 INFO sqlalchemy.engine.base.Engine Thread-16 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 11:40:00,142 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:40:00,142 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:40:00,144 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-06 11:40:02,655 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-06 11:40:02,656 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:40:02,656 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-06 11:40:02,658 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:40:02,658 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:40:02,662 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:40:02,662 INFO sqlalchemy.engine.base.Engine Thread-17 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:40:02,663 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:40:02,663 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:40:02,663 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:40:02,665 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-06 11:40:23,024 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-06 11:40:23,025 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:40:23,025 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-06 11:40:23,025 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:40:23,026 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:40:23,030 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:40:23,030 INFO sqlalchemy.engine.base.Engine Thread-18 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:40:23,031 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:40:23,031 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:40:23,031 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:40:23,045 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-06 11:40:26,913 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-06 11:40:26,914 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:40:26,914 INFO sqlalchemy.engine.base.Engine Thread-19 : (1, 1)
2020-06-06 11:40:26,915 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:40:26,915 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:40:26,919 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:40:26,919 INFO sqlalchemy.engine.base.Engine Thread-19 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 11:40:26,920 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:40:26,920 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:40:26,922 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-06-06 11:43:27,989 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-06 11:43:27,991 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:43:27,991 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-06 11:43:27,992 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:43:27,993 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:43:27,997 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:43:27,997 INFO sqlalchemy.engine.base.Engine Thread-20 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 11:43:27,998 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:43:27,998 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:43:27,998 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 11:43:28,002 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-06 11:43:34,211 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-06 11:43:34,212 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:43:34,212 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-06 11:43:34,212 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:43:34,213 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:43:34,217 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:43:34,217 INFO sqlalchemy.engine.base.Engine Thread-21 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 11:43:34,218 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:43:34,218 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:43:34,220 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-06 11:43:38,529 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-06 11:43:38,530 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 11:43:38,530 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-06 11:43:38,531 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 11:43:38,531 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 11:43:38,535 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 11:43:38,535 INFO sqlalchemy.engine.base.Engine Thread-22 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 11:43:38,536 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 11:43:38,536 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 11:43:38,538 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-06 14:38:51,300 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 14:38:51,300 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:38:51,302 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:38:51,302 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 14:38:51,303 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 14:38:51,303 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:38:51,303 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:38:51,304 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 14:38:51,304 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 14:38:51,304 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:38:51,304 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 14:38:51,304 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 14:38:51,305 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 14:38:51,305 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:38:51,306 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 14:38:51,306 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 14:38:51,307 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 14:38:51,307 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:38:51,307 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 14:38:51,307 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:38:51,308 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 14:38:51,308 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:38:51,309 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 14:38:51,311 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:38:51,311 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 14:38:51,312 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:38:51,312 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:38:51,321 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:38:51,322 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:38:51,322 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:38:51,323 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:38:51,323 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:38:54,333 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 14:38:54,336 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 14:38:54,337 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:38:54,337 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 14:38:54,337 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:38:54,338 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:38:54,342 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:38:54,342 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:38:54,343 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:38:54,343 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:38:54,343 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:41:41,645 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 14:41:41,645 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:41:41,646 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:41:41,647 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 14:41:41,648 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 14:41:41,648 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:41:41,648 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:41:41,648 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 14:41:41,649 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 14:41:41,649 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:41:41,649 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 14:41:41,649 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 14:41:41,650 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 14:41:41,650 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:41:41,651 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 14:41:41,651 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 14:41:41,651 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 14:41:41,652 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:41:41,652 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 14:41:41,652 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:41:41,653 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 14:41:41,653 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:41:41,654 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 14:41:41,657 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:41:41,657 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 14:41:41,658 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:41:41,658 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:41:41,667 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:41:41,667 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:41:41,668 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:41:41,668 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:41:41,668 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:41:41,690 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 14:41:44,403 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 14:41:44,404 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:41:44,405 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 14:41:44,405 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:41:44,405 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:41:44,410 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:41:44,410 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 14:41:44,411 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:41:44,411 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:41:44,413 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 14:41:48,729 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 14:41:48,730 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:41:48,731 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 14:41:48,731 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:41:48,731 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:41:48,736 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:41:48,736 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:41:48,737 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:41:48,737 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:41:48,737 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:41:48,739 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 14:43:31,631 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 14:43:31,633 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:43:31,633 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 14:43:31,634 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:43:31,634 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:43:31,638 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:43:31,638 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:43:31,638 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:43:31,639 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:43:31,639 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:43:31,641 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 14:44:04,093 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 14:44:04,093 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:44:04,095 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:44:04,095 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 14:44:04,096 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 14:44:04,096 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:44:04,097 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:44:04,097 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 14:44:04,097 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 14:44:04,097 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:44:04,098 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 14:44:04,099 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 14:44:04,099 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 14:44:04,099 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:44:04,100 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 14:44:04,100 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 14:44:04,101 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 14:44:04,101 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:44:04,102 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 14:44:04,102 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:44:04,103 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 14:44:04,103 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:44:04,104 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 14:44:04,107 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:44:04,107 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 14:44:04,108 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:44:04,108 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:44:04,118 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:44:04,119 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:44:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:44:04,120 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:44:04,120 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:44:04,142 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 14:46:55,408 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 14:46:55,409 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:46:55,410 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:46:55,410 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 14:46:55,411 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 14:46:55,411 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:46:55,411 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:46:55,412 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 14:46:55,412 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 14:46:55,412 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:46:55,412 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 14:46:55,412 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 14:46:55,413 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 14:46:55,413 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:46:55,413 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 14:46:55,413 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 14:46:55,414 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 14:46:55,414 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:46:55,415 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 14:46:55,415 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:46:55,416 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 14:46:55,416 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:46:55,416 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 14:46:55,419 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:46:55,419 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 14:46:55,420 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:46:55,420 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:46:55,430 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:46:55,430 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:46:55,431 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:46:55,431 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:46:55,431 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:46:58,508 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 14:46:58,511 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 14:46:58,512 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:46:58,512 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 14:46:58,513 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:46:58,513 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:46:58,517 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:46:58,517 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 14:46:58,518 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:46:58,518 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:47:01,676 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 14:47:01,678 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 14:47:01,680 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:47:01,680 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 14:47:01,681 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:47:01,681 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:47:01,685 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:47:01,686 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 14:47:01,686 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:47:01,686 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:52:12,873 INFO sqlalchemy.engine.base.Engine Thread-4 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 14:52:12,873 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-06 14:52:12,875 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('Variable_name', 'Value')
2020-06-06 14:52:12,875 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('sql_mode', '')
2020-06-06 14:52:12,876 INFO sqlalchemy.engine.base.Engine Thread-4 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 14:52:12,876 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-06 14:52:12,877 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('Variable_name', 'Value')
2020-06-06 14:52:12,877 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('lower_case_table_names', '0')
2020-06-06 14:52:12,877 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT DATABASE()
2020-06-06 14:52:12,877 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-06 14:52:12,877 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('DATABASE()',)
2020-06-06 14:52:12,878 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('fmapp',)
2020-06-06 14:52:12,878 INFO sqlalchemy.engine.base.Engine Thread-4 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 14:52:12,878 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-06 14:52:12,879 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 14:52:12,879 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 14:52:12,880 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 14:52:12,880 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-06 14:52:12,880 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 14:52:12,881 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-06 14:52:12,881 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 14:52:12,881 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-06-06 14:52:12,882 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 14:52:12,884 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:52:12,884 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 14:52:12,885 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:12,885 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:12,893 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:52:12,893 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:52:12,894 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:52:12,894 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:52:12,895 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:52:12,899 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 14:52:15,331 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 14:52:15,332 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:52:15,332 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 14:52:15,332 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:15,333 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:15,337 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:52:15,337 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 14:52:15,338 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:52:15,338 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:52:15,340 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 14:52:32,748 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 14:52:32,750 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:52:32,750 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 14:52:32,751 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:32,751 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:32,756 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:52:32,756 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:52:32,757 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:52:32,757 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:52:32,757 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:52:32,759 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 14:52:34,926 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 14:52:34,927 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:52:34,927 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 14:52:34,927 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:34,928 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:34,932 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:52:34,933 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 14:52:34,933 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:52:34,934 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:52:34,936 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 14:52:41,844 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 14:52:41,844 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:52:41,845 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 14:52:41,847 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:41,847 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:41,850 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 14:52:41,850 INFO sqlalchemy.engine.base.Engine Thread-8 : ('philip', 1, 1)
2020-06-06 14:52:41,850 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:41,850 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:41,859 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 14:52:41,859 INFO sqlalchemy.engine.base.Engine Thread-8 : ()
2020-06-06 14:52:41,860 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 14:52:41,860 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 14:52:41,860 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 14:52:41,860 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 14:52:41,860 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 14:52:41,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 14:52:41,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 14:52:41,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 14:52:41,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (20, 'HAP Locked', 'GBR', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-06 14:52:41,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 14:52:41,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 14:52:41,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 14:52:41,933 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 14:52:41,933 INFO sqlalchemy.engine.base.Engine Thread-8 : ('philip', 1, 1)
2020-06-06 14:52:41,934 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:41,934 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:41,938 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 14:52:45,698 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-06 14:52:45,699 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:52:45,699 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-06 14:52:45,700 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:45,700 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:45,702 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 14:52:45,703 INFO sqlalchemy.engine.base.Engine Thread-20 : ('philip', 1, 1)
2020-06-06 14:52:45,703 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:45,704 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:45,706 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 14:52:45,706 INFO sqlalchemy.engine.base.Engine Thread-20 : ('19', 1)
2020-06-06 14:52:45,707 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 14:52:45,707 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (19, 'Change Freeze RED', 83, '', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'GBR,IND', 129, None, 106)
2020-06-06 14:52:45,710 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 14:52:45,711 INFO sqlalchemy.engine.base.Engine Thread-20 : (82,)
2020-06-06 14:52:45,711 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:52:45,711 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 14:52:45,711 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 14:52:45,711 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 14:52:45,713 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 14:52:45,713 INFO sqlalchemy.engine.base.Engine Thread-20 : (1,)
2020-06-06 14:52:45,713 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:52:45,713 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 14:52:45,714 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 14:52:45,716 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 14:52:45,716 INFO sqlalchemy.engine.base.Engine Thread-20 : ()
2020-06-06 14:52:45,716 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 14:52:45,717 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 14:52:45,717 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 14:52:45,718 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 14:52:45,718 INFO sqlalchemy.engine.base.Engine Thread-20 : (127,)
2020-06-06 14:52:45,719 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:52:45,719 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 14:52:45,719 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 14:52:45,720 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 14:52:45,720 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 14:52:45,721 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 14:52:45,721 INFO sqlalchemy.engine.base.Engine Thread-20 : (105,)
2020-06-06 14:52:45,722 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:52:45,722 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 14:52:45,722 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 14:52:45,757 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 14:52:45,757 INFO sqlalchemy.engine.base.Engine Thread-20 : ('philip', 1, 1)
2020-06-06 14:52:45,758 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:45,758 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:45,762 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-06 14:52:59,178 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-06-06 14:52:59,179 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:52:59,179 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-06-06 14:52:59,179 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:59,179 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:59,182 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 14:52:59,182 INFO sqlalchemy.engine.base.Engine Thread-31 : ('philip', 1, 1)
2020-06-06 14:52:59,183 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:59,183 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:59,184 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 14:52:59,184 INFO sqlalchemy.engine.base.Engine Thread-31 : ('19', 1)
2020-06-06 14:52:59,185 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 14:52:59,185 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (19, 'Change Freeze RED', 83, '', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'GBR,IND', 129, None, 106)
2020-06-06 14:52:59,188 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 14:52:59,188 INFO sqlalchemy.engine.base.Engine Thread-31 : (82,)
2020-06-06 14:52:59,189 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:52:59,189 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 14:52:59,189 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 14:52:59,189 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 14:52:59,190 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 14:52:59,190 INFO sqlalchemy.engine.base.Engine Thread-31 : (1,)
2020-06-06 14:52:59,191 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:52:59,191 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 14:52:59,191 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 14:52:59,192 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 14:52:59,192 INFO sqlalchemy.engine.base.Engine Thread-31 : ()
2020-06-06 14:52:59,193 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 14:52:59,193 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 14:52:59,193 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 14:52:59,194 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 14:52:59,194 INFO sqlalchemy.engine.base.Engine Thread-31 : (127,)
2020-06-06 14:52:59,194 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:52:59,195 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 14:52:59,195 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 14:52:59,195 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 14:52:59,195 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 14:52:59,196 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 14:52:59,196 INFO sqlalchemy.engine.base.Engine Thread-31 : (105,)
2020-06-06 14:52:59,197 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:52:59,197 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 14:52:59,197 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 14:52:59,201 INFO sqlalchemy.engine.base.Engine Thread-31 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-06 14:52:59,201 INFO sqlalchemy.engine.base.Engine Thread-31 : ('19', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 19)
2020-06-06 14:52:59,202 INFO sqlalchemy.engine.base.Engine Thread-31 : COMMIT
2020-06-06 14:52:59,243 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-06-06 14:52:59,244 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:52:59,244 INFO sqlalchemy.engine.base.Engine Thread-32 : (1, 1)
2020-06-06 14:52:59,244 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:59,245 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:59,247 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 14:52:59,247 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-06 14:52:59,247 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:59,248 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:59,255 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 14:52:59,255 INFO sqlalchemy.engine.base.Engine Thread-32 : ()
2020-06-06 14:52:59,256 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 14:52:59,256 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (20, 'HAP Locked', 'GBR', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 14:52:59,257 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 14:52:59,261 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 14:52:59,261 INFO sqlalchemy.engine.base.Engine Thread-32 : ('philip', 1, 1)
2020-06-06 14:52:59,262 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:52:59,262 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:52:59,266 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-06-06 14:53:01,141 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-06-06 14:53:01,147 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-06 14:53:01,147 INFO sqlalchemy.engine.base.Engine Thread-42 : ()
2020-06-06 14:53:01,148 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-06 14:53:01,149 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-06 14:53:01,149 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-06 14:53:01,150 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 14:53:01,150 INFO sqlalchemy.engine.base.Engine Thread-42 : (100,)
2020-06-06 14:53:01,151 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 14:53:01,151 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-06 14:53:01,151 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-06 14:53:01,151 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-06 14:53:01,151 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-06 14:53:01,151 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-06 14:53:01,153 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:53:01,153 INFO sqlalchemy.engine.base.Engine Thread-42 : (1, 1)
2020-06-06 14:53:01,154 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:53:01,154 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:53:01,167 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 14:53:01,168 INFO sqlalchemy.engine.base.Engine Thread-42 : ('philip', 1, 1)
2020-06-06 14:53:01,168 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:53:01,168 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:53:01,171 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-06-06 14:53:01,462 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-06-06 14:53:01,464 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 14:53:01,464 INFO sqlalchemy.engine.base.Engine Thread-52 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 14:53:01,465 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 14:53:01,465 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 14:53:01,465 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 14:53:01,465 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 14:53:01,470 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 14:53:01,470 INFO sqlalchemy.engine.base.Engine Thread-52 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 14:53:01,471 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 14:53:01,475 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 14:53:01,475 INFO sqlalchemy.engine.base.Engine Thread-52 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 14:53:01,476 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 14:53:01,477 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-06-06 14:53:01,502 INFO sqlalchemy.engine.base.Engine Thread-53 : BEGIN (implicit)
2020-06-06 14:53:01,504 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 14:53:01,504 INFO sqlalchemy.engine.base.Engine Thread-53 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 14:53:01,505 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 14:53:01,505 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 14:53:01,505 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 14:53:01,505 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 14:53:01,509 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 14:53:01,509 INFO sqlalchemy.engine.base.Engine Thread-53 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 14:53:01,510 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 14:53:01,514 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 14:53:01,514 INFO sqlalchemy.engine.base.Engine Thread-53 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 14:53:01,515 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 14:53:01,515 INFO sqlalchemy.engine.base.Engine Thread-53 : ROLLBACK
2020-06-06 14:53:02,852 INFO sqlalchemy.engine.base.Engine Thread-54 : BEGIN (implicit)
2020-06-06 14:53:02,853 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:53:02,853 INFO sqlalchemy.engine.base.Engine Thread-54 : (1, 1)
2020-06-06 14:53:02,854 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:53:02,854 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:53:02,859 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:53:02,859 INFO sqlalchemy.engine.base.Engine Thread-54 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:53:02,860 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:53:02,860 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:53:02,860 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 14:53:02,860 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:53:02,862 INFO sqlalchemy.engine.base.Engine Thread-54 : ROLLBACK
2020-06-06 14:53:05,321 INFO sqlalchemy.engine.base.Engine Thread-55 : BEGIN (implicit)
2020-06-06 14:53:05,322 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:53:05,322 INFO sqlalchemy.engine.base.Engine Thread-55 : (1, 1)
2020-06-06 14:53:05,323 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:53:05,323 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:53:05,327 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:53:05,327 INFO sqlalchemy.engine.base.Engine Thread-55 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 14:53:05,327 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:53:05,328 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:53:05,329 INFO sqlalchemy.engine.base.Engine Thread-55 : ROLLBACK
2020-06-06 14:54:12,225 INFO sqlalchemy.engine.base.Engine Thread-56 : BEGIN (implicit)
2020-06-06 14:54:12,227 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:54:12,227 INFO sqlalchemy.engine.base.Engine Thread-56 : (1, 1)
2020-06-06 14:54:12,228 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:54:12,228 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:54:12,233 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:54:12,233 INFO sqlalchemy.engine.base.Engine Thread-56 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:54:12,234 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:54:12,234 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:54:12,234 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 14:54:12,234 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:54:12,239 INFO sqlalchemy.engine.base.Engine Thread-56 : ROLLBACK
2020-06-06 14:54:30,303 INFO sqlalchemy.engine.base.Engine Thread-57 : BEGIN (implicit)
2020-06-06 14:54:30,304 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:54:30,304 INFO sqlalchemy.engine.base.Engine Thread-57 : (1, 1)
2020-06-06 14:54:30,305 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:54:30,305 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:54:30,309 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:54:30,309 INFO sqlalchemy.engine.base.Engine Thread-57 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:54:30,310 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:54:30,310 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:54:30,310 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 14:54:30,310 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:54:30,314 INFO sqlalchemy.engine.base.Engine Thread-57 : ROLLBACK
2020-06-06 14:55:23,744 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-06 14:55:23,746 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:55:23,746 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-06-06 14:55:23,748 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:55:23,748 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:55:23,753 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:55:23,753 INFO sqlalchemy.engine.base.Engine Thread-58 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:55:23,753 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:55:23,754 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:55:23,754 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 14:55:23,754 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:55:23,761 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-06 14:56:43,949 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 14:56:43,949 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:56:43,951 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:56:43,951 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 14:56:43,952 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 14:56:43,952 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:56:43,952 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:56:43,952 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 14:56:43,953 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 14:56:43,953 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:56:43,953 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 14:56:43,953 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 14:56:43,954 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 14:56:43,954 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:56:43,955 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 14:56:43,955 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 14:56:43,956 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 14:56:43,956 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:56:43,957 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 14:56:43,957 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:56:43,957 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 14:56:43,957 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:56:43,958 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 14:56:43,960 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:56:43,960 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 14:56:43,961 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:56:43,961 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:56:43,969 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:56:43,969 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:56:43,970 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:56:43,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:56:43,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 14:56:43,971 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:56:43,984 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 14:56:48,805 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 14:56:48,806 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:56:48,806 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 14:56:48,807 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:56:48,807 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:56:48,811 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:56:48,811 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 14:56:48,812 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:56:48,812 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:56:48,814 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 14:56:51,273 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 14:56:51,275 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:56:51,275 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 14:56:51,275 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:56:51,276 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:56:51,280 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:56:51,280 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:56:51,281 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:56:51,281 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:56:51,281 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 14:56:51,282 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:56:51,284 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 14:57:53,676 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 14:57:53,676 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:57:53,678 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:57:53,678 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 14:57:53,679 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 14:57:53,679 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:57:53,679 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 14:57:53,680 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 14:57:53,680 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 14:57:53,680 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:57:53,680 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 14:57:53,680 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 14:57:53,681 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 14:57:53,681 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:57:53,681 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 14:57:53,682 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 14:57:53,682 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 14:57:53,682 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:57:53,683 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 14:57:53,683 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:57:53,684 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 14:57:53,684 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 14:57:53,684 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 14:57:53,687 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:57:53,687 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 14:57:53,688 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:57:53,688 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:57:53,697 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:57:53,697 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:57:53,698 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:57:53,698 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:57:53,699 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 14:57:53,699 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:57:53,714 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 14:57:55,862 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 14:57:55,863 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:57:55,863 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 14:57:55,864 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:57:55,864 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:57:55,869 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:57:55,870 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 14:57:55,870 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:57:55,871 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:57:55,873 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 14:58:56,292 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 14:58:56,293 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:58:56,293 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 14:58:56,294 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:58:56,294 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:58:56,299 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:58:56,299 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 14:58:56,300 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:58:56,300 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:58:56,301 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 14:58:56,301 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 14:58:56,309 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 14:58:59,090 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 14:58:59,092 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 14:58:59,092 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 14:58:59,093 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 14:58:59,093 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 14:58:59,097 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 14:58:59,098 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 14:58:59,098 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 14:58:59,099 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 14:58:59,100 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 15:00:20,519 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 15:00:20,520 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:00:20,520 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 15:00:20,521 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:00:20,521 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:00:20,527 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:00:20,527 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:00:20,528 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:00:20,528 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:00:20,528 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 15:00:20,528 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:00:20,538 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 15:00:24,427 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 15:00:24,428 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:00:24,428 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 15:00:24,429 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:00:24,429 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:00:24,433 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:00:24,433 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 15:00:24,434 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:00:24,434 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:00:24,436 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 15:00:26,105 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 15:00:26,106 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:00:26,106 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 15:00:26,107 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:00:26,107 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:00:26,112 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:00:26,112 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:00:26,113 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:00:26,113 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:00:26,113 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 15:00:26,113 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:00:26,115 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 15:00:41,442 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-06 15:00:41,443 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:00:41,443 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-06 15:00:41,444 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:00:41,444 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:00:41,449 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:00:41,449 INFO sqlalchemy.engine.base.Engine Thread-9 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:00:41,450 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:00:41,450 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:00:41,450 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 15:00:41,450 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:00:41,462 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-06 15:01:10,794 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-06 15:01:10,796 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:01:10,796 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-06 15:01:10,796 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:01:10,797 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:01:10,801 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:01:10,801 INFO sqlalchemy.engine.base.Engine Thread-10 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:01:10,802 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:01:10,802 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:01:10,802 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 15:01:10,802 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:01:10,804 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-06 15:01:22,805 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-06 15:01:22,807 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:01:22,807 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-06 15:01:22,807 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:01:22,808 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:01:22,812 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:01:22,812 INFO sqlalchemy.engine.base.Engine Thread-11 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:01:22,813 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:01:22,813 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:01:22,813 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 15:01:22,813 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:01:22,815 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-06 15:03:31,054 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-06 15:03:31,061 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-06 15:03:31,062 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-06-06 15:03:31,063 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-06 15:03:31,063 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-06 15:03:31,064 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-06 15:03:31,066 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:03:31,066 INFO sqlalchemy.engine.base.Engine Thread-12 : (100,)
2020-06-06 15:03:31,067 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:03:31,067 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-06 15:03:31,067 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-06 15:03:31,067 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-06 15:03:31,067 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-06 15:03:31,067 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-06 15:03:31,069 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:03:31,069 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-06 15:03:31,070 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:03:31,070 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:03:31,139 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:03:31,139 INFO sqlalchemy.engine.base.Engine Thread-12 : ('philip', 1, 1)
2020-06-06 15:03:31,140 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:03:31,140 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:03:31,143 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-06 15:03:31,440 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-06 15:03:31,442 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:03:31,442 INFO sqlalchemy.engine.base.Engine Thread-22 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:03:31,443 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:03:31,444 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:03:31,444 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:03:31,444 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 15:03:31,448 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:03:31,449 INFO sqlalchemy.engine.base.Engine Thread-22 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:03:31,449 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:03:31,454 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:03:31,454 INFO sqlalchemy.engine.base.Engine Thread-22 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:03:31,455 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:03:31,455 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-06 15:03:31,483 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-06 15:03:31,484 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:03:31,485 INFO sqlalchemy.engine.base.Engine Thread-23 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:03:31,487 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:03:31,487 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:03:31,487 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:03:31,487 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'HAP Locked', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 15:03:31,492 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:03:31,492 INFO sqlalchemy.engine.base.Engine Thread-23 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:03:31,493 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:03:31,497 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:03:31,498 INFO sqlalchemy.engine.base.Engine Thread-23 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:03:31,498 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:03:31,499 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-06 15:03:32,282 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-06-06 15:03:32,283 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:03:32,283 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-06-06 15:03:32,283 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:03:32,284 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:03:32,288 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:03:32,288 INFO sqlalchemy.engine.base.Engine Thread-25 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:03:32,289 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:03:32,289 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:03:32,290 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 129)
2020-06-06 15:03:32,290 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row ('HAP Locked', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:03:32,300 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-06-06 15:05:27,680 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-06 15:05:27,681 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:05:27,681 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-06 15:05:27,683 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:05:27,684 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:05:27,686 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:05:27,686 INFO sqlalchemy.engine.base.Engine Thread-27 : ('philip', 1, 1)
2020-06-06 15:05:27,687 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:05:27,687 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:05:27,696 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 15:05:27,696 INFO sqlalchemy.engine.base.Engine Thread-27 : ()
2020-06-06 15:05:27,697 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 15:05:27,697 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:05:27,697 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:05:27,697 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:05:27,697 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:05:27,697 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:05:27,698 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:05:27,698 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:05:27,698 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (20, 'HAP Locked', 'GBR', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-06 15:05:27,698 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:05:27,698 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:05:27,698 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:05:27,717 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:05:27,717 INFO sqlalchemy.engine.base.Engine Thread-27 : ('philip', 1, 1)
2020-06-06 15:05:27,718 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:05:27,718 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:05:27,722 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-06 15:05:44,087 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-06-06 15:05:44,089 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:05:44,089 INFO sqlalchemy.engine.base.Engine Thread-37 : (1, 1)
2020-06-06 15:05:44,090 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:05:44,090 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:05:44,092 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:05:44,093 INFO sqlalchemy.engine.base.Engine Thread-37 : ('philip', 1, 1)
2020-06-06 15:05:44,093 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:05:44,094 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:05:44,097 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 15:05:44,097 INFO sqlalchemy.engine.base.Engine Thread-37 : ('20', 1)
2020-06-06 15:05:44,097 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 15:05:44,098 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (20, 'HAP Locked', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR', 130, '', 107)
2020-06-06 15:05:44,100 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:05:44,100 INFO sqlalchemy.engine.base.Engine Thread-37 : (82,)
2020-06-06 15:05:44,101 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:05:44,101 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 15:05:44,101 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 15:05:44,101 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 15:05:44,103 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 15:05:44,103 INFO sqlalchemy.engine.base.Engine Thread-37 : (1,)
2020-06-06 15:05:44,103 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:05:44,104 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 15:05:44,104 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 15:05:44,106 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 15:05:44,106 INFO sqlalchemy.engine.base.Engine Thread-37 : ()
2020-06-06 15:05:44,107 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 15:05:44,107 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 15:05:44,107 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 15:05:44,108 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:05:44,108 INFO sqlalchemy.engine.base.Engine Thread-37 : (127,)
2020-06-06 15:05:44,109 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:05:44,109 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:05:44,109 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:05:44,109 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:05:44,109 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 15:05:44,111 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:05:44,111 INFO sqlalchemy.engine.base.Engine Thread-37 : (105,)
2020-06-06 15:05:44,112 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:05:44,112 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 15:05:44,112 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 15:05:44,150 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:05:44,150 INFO sqlalchemy.engine.base.Engine Thread-37 : ('philip', 1, 1)
2020-06-06 15:05:44,150 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:05:44,151 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:05:44,155 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-06-06 15:06:04,097 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-06 15:06:04,098 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:04,098 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-06 15:06:04,099 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:04,099 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:04,101 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:04,101 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-06 15:06:04,102 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:04,102 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:04,104 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 15:06:04,104 INFO sqlalchemy.engine.base.Engine Thread-47 : ('20', 1)
2020-06-06 15:06:04,105 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 15:06:04,105 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (20, 'HAP Locked', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR', 130, '', 107)
2020-06-06 15:06:04,109 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:04,109 INFO sqlalchemy.engine.base.Engine Thread-47 : (82,)
2020-06-06 15:06:04,110 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:04,110 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 15:06:04,110 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 15:06:04,110 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 15:06:04,111 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 15:06:04,112 INFO sqlalchemy.engine.base.Engine Thread-47 : (1,)
2020-06-06 15:06:04,112 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:04,112 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 15:06:04,112 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 15:06:04,113 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 15:06:04,114 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-06-06 15:06:04,114 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 15:06:04,114 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 15:06:04,114 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 15:06:04,116 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:04,116 INFO sqlalchemy.engine.base.Engine Thread-47 : (127,)
2020-06-06 15:06:04,116 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:04,116 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:04,116 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:04,116 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:04,117 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 15:06:04,118 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:04,118 INFO sqlalchemy.engine.base.Engine Thread-47 : (105,)
2020-06-06 15:06:04,118 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 15:06:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 15:06:04,123 INFO sqlalchemy.engine.base.Engine Thread-47 : UPDATE datesofinterest SET id=%s, doi_name=%s, doi_start_dt=%s, doi_end_dt=%s, doi_regions=%s, doi_type=%s, doi_filter=%s WHERE datesofinterest.id = %s
2020-06-06 15:06:04,124 INFO sqlalchemy.engine.base.Engine Thread-47 : ('20', 'BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 131, '1', 20)
2020-06-06 15:06:04,125 INFO sqlalchemy.engine.base.Engine Thread-47 : COMMIT
2020-06-06 15:06:04,181 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-06-06 15:06:04,182 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:04,182 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-06-06 15:06:04,183 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:04,183 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:04,185 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:04,185 INFO sqlalchemy.engine.base.Engine Thread-48 : ('philip', 1, 1)
2020-06-06 15:06:04,186 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:04,186 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:04,194 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 15:06:04,195 INFO sqlalchemy.engine.base.Engine Thread-48 : ()
2020-06-06 15:06:04,195 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:06:04,196 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:04,201 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:04,201 INFO sqlalchemy.engine.base.Engine Thread-48 : ('philip', 1, 1)
2020-06-06 15:06:04,201 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:04,202 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:04,206 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-06-06 15:06:10,563 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-06 15:06:10,565 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-06 15:06:10,565 INFO sqlalchemy.engine.base.Engine Thread-58 : ()
2020-06-06 15:06:10,566 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-06 15:06:10,567 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-06 15:06:10,567 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-06 15:06:10,568 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:10,568 INFO sqlalchemy.engine.base.Engine Thread-58 : (100,)
2020-06-06 15:06:10,569 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:10,569 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-06 15:06:10,569 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-06 15:06:10,569 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-06 15:06:10,570 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-06 15:06:10,570 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-06 15:06:10,572 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:10,572 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-06-06 15:06:10,572 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:10,572 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:10,576 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:10,577 INFO sqlalchemy.engine.base.Engine Thread-58 : ('philip', 1, 1)
2020-06-06 15:06:10,577 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:10,577 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:10,581 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-06 15:06:10,875 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-06-06 15:06:10,877 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:06:10,877 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:10,878 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:06:10,878 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:06:10,878 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:06:10,879 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 15:06:10,883 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:06:10,883 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:10,884 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:06:10,888 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:06:10,888 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:10,889 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:06:10,890 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-06-06 15:06:10,916 INFO sqlalchemy.engine.base.Engine Thread-69 : BEGIN (implicit)
2020-06-06 15:06:10,918 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:06:10,918 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:10,919 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:06:10,919 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:06:10,919 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:06:10,919 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 15:06:10,924 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:06:10,924 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:10,925 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:06:10,930 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:06:10,930 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:10,931 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:06:10,932 INFO sqlalchemy.engine.base.Engine Thread-69 : ROLLBACK
2020-06-06 15:06:22,748 INFO sqlalchemy.engine.base.Engine Thread-70 : BEGIN (implicit)
2020-06-06 15:06:22,749 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:22,749 INFO sqlalchemy.engine.base.Engine Thread-70 : (1, 1)
2020-06-06 15:06:22,750 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:22,750 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:22,752 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:22,752 INFO sqlalchemy.engine.base.Engine Thread-70 : ('philip', 1, 1)
2020-06-06 15:06:22,753 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:22,753 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:22,761 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 15:06:22,761 INFO sqlalchemy.engine.base.Engine Thread-70 : ()
2020-06-06 15:06:22,762 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 15:06:22,762 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:06:22,763 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:22,768 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:22,768 INFO sqlalchemy.engine.base.Engine Thread-70 : ('philip', 1, 1)
2020-06-06 15:06:22,768 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:22,769 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:22,773 INFO sqlalchemy.engine.base.Engine Thread-70 : ROLLBACK
2020-06-06 15:06:24,676 INFO sqlalchemy.engine.base.Engine Thread-80 : BEGIN (implicit)
2020-06-06 15:06:24,677 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:24,678 INFO sqlalchemy.engine.base.Engine Thread-80 : (1, 1)
2020-06-06 15:06:24,678 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:24,678 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:24,681 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:24,681 INFO sqlalchemy.engine.base.Engine Thread-80 : ('philip', 1, 1)
2020-06-06 15:06:24,682 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:24,682 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:24,683 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 15:06:24,683 INFO sqlalchemy.engine.base.Engine Thread-80 : ('19', 1)
2020-06-06 15:06:24,684 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 15:06:24,684 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (19, 'Change Freeze RED', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 129, '', 106)
2020-06-06 15:06:24,686 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:24,686 INFO sqlalchemy.engine.base.Engine Thread-80 : (82,)
2020-06-06 15:06:24,687 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:24,687 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 15:06:24,687 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 15:06:24,687 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 15:06:24,689 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 15:06:24,689 INFO sqlalchemy.engine.base.Engine Thread-80 : (1,)
2020-06-06 15:06:24,689 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:24,689 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 15:06:24,690 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 15:06:24,691 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 15:06:24,691 INFO sqlalchemy.engine.base.Engine Thread-80 : ()
2020-06-06 15:06:24,691 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 15:06:24,691 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 15:06:24,691 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 15:06:24,693 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:24,693 INFO sqlalchemy.engine.base.Engine Thread-80 : (127,)
2020-06-06 15:06:24,693 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:24,693 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:24,693 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:24,694 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:24,694 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 15:06:24,695 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:24,695 INFO sqlalchemy.engine.base.Engine Thread-80 : (105,)
2020-06-06 15:06:24,695 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:24,696 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 15:06:24,696 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 15:06:24,700 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:24,700 INFO sqlalchemy.engine.base.Engine Thread-80 : ('philip', 1, 1)
2020-06-06 15:06:24,701 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:24,701 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:24,705 INFO sqlalchemy.engine.base.Engine Thread-80 : ROLLBACK
2020-06-06 15:06:30,667 INFO sqlalchemy.engine.base.Engine Thread-90 : BEGIN (implicit)
2020-06-06 15:06:30,668 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:30,668 INFO sqlalchemy.engine.base.Engine Thread-90 : (1, 1)
2020-06-06 15:06:30,669 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:30,669 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:30,672 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:30,672 INFO sqlalchemy.engine.base.Engine Thread-90 : ('philip', 1, 1)
2020-06-06 15:06:30,673 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:30,673 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:30,675 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 15:06:30,675 INFO sqlalchemy.engine.base.Engine Thread-90 : ('19', 1)
2020-06-06 15:06:30,675 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 15:06:30,675 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (19, 'Change Freeze RED', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 129, '', 106)
2020-06-06 15:06:30,679 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:30,679 INFO sqlalchemy.engine.base.Engine Thread-90 : (82,)
2020-06-06 15:06:30,679 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:30,680 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 15:06:30,680 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 15:06:30,680 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 15:06:30,681 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 15:06:30,682 INFO sqlalchemy.engine.base.Engine Thread-90 : (1,)
2020-06-06 15:06:30,682 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:30,682 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 15:06:30,682 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 15:06:30,684 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 15:06:30,684 INFO sqlalchemy.engine.base.Engine Thread-90 : ()
2020-06-06 15:06:30,684 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 15:06:30,684 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 15:06:30,685 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 15:06:30,686 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:30,686 INFO sqlalchemy.engine.base.Engine Thread-90 : (127,)
2020-06-06 15:06:30,687 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:30,687 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:30,687 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:30,687 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:06:30,687 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 15:06:30,688 INFO sqlalchemy.engine.base.Engine Thread-90 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:30,689 INFO sqlalchemy.engine.base.Engine Thread-90 : (105,)
2020-06-06 15:06:30,689 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:30,689 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 15:06:30,689 DEBUG sqlalchemy.engine.base.Engine Thread-90 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 15:06:30,691 INFO sqlalchemy.engine.base.Engine Thread-90 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_type=%s WHERE datesofinterest.id = %s
2020-06-06 15:06:30,691 INFO sqlalchemy.engine.base.Engine Thread-90 : ('19', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 130, 19)
2020-06-06 15:06:30,692 INFO sqlalchemy.engine.base.Engine Thread-90 : COMMIT
2020-06-06 15:06:30,748 INFO sqlalchemy.engine.base.Engine Thread-91 : BEGIN (implicit)
2020-06-06 15:06:30,749 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:30,749 INFO sqlalchemy.engine.base.Engine Thread-91 : (1, 1)
2020-06-06 15:06:30,750 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:30,750 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:30,752 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:30,752 INFO sqlalchemy.engine.base.Engine Thread-91 : ('philip', 1, 1)
2020-06-06 15:06:30,753 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:30,753 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:30,762 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 15:06:30,762 INFO sqlalchemy.engine.base.Engine Thread-91 : ()
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:06:30,763 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:06:30,764 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:06:30,764 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:06:30,764 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:06:30,768 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:30,768 INFO sqlalchemy.engine.base.Engine Thread-91 : ('philip', 1, 1)
2020-06-06 15:06:30,769 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:30,769 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:30,773 INFO sqlalchemy.engine.base.Engine Thread-91 : ROLLBACK
2020-06-06 15:06:32,135 INFO sqlalchemy.engine.base.Engine Thread-101 : BEGIN (implicit)
2020-06-06 15:06:32,137 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-06 15:06:32,137 INFO sqlalchemy.engine.base.Engine Thread-101 : ()
2020-06-06 15:06:32,139 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-06 15:06:32,139 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-06 15:06:32,139 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-06 15:06:32,140 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:06:32,141 INFO sqlalchemy.engine.base.Engine Thread-101 : (100,)
2020-06-06 15:06:32,141 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:06:32,141 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-06 15:06:32,141 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-06 15:06:32,142 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-06 15:06:32,142 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-06 15:06:32,142 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-06 15:06:32,144 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:32,144 INFO sqlalchemy.engine.base.Engine Thread-101 : (1, 1)
2020-06-06 15:06:32,144 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:32,145 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:32,149 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:06:32,149 INFO sqlalchemy.engine.base.Engine Thread-101 : ('philip', 1, 1)
2020-06-06 15:06:32,150 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:32,150 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:32,153 INFO sqlalchemy.engine.base.Engine Thread-101 : ROLLBACK
2020-06-06 15:06:32,423 INFO sqlalchemy.engine.base.Engine Thread-111 : BEGIN (implicit)
2020-06-06 15:06:32,424 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:06:32,425 INFO sqlalchemy.engine.base.Engine Thread-111 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:32,426 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:06:32,426 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:06:32,426 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 15:06:32,426 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 15:06:32,432 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:06:32,433 INFO sqlalchemy.engine.base.Engine Thread-111 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:32,433 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:06:32,437 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:06:32,437 INFO sqlalchemy.engine.base.Engine Thread-111 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:32,438 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:06:32,439 INFO sqlalchemy.engine.base.Engine Thread-111 : ROLLBACK
2020-06-06 15:06:32,462 INFO sqlalchemy.engine.base.Engine Thread-112 : BEGIN (implicit)
2020-06-06 15:06:32,463 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:06:32,463 INFO sqlalchemy.engine.base.Engine Thread-112 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:32,464 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:06:32,464 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:06:32,464 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 15:06:32,464 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 15:06:32,468 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:06:32,469 INFO sqlalchemy.engine.base.Engine Thread-112 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:32,469 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:06:32,473 INFO sqlalchemy.engine.base.Engine Thread-112 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:06:32,473 INFO sqlalchemy.engine.base.Engine Thread-112 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:06:32,474 DEBUG sqlalchemy.engine.base.Engine Thread-112 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:06:32,475 INFO sqlalchemy.engine.base.Engine Thread-112 : ROLLBACK
2020-06-06 15:06:35,334 INFO sqlalchemy.engine.base.Engine Thread-113 : BEGIN (implicit)
2020-06-06 15:06:35,335 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:06:35,335 INFO sqlalchemy.engine.base.Engine Thread-113 : (1, 1)
2020-06-06 15:06:35,336 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:06:35,336 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:06:35,340 INFO sqlalchemy.engine.base.Engine Thread-113 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:06:35,341 INFO sqlalchemy.engine.base.Engine Thread-113 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:06:35,341 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:06:35,342 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:06:35,342 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:06:35,342 DEBUG sqlalchemy.engine.base.Engine Thread-113 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:06:35,345 INFO sqlalchemy.engine.base.Engine Thread-113 : ROLLBACK
2020-06-06 15:09:42,637 INFO sqlalchemy.engine.base.Engine Thread-114 : BEGIN (implicit)
2020-06-06 15:09:42,639 INFO sqlalchemy.engine.base.Engine Thread-114 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:09:42,639 INFO sqlalchemy.engine.base.Engine Thread-114 : (1, 1)
2020-06-06 15:09:42,641 DEBUG sqlalchemy.engine.base.Engine Thread-114 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:09:42,641 DEBUG sqlalchemy.engine.base.Engine Thread-114 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:09:42,645 INFO sqlalchemy.engine.base.Engine Thread-114 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:09:42,646 INFO sqlalchemy.engine.base.Engine Thread-114 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:09:42,646 DEBUG sqlalchemy.engine.base.Engine Thread-114 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:09:42,646 DEBUG sqlalchemy.engine.base.Engine Thread-114 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:09:42,647 DEBUG sqlalchemy.engine.base.Engine Thread-114 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:09:42,647 DEBUG sqlalchemy.engine.base.Engine Thread-114 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:09:42,665 INFO sqlalchemy.engine.base.Engine Thread-114 : ROLLBACK
2020-06-06 15:11:15,694 INFO sqlalchemy.engine.base.Engine Thread-115 : BEGIN (implicit)
2020-06-06 15:11:15,695 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:11:15,696 INFO sqlalchemy.engine.base.Engine Thread-115 : (1, 1)
2020-06-06 15:11:15,697 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:11:15,697 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:11:15,702 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:11:15,702 INFO sqlalchemy.engine.base.Engine Thread-115 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:11:15,703 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:11:15,703 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:11:15,703 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:11:15,703 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:11:15,724 INFO sqlalchemy.engine.base.Engine Thread-115 : ROLLBACK
2020-06-06 15:14:04,306 INFO sqlalchemy.engine.base.Engine Thread-116 : BEGIN (implicit)
2020-06-06 15:14:04,308 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:14:04,308 INFO sqlalchemy.engine.base.Engine Thread-116 : (1, 1)
2020-06-06 15:14:04,309 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:14:04,309 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:14:04,314 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:14:04,315 INFO sqlalchemy.engine.base.Engine Thread-116 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:14:04,316 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:14:04,316 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:14:04,316 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:14:04,316 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:14:04,335 INFO sqlalchemy.engine.base.Engine Thread-116 : ROLLBACK
2020-06-06 15:14:07,467 INFO sqlalchemy.engine.base.Engine Thread-117 : BEGIN (implicit)
2020-06-06 15:14:07,468 INFO sqlalchemy.engine.base.Engine Thread-117 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:14:07,469 INFO sqlalchemy.engine.base.Engine Thread-117 : (1, 1)
2020-06-06 15:14:07,469 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:14:07,470 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:14:07,474 INFO sqlalchemy.engine.base.Engine Thread-117 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:14:07,475 INFO sqlalchemy.engine.base.Engine Thread-117 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 0, 0))
2020-06-06 15:14:07,475 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:14:07,475 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:14:07,477 INFO sqlalchemy.engine.base.Engine Thread-117 : ROLLBACK
2020-06-06 15:14:10,122 INFO sqlalchemy.engine.base.Engine Thread-118 : BEGIN (implicit)
2020-06-06 15:14:10,123 INFO sqlalchemy.engine.base.Engine Thread-118 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:14:10,123 INFO sqlalchemy.engine.base.Engine Thread-118 : (1, 1)
2020-06-06 15:14:10,124 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:14:10,124 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:14:10,129 INFO sqlalchemy.engine.base.Engine Thread-118 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:14:10,129 INFO sqlalchemy.engine.base.Engine Thread-118 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 15:14:10,130 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:14:10,130 DEBUG sqlalchemy.engine.base.Engine Thread-118 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:14:10,132 INFO sqlalchemy.engine.base.Engine Thread-118 : ROLLBACK
2020-06-06 15:14:12,187 INFO sqlalchemy.engine.base.Engine Thread-119 : BEGIN (implicit)
2020-06-06 15:14:12,188 INFO sqlalchemy.engine.base.Engine Thread-119 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:14:12,188 INFO sqlalchemy.engine.base.Engine Thread-119 : (1, 1)
2020-06-06 15:14:12,189 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:14:12,189 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:14:12,193 INFO sqlalchemy.engine.base.Engine Thread-119 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:14:12,193 INFO sqlalchemy.engine.base.Engine Thread-119 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:14:12,194 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:14:12,194 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:14:12,194 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:14:12,195 DEBUG sqlalchemy.engine.base.Engine Thread-119 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:14:12,196 INFO sqlalchemy.engine.base.Engine Thread-119 : ROLLBACK
2020-06-06 15:15:39,170 INFO sqlalchemy.engine.base.Engine Thread-120 : BEGIN (implicit)
2020-06-06 15:15:39,172 INFO sqlalchemy.engine.base.Engine Thread-120 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:15:39,172 INFO sqlalchemy.engine.base.Engine Thread-120 : (1, 1)
2020-06-06 15:15:39,173 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:15:39,174 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:15:39,178 INFO sqlalchemy.engine.base.Engine Thread-120 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:15:39,178 INFO sqlalchemy.engine.base.Engine Thread-120 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:15:39,179 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:15:39,179 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:15:39,179 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:15:39,180 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:15:39,198 INFO sqlalchemy.engine.base.Engine Thread-120 : ROLLBACK
2020-06-06 15:15:44,775 INFO sqlalchemy.engine.base.Engine Thread-121 : BEGIN (implicit)
2020-06-06 15:15:44,777 INFO sqlalchemy.engine.base.Engine Thread-121 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:15:44,777 INFO sqlalchemy.engine.base.Engine Thread-121 : (1, 1)
2020-06-06 15:15:44,777 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:15:44,777 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:15:44,782 INFO sqlalchemy.engine.base.Engine Thread-121 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:15:44,782 INFO sqlalchemy.engine.base.Engine Thread-121 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 0, 0))
2020-06-06 15:15:44,783 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:15:44,783 DEBUG sqlalchemy.engine.base.Engine Thread-121 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:15:44,785 INFO sqlalchemy.engine.base.Engine Thread-121 : ROLLBACK
2020-06-06 15:15:47,982 INFO sqlalchemy.engine.base.Engine Thread-122 : BEGIN (implicit)
2020-06-06 15:15:47,983 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:15:47,983 INFO sqlalchemy.engine.base.Engine Thread-122 : (1, 1)
2020-06-06 15:15:47,984 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:15:47,984 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:15:47,989 INFO sqlalchemy.engine.base.Engine Thread-122 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:15:47,989 INFO sqlalchemy.engine.base.Engine Thread-122 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:15:47,990 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:15:47,990 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:15:47,990 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:15:47,990 DEBUG sqlalchemy.engine.base.Engine Thread-122 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:15:47,992 INFO sqlalchemy.engine.base.Engine Thread-122 : ROLLBACK
2020-06-06 15:15:56,532 INFO sqlalchemy.engine.base.Engine Thread-123 : BEGIN (implicit)
2020-06-06 15:15:56,533 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:15:56,533 INFO sqlalchemy.engine.base.Engine Thread-123 : (1, 1)
2020-06-06 15:15:56,534 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:15:56,534 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:15:56,539 INFO sqlalchemy.engine.base.Engine Thread-123 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:15:56,539 INFO sqlalchemy.engine.base.Engine Thread-123 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:15:56,540 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:15:56,540 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:15:56,540 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:15:56,541 DEBUG sqlalchemy.engine.base.Engine Thread-123 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:15:56,543 INFO sqlalchemy.engine.base.Engine Thread-123 : ROLLBACK
2020-06-06 15:16:21,659 INFO sqlalchemy.engine.base.Engine Thread-124 : BEGIN (implicit)
2020-06-06 15:16:21,660 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:16:21,660 INFO sqlalchemy.engine.base.Engine Thread-124 : (1, 1)
2020-06-06 15:16:21,661 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:16:21,661 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:16:21,665 INFO sqlalchemy.engine.base.Engine Thread-124 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:16:21,665 INFO sqlalchemy.engine.base.Engine Thread-124 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:16:21,666 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:16:21,666 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:16:21,667 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:16:21,667 DEBUG sqlalchemy.engine.base.Engine Thread-124 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:16:21,684 INFO sqlalchemy.engine.base.Engine Thread-124 : ROLLBACK
2020-06-06 15:16:40,358 INFO sqlalchemy.engine.base.Engine Thread-125 : BEGIN (implicit)
2020-06-06 15:16:40,359 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:16:40,359 INFO sqlalchemy.engine.base.Engine Thread-125 : (1, 1)
2020-06-06 15:16:40,361 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:16:40,361 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:16:40,366 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:16:40,366 INFO sqlalchemy.engine.base.Engine Thread-125 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:16:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:16:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:16:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:16:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:16:40,388 INFO sqlalchemy.engine.base.Engine Thread-125 : ROLLBACK
2020-06-06 15:17:16,808 INFO sqlalchemy.engine.base.Engine Thread-126 : BEGIN (implicit)
2020-06-06 15:17:16,809 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:17:16,809 INFO sqlalchemy.engine.base.Engine Thread-126 : (1, 1)
2020-06-06 15:17:16,810 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:17:16,810 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:17:16,814 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:17:16,814 INFO sqlalchemy.engine.base.Engine Thread-126 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:17:16,815 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:17:16,815 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:17:16,815 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:17:16,816 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:17:16,834 INFO sqlalchemy.engine.base.Engine Thread-126 : ROLLBACK
2020-06-06 15:18:46,989 INFO sqlalchemy.engine.base.Engine Thread-127 : BEGIN (implicit)
2020-06-06 15:18:46,990 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:18:46,990 INFO sqlalchemy.engine.base.Engine Thread-127 : (1, 1)
2020-06-06 15:18:46,991 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:18:46,992 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:18:46,997 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:18:46,997 INFO sqlalchemy.engine.base.Engine Thread-127 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:18:46,998 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:18:46,998 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:18:46,998 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:18:46,998 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:18:47,016 INFO sqlalchemy.engine.base.Engine Thread-127 : ROLLBACK
2020-06-06 15:20:53,743 INFO sqlalchemy.engine.base.Engine Thread-128 : BEGIN (implicit)
2020-06-06 15:20:53,745 INFO sqlalchemy.engine.base.Engine Thread-128 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:20:53,745 INFO sqlalchemy.engine.base.Engine Thread-128 : (1, 1)
2020-06-06 15:20:53,747 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:20:53,747 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:20:53,751 INFO sqlalchemy.engine.base.Engine Thread-128 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:20:53,752 INFO sqlalchemy.engine.base.Engine Thread-128 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:20:53,752 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:20:53,753 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:20:53,753 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:20:53,753 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:20:53,769 INFO sqlalchemy.engine.base.Engine Thread-128 : ROLLBACK
2020-06-06 15:22:38,894 INFO sqlalchemy.engine.base.Engine Thread-129 : BEGIN (implicit)
2020-06-06 15:22:38,896 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:22:38,896 INFO sqlalchemy.engine.base.Engine Thread-129 : (1, 1)
2020-06-06 15:22:38,898 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:22:38,898 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:22:38,902 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:22:38,903 INFO sqlalchemy.engine.base.Engine Thread-129 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:22:38,903 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:22:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:22:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 130)
2020-06-06 15:22:38,904 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:22:38,922 INFO sqlalchemy.engine.base.Engine Thread-129 : ROLLBACK
2020-06-06 15:22:55,308 INFO sqlalchemy.engine.base.Engine Thread-130 : BEGIN (implicit)
2020-06-06 15:22:55,309 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:22:55,309 INFO sqlalchemy.engine.base.Engine Thread-130 : (1, 1)
2020-06-06 15:22:55,310 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:22:55,310 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:22:55,312 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:22:55,312 INFO sqlalchemy.engine.base.Engine Thread-130 : ('philip', 1, 1)
2020-06-06 15:22:55,313 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:22:55,313 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:22:55,322 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 15:22:55,322 INFO sqlalchemy.engine.base.Engine Thread-130 : ()
2020-06-06 15:22:55,323 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 15:22:55,323 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:22:55,323 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:22:55,323 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:22:55,323 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:22:55,323 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:22:55,323 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:22:55,324 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:22:55,324 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:22:55,324 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:22:55,324 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:22:55,324 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:22:55,328 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:22:55,328 INFO sqlalchemy.engine.base.Engine Thread-130 : ('philip', 1, 1)
2020-06-06 15:22:55,329 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:22:55,329 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:22:55,333 INFO sqlalchemy.engine.base.Engine Thread-130 : ROLLBACK
2020-06-06 15:23:05,653 INFO sqlalchemy.engine.base.Engine Thread-140 : BEGIN (implicit)
2020-06-06 15:23:05,654 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:23:05,655 INFO sqlalchemy.engine.base.Engine Thread-140 : (1, 1)
2020-06-06 15:23:05,655 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:05,656 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:05,659 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:23:05,659 INFO sqlalchemy.engine.base.Engine Thread-140 : ('philip', 1, 1)
2020-06-06 15:23:05,660 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:05,660 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:05,661 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 15:23:05,662 INFO sqlalchemy.engine.base.Engine Thread-140 : ('19', 1)
2020-06-06 15:23:05,662 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 15:23:05,662 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (19, 'Change Freeze RED', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 130, '', 106)
2020-06-06 15:23:05,665 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:23:05,665 INFO sqlalchemy.engine.base.Engine Thread-140 : (82,)
2020-06-06 15:23:05,666 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:05,666 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 15:23:05,666 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 15:23:05,666 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 15:23:05,668 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 15:23:05,668 INFO sqlalchemy.engine.base.Engine Thread-140 : (1,)
2020-06-06 15:23:05,668 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:05,669 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 15:23:05,669 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 15:23:05,670 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 15:23:05,670 INFO sqlalchemy.engine.base.Engine Thread-140 : ()
2020-06-06 15:23:05,671 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 15:23:05,671 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 15:23:05,671 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 15:23:05,672 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:23:05,673 INFO sqlalchemy.engine.base.Engine Thread-140 : (127,)
2020-06-06 15:23:05,673 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:05,673 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:23:05,673 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:23:05,673 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:23:05,673 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 15:23:05,675 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:23:05,675 INFO sqlalchemy.engine.base.Engine Thread-140 : (105,)
2020-06-06 15:23:05,675 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:05,676 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 15:23:05,676 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 15:23:05,680 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:23:05,680 INFO sqlalchemy.engine.base.Engine Thread-140 : ('philip', 1, 1)
2020-06-06 15:23:05,681 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:05,681 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:05,685 INFO sqlalchemy.engine.base.Engine Thread-140 : ROLLBACK
2020-06-06 15:23:10,679 INFO sqlalchemy.engine.base.Engine Thread-150 : BEGIN (implicit)
2020-06-06 15:23:10,680 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:23:10,680 INFO sqlalchemy.engine.base.Engine Thread-150 : (1, 1)
2020-06-06 15:23:10,681 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:10,681 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:10,684 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:23:10,684 INFO sqlalchemy.engine.base.Engine Thread-150 : ('philip', 1, 1)
2020-06-06 15:23:10,685 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:10,685 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:10,687 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 15:23:10,687 INFO sqlalchemy.engine.base.Engine Thread-150 : ('19', 1)
2020-06-06 15:23:10,688 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 15:23:10,689 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (19, 'Change Freeze RED', 83, '', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 130, '', 106)
2020-06-06 15:23:10,692 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:23:10,692 INFO sqlalchemy.engine.base.Engine Thread-150 : (82,)
2020-06-06 15:23:10,693 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:10,693 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 15:23:10,693 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 15:23:10,693 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 15:23:10,695 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 15:23:10,695 INFO sqlalchemy.engine.base.Engine Thread-150 : (1,)
2020-06-06 15:23:10,695 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:10,696 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 15:23:10,696 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 15:23:10,697 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 15:23:10,697 INFO sqlalchemy.engine.base.Engine Thread-150 : ()
2020-06-06 15:23:10,698 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 15:23:10,698 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 15:23:10,698 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 15:23:10,700 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:23:10,700 INFO sqlalchemy.engine.base.Engine Thread-150 : (127,)
2020-06-06 15:23:10,700 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:10,701 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:23:10,701 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:23:10,701 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:23:10,701 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 15:23:10,702 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:23:10,703 INFO sqlalchemy.engine.base.Engine Thread-150 : (105,)
2020-06-06 15:23:10,703 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:10,703 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 15:23:10,704 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 15:23:10,706 INFO sqlalchemy.engine.base.Engine Thread-150 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s, doi_type=%s WHERE datesofinterest.id = %s
2020-06-06 15:23:10,706 INFO sqlalchemy.engine.base.Engine Thread-150 : ('19', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 128, 19)
2020-06-06 15:23:10,707 INFO sqlalchemy.engine.base.Engine Thread-150 : COMMIT
2020-06-06 15:23:10,764 INFO sqlalchemy.engine.base.Engine Thread-151 : BEGIN (implicit)
2020-06-06 15:23:10,765 INFO sqlalchemy.engine.base.Engine Thread-151 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:23:10,765 INFO sqlalchemy.engine.base.Engine Thread-151 : (1, 1)
2020-06-06 15:23:10,765 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:10,766 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:10,768 INFO sqlalchemy.engine.base.Engine Thread-151 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:23:10,768 INFO sqlalchemy.engine.base.Engine Thread-151 : ('philip', 1, 1)
2020-06-06 15:23:10,769 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:10,769 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:10,779 INFO sqlalchemy.engine.base.Engine Thread-151 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 15:23:10,779 INFO sqlalchemy.engine.base.Engine Thread-151 : ()
2020-06-06 15:23:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 15:23:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:23:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:23:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:23:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:23:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:23:10,781 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:23:10,781 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:23:10,781 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:23:10,781 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:23:10,781 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:23:10,781 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:23:10,786 INFO sqlalchemy.engine.base.Engine Thread-151 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:23:10,786 INFO sqlalchemy.engine.base.Engine Thread-151 : ('philip', 1, 1)
2020-06-06 15:23:10,786 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:10,787 DEBUG sqlalchemy.engine.base.Engine Thread-151 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:10,790 INFO sqlalchemy.engine.base.Engine Thread-151 : ROLLBACK
2020-06-06 15:23:12,898 INFO sqlalchemy.engine.base.Engine Thread-161 : BEGIN (implicit)
2020-06-06 15:23:12,901 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-06 15:23:12,901 INFO sqlalchemy.engine.base.Engine Thread-161 : ()
2020-06-06 15:23:12,902 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-06 15:23:12,903 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-06 15:23:12,903 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-06 15:23:12,905 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:23:12,905 INFO sqlalchemy.engine.base.Engine Thread-161 : (100,)
2020-06-06 15:23:12,906 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:23:12,906 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-06 15:23:12,906 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-06 15:23:12,906 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-06 15:23:12,906 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-06 15:23:12,906 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-06 15:23:12,909 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:23:12,909 INFO sqlalchemy.engine.base.Engine Thread-161 : (1, 1)
2020-06-06 15:23:12,909 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:12,910 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:12,914 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:23:12,914 INFO sqlalchemy.engine.base.Engine Thread-161 : ('philip', 1, 1)
2020-06-06 15:23:12,915 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:12,915 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:12,918 INFO sqlalchemy.engine.base.Engine Thread-161 : ROLLBACK
2020-06-06 15:23:13,174 INFO sqlalchemy.engine.base.Engine Thread-171 : BEGIN (implicit)
2020-06-06 15:23:13,176 INFO sqlalchemy.engine.base.Engine Thread-171 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:23:13,176 INFO sqlalchemy.engine.base.Engine Thread-171 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:23:13,177 DEBUG sqlalchemy.engine.base.Engine Thread-171 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:23:13,178 DEBUG sqlalchemy.engine.base.Engine Thread-171 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:23:13,178 DEBUG sqlalchemy.engine.base.Engine Thread-171 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-06 15:23:13,178 DEBUG sqlalchemy.engine.base.Engine Thread-171 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 15:23:13,185 INFO sqlalchemy.engine.base.Engine Thread-171 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:23:13,185 INFO sqlalchemy.engine.base.Engine Thread-171 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:23:13,186 DEBUG sqlalchemy.engine.base.Engine Thread-171 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:23:13,190 INFO sqlalchemy.engine.base.Engine Thread-171 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:23:13,191 INFO sqlalchemy.engine.base.Engine Thread-171 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:23:13,191 DEBUG sqlalchemy.engine.base.Engine Thread-171 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:23:13,193 INFO sqlalchemy.engine.base.Engine Thread-171 : ROLLBACK
2020-06-06 15:23:13,252 INFO sqlalchemy.engine.base.Engine Thread-172 : BEGIN (implicit)
2020-06-06 15:23:13,254 INFO sqlalchemy.engine.base.Engine Thread-172 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:23:13,254 INFO sqlalchemy.engine.base.Engine Thread-172 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:23:13,255 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:23:13,255 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:23:13,255 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-06 15:23:13,255 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 15:23:13,259 INFO sqlalchemy.engine.base.Engine Thread-172 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:23:13,260 INFO sqlalchemy.engine.base.Engine Thread-172 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:23:13,260 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:23:13,265 INFO sqlalchemy.engine.base.Engine Thread-172 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:23:13,265 INFO sqlalchemy.engine.base.Engine Thread-172 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:23:13,266 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:23:13,267 INFO sqlalchemy.engine.base.Engine Thread-172 : ROLLBACK
2020-06-06 15:23:14,807 INFO sqlalchemy.engine.base.Engine Thread-173 : BEGIN (implicit)
2020-06-06 15:23:14,808 INFO sqlalchemy.engine.base.Engine Thread-173 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:23:14,808 INFO sqlalchemy.engine.base.Engine Thread-173 : (1, 1)
2020-06-06 15:23:14,809 DEBUG sqlalchemy.engine.base.Engine Thread-173 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:23:14,809 DEBUG sqlalchemy.engine.base.Engine Thread-173 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:23:14,814 INFO sqlalchemy.engine.base.Engine Thread-173 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:23:14,814 INFO sqlalchemy.engine.base.Engine Thread-173 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:23:14,815 DEBUG sqlalchemy.engine.base.Engine Thread-173 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:23:14,815 DEBUG sqlalchemy.engine.base.Engine Thread-173 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:23:14,815 DEBUG sqlalchemy.engine.base.Engine Thread-173 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:23:14,815 DEBUG sqlalchemy.engine.base.Engine Thread-173 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:23:14,817 INFO sqlalchemy.engine.base.Engine Thread-173 : ROLLBACK
2020-06-06 15:24:43,265 INFO sqlalchemy.engine.base.Engine Thread-174 : BEGIN (implicit)
2020-06-06 15:24:43,267 INFO sqlalchemy.engine.base.Engine Thread-174 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:24:43,267 INFO sqlalchemy.engine.base.Engine Thread-174 : (1, 1)
2020-06-06 15:24:43,268 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:24:43,268 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:24:43,272 INFO sqlalchemy.engine.base.Engine Thread-174 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:24:43,272 INFO sqlalchemy.engine.base.Engine Thread-174 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:24:43,273 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:24:43,273 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:24:43,274 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:24:43,274 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:24:43,289 INFO sqlalchemy.engine.base.Engine Thread-174 : ROLLBACK
2020-06-06 15:24:44,133 INFO sqlalchemy.engine.base.Engine Thread-175 : BEGIN (implicit)
2020-06-06 15:24:44,134 INFO sqlalchemy.engine.base.Engine Thread-175 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:24:44,134 INFO sqlalchemy.engine.base.Engine Thread-175 : (1, 1)
2020-06-06 15:24:44,135 DEBUG sqlalchemy.engine.base.Engine Thread-175 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:24:44,135 DEBUG sqlalchemy.engine.base.Engine Thread-175 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:24:44,140 INFO sqlalchemy.engine.base.Engine Thread-175 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:24:44,140 INFO sqlalchemy.engine.base.Engine Thread-175 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:24:44,140 DEBUG sqlalchemy.engine.base.Engine Thread-175 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:24:44,141 DEBUG sqlalchemy.engine.base.Engine Thread-175 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:24:44,141 DEBUG sqlalchemy.engine.base.Engine Thread-175 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:24:44,141 DEBUG sqlalchemy.engine.base.Engine Thread-175 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:24:44,143 INFO sqlalchemy.engine.base.Engine Thread-175 : ROLLBACK
2020-06-06 15:24:50,165 INFO sqlalchemy.engine.base.Engine Thread-176 : BEGIN (implicit)
2020-06-06 15:24:50,166 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:24:50,166 INFO sqlalchemy.engine.base.Engine Thread-176 : (1, 1)
2020-06-06 15:24:50,167 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:24:50,167 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:24:50,172 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:24:50,172 INFO sqlalchemy.engine.base.Engine Thread-176 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:24:50,172 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:24:50,172 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:24:50,173 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:24:50,173 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:24:50,175 INFO sqlalchemy.engine.base.Engine Thread-176 : ROLLBACK
2020-06-06 15:26:20,281 INFO sqlalchemy.engine.base.Engine Thread-177 : BEGIN (implicit)
2020-06-06 15:26:20,282 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:26:20,283 INFO sqlalchemy.engine.base.Engine Thread-177 : (1, 1)
2020-06-06 15:26:20,284 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:26:20,285 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:26:20,289 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:26:20,289 INFO sqlalchemy.engine.base.Engine Thread-177 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:26:20,290 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:26:20,290 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:26:20,290 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:26:20,290 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:26:20,307 INFO sqlalchemy.engine.base.Engine Thread-177 : ROLLBACK
2020-06-06 15:26:24,212 INFO sqlalchemy.engine.base.Engine Thread-178 : BEGIN (implicit)
2020-06-06 15:26:24,213 INFO sqlalchemy.engine.base.Engine Thread-178 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:26:24,213 INFO sqlalchemy.engine.base.Engine Thread-178 : (1, 1)
2020-06-06 15:26:24,214 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:26:24,214 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:26:24,218 INFO sqlalchemy.engine.base.Engine Thread-178 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:26:24,219 INFO sqlalchemy.engine.base.Engine Thread-178 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:26:24,219 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:26:24,220 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:26:24,220 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:26:24,220 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:26:24,222 INFO sqlalchemy.engine.base.Engine Thread-178 : ROLLBACK
2020-06-06 15:26:36,672 INFO sqlalchemy.engine.base.Engine Thread-179 : BEGIN (implicit)
2020-06-06 15:26:36,673 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:26:36,673 INFO sqlalchemy.engine.base.Engine Thread-179 : (1, 1)
2020-06-06 15:26:36,674 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:26:36,674 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:26:36,677 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:26:36,677 INFO sqlalchemy.engine.base.Engine Thread-179 : ('philip', 1, 1)
2020-06-06 15:26:36,677 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:26:36,678 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:26:36,686 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 15:26:36,686 INFO sqlalchemy.engine.base.Engine Thread-179 : ()
2020-06-06 15:26:36,687 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:26:36,688 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:26:36,693 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:26:36,693 INFO sqlalchemy.engine.base.Engine Thread-179 : ('philip', 1, 1)
2020-06-06 15:26:36,694 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:26:36,694 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:26:36,698 INFO sqlalchemy.engine.base.Engine Thread-179 : ROLLBACK
2020-06-06 15:26:38,561 INFO sqlalchemy.engine.base.Engine Thread-189 : BEGIN (implicit)
2020-06-06 15:26:38,562 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:26:38,562 INFO sqlalchemy.engine.base.Engine Thread-189 : (1, 1)
2020-06-06 15:26:38,563 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:26:38,563 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:26:38,565 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:26:38,566 INFO sqlalchemy.engine.base.Engine Thread-189 : ('philip', 1, 1)
2020-06-06 15:26:38,566 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:26:38,567 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:26:38,568 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 15:26:38,569 INFO sqlalchemy.engine.base.Engine Thread-189 : ('0', 1)
2020-06-06 15:26:38,569 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 15:26:38,572 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:26:38,572 INFO sqlalchemy.engine.base.Engine Thread-189 : (82,)
2020-06-06 15:26:38,573 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:26:38,573 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 15:26:38,573 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 15:26:38,573 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 15:26:38,575 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 15:26:38,575 INFO sqlalchemy.engine.base.Engine Thread-189 : (1,)
2020-06-06 15:26:38,575 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:26:38,576 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 15:26:38,576 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 15:26:38,577 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 15:26:38,577 INFO sqlalchemy.engine.base.Engine Thread-189 : ()
2020-06-06 15:26:38,578 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 15:26:38,578 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 15:26:38,578 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 15:26:38,579 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:26:38,580 INFO sqlalchemy.engine.base.Engine Thread-189 : (127,)
2020-06-06 15:26:38,580 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:26:38,580 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:26:38,580 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:26:38,580 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:26:38,581 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 15:26:38,582 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:26:38,582 INFO sqlalchemy.engine.base.Engine Thread-189 : (105,)
2020-06-06 15:26:38,583 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:26:38,583 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 15:26:38,583 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 15:26:38,588 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:26:38,588 INFO sqlalchemy.engine.base.Engine Thread-189 : ('philip', 1, 1)
2020-06-06 15:26:38,589 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:26:38,589 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:26:38,593 INFO sqlalchemy.engine.base.Engine Thread-189 : ROLLBACK
2020-06-06 15:27:18,173 INFO sqlalchemy.engine.base.Engine Thread-199 : BEGIN (implicit)
2020-06-06 15:27:18,174 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:27:18,174 INFO sqlalchemy.engine.base.Engine Thread-199 : (1, 1)
2020-06-06 15:27:18,175 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:18,175 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:18,177 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:27:18,177 INFO sqlalchemy.engine.base.Engine Thread-199 : ('philip', 1, 1)
2020-06-06 15:27:18,178 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:18,178 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:18,180 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 15:27:18,180 INFO sqlalchemy.engine.base.Engine Thread-199 : ('0', 1)
2020-06-06 15:27:18,180 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 15:27:18,183 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:27:18,183 INFO sqlalchemy.engine.base.Engine Thread-199 : (82,)
2020-06-06 15:27:18,184 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:27:18,184 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 15:27:18,184 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 15:27:18,184 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 15:27:18,186 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 15:27:18,186 INFO sqlalchemy.engine.base.Engine Thread-199 : (1,)
2020-06-06 15:27:18,186 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:27:18,186 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 15:27:18,187 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 15:27:18,188 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 15:27:18,188 INFO sqlalchemy.engine.base.Engine Thread-199 : ()
2020-06-06 15:27:18,188 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 15:27:18,188 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 15:27:18,188 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 15:27:18,190 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:27:18,190 INFO sqlalchemy.engine.base.Engine Thread-199 : (127,)
2020-06-06 15:27:18,190 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:27:18,190 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:27:18,191 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:27:18,191 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 15:27:18,191 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 15:27:18,192 INFO sqlalchemy.engine.base.Engine Thread-199 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:27:18,192 INFO sqlalchemy.engine.base.Engine Thread-199 : (105,)
2020-06-06 15:27:18,193 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:27:18,193 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 15:27:18,193 DEBUG sqlalchemy.engine.base.Engine Thread-199 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 15:27:18,195 INFO sqlalchemy.engine.base.Engine Thread-199 : INSERT INTO datesofinterest (id, doi_name, doi_priority, doi_comment, doi_start_dt, doi_end_dt, doi_regions, doi_type, doi_filter, doi_hap) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
2020-06-06 15:27:18,195 INFO sqlalchemy.engine.base.Engine Thread-199 : ('0', 'Locked date', 83, 'Locked', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 130, '', 107)
2020-06-06 15:27:18,196 INFO sqlalchemy.engine.base.Engine Thread-199 : COMMIT
2020-06-06 15:27:18,239 INFO sqlalchemy.engine.base.Engine Thread-200 : BEGIN (implicit)
2020-06-06 15:27:18,240 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:27:18,240 INFO sqlalchemy.engine.base.Engine Thread-200 : (1, 1)
2020-06-06 15:27:18,241 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:18,241 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:18,244 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:27:18,244 INFO sqlalchemy.engine.base.Engine Thread-200 : ('philip', 1, 1)
2020-06-06 15:27:18,245 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:18,245 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:18,255 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 15:27:18,256 INFO sqlalchemy.engine.base.Engine Thread-200 : ()
2020-06-06 15:27:18,256 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 15:27:18,257 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 15:27:18,258 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 15:27:18,262 INFO sqlalchemy.engine.base.Engine Thread-200 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:27:18,262 INFO sqlalchemy.engine.base.Engine Thread-200 : ('philip', 1, 1)
2020-06-06 15:27:18,263 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:18,263 DEBUG sqlalchemy.engine.base.Engine Thread-200 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:18,267 INFO sqlalchemy.engine.base.Engine Thread-200 : ROLLBACK
2020-06-06 15:27:20,818 INFO sqlalchemy.engine.base.Engine Thread-210 : BEGIN (implicit)
2020-06-06 15:27:20,820 INFO sqlalchemy.engine.base.Engine Thread-210 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-06 15:27:20,820 INFO sqlalchemy.engine.base.Engine Thread-210 : ()
2020-06-06 15:27:20,821 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-06 15:27:20,822 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-06 15:27:20,822 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-06 15:27:20,823 INFO sqlalchemy.engine.base.Engine Thread-210 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 15:27:20,823 INFO sqlalchemy.engine.base.Engine Thread-210 : (100,)
2020-06-06 15:27:20,824 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 15:27:20,824 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-06 15:27:20,824 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-06 15:27:20,824 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-06 15:27:20,824 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-06 15:27:20,825 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-06 15:27:20,826 INFO sqlalchemy.engine.base.Engine Thread-210 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:27:20,827 INFO sqlalchemy.engine.base.Engine Thread-210 : (1, 1)
2020-06-06 15:27:20,827 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:20,827 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:20,831 INFO sqlalchemy.engine.base.Engine Thread-210 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 15:27:20,832 INFO sqlalchemy.engine.base.Engine Thread-210 : ('philip', 1, 1)
2020-06-06 15:27:20,832 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:20,833 DEBUG sqlalchemy.engine.base.Engine Thread-210 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:20,835 INFO sqlalchemy.engine.base.Engine Thread-210 : ROLLBACK
2020-06-06 15:27:21,095 INFO sqlalchemy.engine.base.Engine Thread-220 : BEGIN (implicit)
2020-06-06 15:27:21,096 INFO sqlalchemy.engine.base.Engine Thread-220 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:27:21,097 INFO sqlalchemy.engine.base.Engine Thread-220 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:27:21,097 DEBUG sqlalchemy.engine.base.Engine Thread-220 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:27:21,098 DEBUG sqlalchemy.engine.base.Engine Thread-220 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:27:21,098 DEBUG sqlalchemy.engine.base.Engine Thread-220 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-06 15:27:21,098 DEBUG sqlalchemy.engine.base.Engine Thread-220 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 15:27:21,098 DEBUG sqlalchemy.engine.base.Engine Thread-220 : Row (datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 15:27:21,102 INFO sqlalchemy.engine.base.Engine Thread-220 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:27:21,102 INFO sqlalchemy.engine.base.Engine Thread-220 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:27:21,103 DEBUG sqlalchemy.engine.base.Engine Thread-220 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:27:21,107 INFO sqlalchemy.engine.base.Engine Thread-220 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:27:21,107 INFO sqlalchemy.engine.base.Engine Thread-220 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:27:21,108 DEBUG sqlalchemy.engine.base.Engine Thread-220 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:27:21,109 INFO sqlalchemy.engine.base.Engine Thread-220 : ROLLBACK
2020-06-06 15:27:21,133 INFO sqlalchemy.engine.base.Engine Thread-221 : BEGIN (implicit)
2020-06-06 15:27:21,135 INFO sqlalchemy.engine.base.Engine Thread-221 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 15:27:21,135 INFO sqlalchemy.engine.base.Engine Thread-221 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:27:21,136 DEBUG sqlalchemy.engine.base.Engine Thread-221 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 15:27:21,136 DEBUG sqlalchemy.engine.base.Engine Thread-221 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 15:27:21,136 DEBUG sqlalchemy.engine.base.Engine Thread-221 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-06 15:27:21,136 DEBUG sqlalchemy.engine.base.Engine Thread-221 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 15:27:21,136 DEBUG sqlalchemy.engine.base.Engine Thread-221 : Row (datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 15:27:21,140 INFO sqlalchemy.engine.base.Engine Thread-221 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 15:27:21,140 INFO sqlalchemy.engine.base.Engine Thread-221 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:27:21,141 DEBUG sqlalchemy.engine.base.Engine Thread-221 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:27:21,145 INFO sqlalchemy.engine.base.Engine Thread-221 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 15:27:21,145 INFO sqlalchemy.engine.base.Engine Thread-221 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 15:27:21,146 DEBUG sqlalchemy.engine.base.Engine Thread-221 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 15:27:21,147 INFO sqlalchemy.engine.base.Engine Thread-221 : ROLLBACK
2020-06-06 15:27:23,466 INFO sqlalchemy.engine.base.Engine Thread-222 : BEGIN (implicit)
2020-06-06 15:27:23,467 INFO sqlalchemy.engine.base.Engine Thread-222 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:27:23,467 INFO sqlalchemy.engine.base.Engine Thread-222 : (1, 1)
2020-06-06 15:27:23,468 DEBUG sqlalchemy.engine.base.Engine Thread-222 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:23,468 DEBUG sqlalchemy.engine.base.Engine Thread-222 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:23,472 INFO sqlalchemy.engine.base.Engine Thread-222 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:27:23,472 INFO sqlalchemy.engine.base.Engine Thread-222 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:27:23,473 DEBUG sqlalchemy.engine.base.Engine Thread-222 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:27:23,473 DEBUG sqlalchemy.engine.base.Engine Thread-222 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:27:23,474 DEBUG sqlalchemy.engine.base.Engine Thread-222 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:27:23,474 DEBUG sqlalchemy.engine.base.Engine Thread-222 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:27:23,476 INFO sqlalchemy.engine.base.Engine Thread-222 : ROLLBACK
2020-06-06 15:27:26,220 INFO sqlalchemy.engine.base.Engine Thread-223 : BEGIN (implicit)
2020-06-06 15:27:26,221 INFO sqlalchemy.engine.base.Engine Thread-223 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:27:26,221 INFO sqlalchemy.engine.base.Engine Thread-223 : (1, 1)
2020-06-06 15:27:26,222 DEBUG sqlalchemy.engine.base.Engine Thread-223 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:26,222 DEBUG sqlalchemy.engine.base.Engine Thread-223 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:26,226 INFO sqlalchemy.engine.base.Engine Thread-223 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:27:26,226 INFO sqlalchemy.engine.base.Engine Thread-223 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:27:26,227 DEBUG sqlalchemy.engine.base.Engine Thread-223 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:27:26,227 DEBUG sqlalchemy.engine.base.Engine Thread-223 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:27:26,227 DEBUG sqlalchemy.engine.base.Engine Thread-223 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:27:26,227 DEBUG sqlalchemy.engine.base.Engine Thread-223 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:27:26,229 INFO sqlalchemy.engine.base.Engine Thread-223 : ROLLBACK
2020-06-06 15:27:31,716 INFO sqlalchemy.engine.base.Engine Thread-224 : BEGIN (implicit)
2020-06-06 15:27:31,717 INFO sqlalchemy.engine.base.Engine Thread-224 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:27:31,718 INFO sqlalchemy.engine.base.Engine Thread-224 : (1, 1)
2020-06-06 15:27:31,718 DEBUG sqlalchemy.engine.base.Engine Thread-224 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:31,718 DEBUG sqlalchemy.engine.base.Engine Thread-224 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:31,723 INFO sqlalchemy.engine.base.Engine Thread-224 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:27:31,723 INFO sqlalchemy.engine.base.Engine Thread-224 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:27:31,724 DEBUG sqlalchemy.engine.base.Engine Thread-224 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:27:31,724 DEBUG sqlalchemy.engine.base.Engine Thread-224 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:27:31,724 DEBUG sqlalchemy.engine.base.Engine Thread-224 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:27:31,724 DEBUG sqlalchemy.engine.base.Engine Thread-224 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:27:31,726 INFO sqlalchemy.engine.base.Engine Thread-224 : ROLLBACK
2020-06-06 15:27:36,577 INFO sqlalchemy.engine.base.Engine Thread-225 : BEGIN (implicit)
2020-06-06 15:27:36,578 INFO sqlalchemy.engine.base.Engine Thread-225 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:27:36,578 INFO sqlalchemy.engine.base.Engine Thread-225 : (1, 1)
2020-06-06 15:27:36,579 DEBUG sqlalchemy.engine.base.Engine Thread-225 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:36,580 DEBUG sqlalchemy.engine.base.Engine Thread-225 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:36,585 INFO sqlalchemy.engine.base.Engine Thread-225 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:27:36,585 INFO sqlalchemy.engine.base.Engine Thread-225 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:27:36,586 DEBUG sqlalchemy.engine.base.Engine Thread-225 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:27:36,586 DEBUG sqlalchemy.engine.base.Engine Thread-225 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:27:36,586 DEBUG sqlalchemy.engine.base.Engine Thread-225 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:27:36,586 DEBUG sqlalchemy.engine.base.Engine Thread-225 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:27:36,589 INFO sqlalchemy.engine.base.Engine Thread-225 : ROLLBACK
2020-06-06 15:27:56,792 INFO sqlalchemy.engine.base.Engine Thread-226 : BEGIN (implicit)
2020-06-06 15:27:56,793 INFO sqlalchemy.engine.base.Engine Thread-226 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:27:56,794 INFO sqlalchemy.engine.base.Engine Thread-226 : (1, 1)
2020-06-06 15:27:56,794 DEBUG sqlalchemy.engine.base.Engine Thread-226 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:27:56,794 DEBUG sqlalchemy.engine.base.Engine Thread-226 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:27:56,799 INFO sqlalchemy.engine.base.Engine Thread-226 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:27:56,799 INFO sqlalchemy.engine.base.Engine Thread-226 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:27:56,800 DEBUG sqlalchemy.engine.base.Engine Thread-226 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:27:56,800 DEBUG sqlalchemy.engine.base.Engine Thread-226 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:27:56,800 DEBUG sqlalchemy.engine.base.Engine Thread-226 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:27:56,800 DEBUG sqlalchemy.engine.base.Engine Thread-226 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:27:56,802 INFO sqlalchemy.engine.base.Engine Thread-226 : ROLLBACK
2020-06-06 15:28:32,134 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:28:32,134 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:28:32,135 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:28:32,136 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:28:32,136 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:28:32,136 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:28:32,137 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:28:32,137 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:28:32,138 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:28:32,138 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:28:32,138 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:28:32,138 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:28:32,138 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:28:32,138 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:28:32,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:28:32,139 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:28:32,140 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:28:32,140 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:28:32,141 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:28:32,141 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:28:32,142 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:28:32,142 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:28:32,142 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:28:32,145 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:28:32,145 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:28:32,146 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:28:32,146 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:28:32,155 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:28:32,155 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:28:32,156 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:28:32,156 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:28:32,156 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:28:32,156 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:28:32,180 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:29:07,041 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 15:29:07,042 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:29:07,042 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 15:29:07,043 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:29:07,043 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:29:07,047 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:29:07,047 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:29:07,048 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:29:07,048 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:29:07,048 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:29:07,048 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:29:07,050 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 15:29:43,722 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:29:43,722 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:29:43,723 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:29:43,724 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:29:43,725 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:29:43,725 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:29:43,725 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:29:43,725 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:29:43,726 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:29:43,726 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:29:43,726 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:29:43,726 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:29:43,726 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:29:43,726 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:29:43,727 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:29:43,727 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:29:43,728 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:29:43,728 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:29:43,729 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:29:43,729 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:29:43,729 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:29:43,729 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:29:43,730 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:29:43,733 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:29:43,733 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:29:43,734 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:29:43,734 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:30:12,435 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:30:12,435 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:30:12,436 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:30:12,437 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:30:12,437 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:30:12,437 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:30:12,438 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:30:12,438 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:30:12,438 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:30:12,438 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:30:12,439 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:30:12,439 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:30:12,439 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:30:12,439 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:30:12,440 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:30:12,440 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:30:12,440 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:30:12,441 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:30:12,441 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:30:12,441 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:30:12,442 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:30:12,442 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:30:12,442 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:30:12,445 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:30:12,445 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:30:12,445 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:30:12,446 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:30:12,454 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:30:12,454 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 0, 0))
2020-06-06 15:30:12,455 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:30:12,455 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:30:12,455 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:30:12,456 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:30:12,479 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:32:07,818 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:32:07,818 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:32:07,819 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:32:07,819 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:32:07,820 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:32:07,820 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:32:07,821 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:32:07,821 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:32:07,821 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:32:07,821 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:32:07,821 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:32:07,822 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:32:07,822 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:32:07,822 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:32:07,823 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:32:07,823 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:32:07,823 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:32:07,823 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:32:07,824 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:32:07,824 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:32:07,825 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:32:07,825 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:32:07,825 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:32:07,827 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:32:07,828 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:32:07,828 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:32:07,829 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:32:07,837 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:32:07,837 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:32:07,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:32:07,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:32:07,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:32:07,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:32:07,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:32:07,862 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:32:39,920 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 15:32:39,922 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:32:39,922 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 15:32:39,923 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:32:39,923 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:32:39,927 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:32:39,927 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:32:39,928 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:32:39,928 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:32:39,928 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:32:39,928 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:32:39,928 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:32:39,930 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 15:38:03,252 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:38:03,252 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:38:03,253 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:38:03,254 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:38:03,254 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:38:03,254 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:38:03,255 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:38:03,255 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:38:03,256 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:38:03,256 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:38:03,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:38:03,256 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:38:03,257 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:38:03,257 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:38:03,257 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:38:03,258 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:38:03,258 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:38:03,259 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:38:03,259 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:38:03,260 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:38:03,260 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:38:03,261 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:38:03,261 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:38:03,264 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:38:03,264 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:38:03,265 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:38:03,265 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:38:03,274 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:38:03,274 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:38:03,275 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:38:03,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:38:03,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:38:03,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:38:03,276 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:38:03,300 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:39:11,707 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:39:11,707 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:39:11,709 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:39:11,709 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:39:11,710 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:39:11,710 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:39:11,710 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:39:11,711 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:39:11,711 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:39:11,711 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:39:11,711 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:39:11,711 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:39:11,712 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:39:11,712 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:39:11,713 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:39:11,713 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:39:11,713 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:39:11,714 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:39:11,714 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:39:11,714 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:39:11,715 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:39:11,715 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:39:11,716 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:39:11,718 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:39:11,718 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:39:11,719 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:39:11,719 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:39:11,727 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:39:11,727 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:39:11,728 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:39:11,728 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:39:11,728 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:39:11,729 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:39:11,729 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:39:11,751 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:39:44,212 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 15:39:44,213 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:39:44,213 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 15:39:44,214 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:39:44,214 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:39:44,219 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:39:44,219 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:39:44,222 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:39:44,223 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:39:44,223 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:39:44,223 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:39:44,223 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:39:44,225 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 15:39:44,226 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 15:39:44,227 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:39:44,227 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 15:39:44,228 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:39:44,228 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:39:44,233 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:39:44,233 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:39:44,234 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:39:44,234 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:39:44,236 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 15:39:44,239 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 15:39:44,241 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:39:44,241 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 15:39:44,242 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:39:44,242 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:39:44,246 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:39:44,246 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:39:44,247 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:39:44,247 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:39:44,247 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:39:44,247 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:39:44,247 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:39:44,249 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 15:39:45,073 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 15:39:45,074 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:39:45,074 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 15:39:45,075 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:39:45,075 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:39:45,082 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:39:45,082 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 15:39:45,083 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:39:45,083 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:39:45,085 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 15:39:51,405 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 15:39:51,406 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:39:51,406 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 15:39:51,407 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:39:51,407 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:39:51,411 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:39:51,411 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:39:51,412 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:39:51,412 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:39:51,412 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:39:51,412 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:39:51,412 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:39:51,414 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 15:39:55,713 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 15:39:55,714 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:39:55,714 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 15:39:55,714 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:39:55,714 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:39:55,719 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:39:55,719 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:39:55,719 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:39:55,720 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:39:55,720 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:39:55,720 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:39:55,720 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:39:55,722 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 15:40:08,803 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-06 15:40:08,803 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:40:08,804 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-06 15:40:08,805 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:40:08,805 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:40:08,809 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:40:08,809 INFO sqlalchemy.engine.base.Engine Thread-9 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:40:08,810 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:40:08,810 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:40:08,810 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:40:08,810 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:40:08,810 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:40:08,812 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-06 15:41:46,214 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:41:46,214 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:41:46,216 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:41:46,216 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:41:46,217 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:41:46,217 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:41:46,217 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:41:46,217 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:41:46,218 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:41:46,218 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:41:46,218 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:41:46,218 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:41:46,219 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:41:46,219 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:41:46,220 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:41:46,220 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:41:46,221 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:41:46,221 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:41:46,221 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:41:46,221 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:41:46,222 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:41:46,222 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:41:46,223 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:41:46,225 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:41:46,225 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:41:46,226 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:41:46,226 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:41:46,235 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:41:46,235 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:41:46,236 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:41:46,236 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:41:46,237 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:41:46,237 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:41:46,237 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:41:46,260 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:41:50,726 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 15:41:50,727 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:41:50,727 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 15:41:50,728 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:41:50,728 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:41:50,732 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:41:50,732 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:41:50,733 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:41:50,733 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:41:50,735 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 15:41:53,123 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 15:41:53,124 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:41:53,124 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 15:41:53,125 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:41:53,126 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:41:53,129 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:41:53,130 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 15:41:53,130 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:41:53,130 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:41:53,132 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 15:41:55,585 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 15:41:55,587 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:41:55,587 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 15:41:55,587 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:41:55,588 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:41:55,592 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:41:55,592 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:41:55,593 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:41:55,593 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:41:55,593 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:41:55,593 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:41:55,593 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:41:55,595 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 15:43:00,746 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:43:00,746 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:00,748 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:43:00,748 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:43:00,749 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:43:00,749 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:00,749 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:43:00,749 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:43:00,750 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:43:00,750 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:00,750 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:43:00,750 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:43:00,750 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:43:00,751 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:00,751 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:43:00,751 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:43:00,752 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:43:00,752 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:00,753 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:43:00,753 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:00,753 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:43:00,753 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:00,754 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:43:00,756 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:43:00,756 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:43:00,757 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:43:00,757 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:43:00,765 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:43:00,766 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:43:00,766 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:43:00,767 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:43:00,767 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:43:00,767 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:43:00,767 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:43:00,789 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:43:30,206 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:43:30,206 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:30,207 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:43:30,207 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:43:30,208 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:43:30,208 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:30,209 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:43:30,209 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:43:30,209 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:43:30,209 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:30,209 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:43:30,209 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:43:30,210 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:43:30,210 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:30,210 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:43:30,211 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:43:30,211 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:43:30,211 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:30,212 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:43:30,212 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:30,213 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:43:30,213 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:43:30,213 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:43:30,216 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:43:30,216 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:43:30,217 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:43:30,217 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:43:30,226 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:43:30,226 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:43:30,227 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:43:30,227 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:43:30,227 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:43:30,228 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:43:30,228 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:43:30,250 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:43:35,628 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 15:43:35,629 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:43:35,629 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 15:43:35,630 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:43:35,630 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:43:35,634 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:43:35,634 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 15:43:35,635 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:43:35,635 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:43:35,637 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 15:43:39,315 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 15:43:39,316 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:43:39,316 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 15:43:39,317 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:43:39,318 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:43:39,322 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:43:39,322 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:43:39,323 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:43:39,323 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:43:39,323 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:43:39,324 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:43:39,324 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:43:39,326 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 15:43:41,323 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 15:43:41,324 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:43:41,325 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 15:43:41,325 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:43:41,326 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:43:41,330 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:43:41,330 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:43:41,331 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:43:41,331 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:43:41,333 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 15:44:11,326 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 15:44:11,327 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:44:11,327 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 15:44:11,328 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:44:11,329 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:44:11,335 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:44:11,335 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:44:11,336 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:44:11,336 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:44:11,336 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:44:11,336 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:44:11,336 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:44:11,353 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 15:44:14,626 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 15:44:14,627 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:44:14,627 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 15:44:14,628 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:44:14,628 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:44:14,632 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:44:14,632 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 15:44:14,632 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:44:14,633 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:44:14,634 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 15:44:17,800 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 15:44:17,801 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:44:17,802 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 15:44:17,802 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:44:17,802 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:44:17,807 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:44:17,807 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:44:17,808 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:44:17,808 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:44:17,810 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 15:44:20,122 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-06 15:44:20,123 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:44:20,123 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-06 15:44:20,124 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:44:20,124 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:44:20,128 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:44:20,128 INFO sqlalchemy.engine.base.Engine Thread-9 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:44:20,129 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:44:20,129 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:44:20,129 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:44:20,129 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:44:20,129 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:44:20,131 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-06 15:48:12,044 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-06 15:48:12,045 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:48:12,045 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-06 15:48:12,047 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:48:12,048 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:48:12,052 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:48:12,053 INFO sqlalchemy.engine.base.Engine Thread-10 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:48:12,053 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:48:12,054 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:48:12,054 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:48:12,054 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:48:12,054 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:48:12,071 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-06 15:48:16,559 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-06 15:48:16,560 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:48:16,560 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-06 15:48:16,561 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:48:16,561 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:48:16,566 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:48:16,566 INFO sqlalchemy.engine.base.Engine Thread-11 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:48:16,567 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:48:16,567 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:48:16,567 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:48:16,568 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:48:16,568 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:48:16,570 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-06 15:48:18,919 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-06 15:48:18,920 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:48:18,920 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-06 15:48:18,921 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:48:18,921 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:48:18,926 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:48:18,926 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:48:18,927 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:48:18,927 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:48:18,929 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-06 15:48:21,081 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-06 15:48:21,082 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:48:21,082 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-06 15:48:21,083 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:48:21,083 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:48:21,088 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:48:21,088 INFO sqlalchemy.engine.base.Engine Thread-13 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 15:48:21,089 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:48:21,089 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:48:21,091 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-06 15:48:59,510 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-06 15:48:59,511 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:48:59,511 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-06 15:48:59,513 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:48:59,513 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:48:59,518 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:48:59,518 INFO sqlalchemy.engine.base.Engine Thread-14 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:48:59,519 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:48:59,519 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:48:59,519 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:48:59,519 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:48:59,519 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:48:59,536 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-06 15:50:30,986 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 15:50:30,986 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:50:30,987 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:50:30,988 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 15:50:30,989 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 15:50:30,989 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:50:30,989 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 15:50:30,990 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 15:50:30,990 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 15:50:30,990 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:50:30,990 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 15:50:30,991 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 15:50:30,991 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 15:50:30,991 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:50:30,992 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 15:50:30,992 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 15:50:30,993 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 15:50:30,993 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:50:30,994 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 15:50:30,994 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:50:30,994 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 15:50:30,994 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 15:50:30,995 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 15:50:30,998 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:50:30,998 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 15:50:30,999 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:50:30,999 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:50:31,008 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:50:31,008 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:50:31,009 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:50:31,009 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:50:31,010 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:50:31,010 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:50:31,010 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:50:31,033 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 15:50:58,759 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 15:50:58,760 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:50:58,760 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 15:50:58,761 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:50:58,761 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:50:58,766 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:50:58,766 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:50:58,767 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:50:58,767 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:50:58,767 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:50:58,768 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:50:58,768 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:50:58,784 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 15:51:06,889 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 15:51:06,890 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:51:06,890 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 15:51:06,891 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:51:06,892 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:51:06,895 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:51:06,895 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:51:06,896 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:51:06,896 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:51:06,897 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:51:06,897 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:51:06,897 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:51:06,899 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 15:51:14,985 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 15:51:14,987 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:51:14,987 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 15:51:14,988 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:51:14,988 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:51:14,992 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:51:14,992 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:51:14,993 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:51:14,993 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:51:14,993 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:51:14,993 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:51:14,993 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:51:14,995 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 15:51:21,068 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 15:51:21,070 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:51:21,070 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 15:51:21,070 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:51:21,071 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:51:21,076 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:51:21,077 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:51:21,077 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:51:21,077 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:51:21,079 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 15:51:23,620 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 15:51:23,621 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:51:23,621 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 15:51:23,622 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:51:23,622 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:51:23,626 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:51:23,626 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59))
2020-06-06 15:51:23,627 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:51:23,629 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 15:51:26,393 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 15:51:26,394 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:51:26,394 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 15:51:26,395 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:51:26,395 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:51:26,400 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:51:26,401 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:51:26,401 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:51:26,401 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:51:26,402 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:51:26,402 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:51:26,402 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:51:26,404 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 15:51:31,781 INFO sqlalchemy.engine.base.Engine Thread-9 : BEGIN (implicit)
2020-06-06 15:51:31,782 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:51:31,782 INFO sqlalchemy.engine.base.Engine Thread-9 : (1, 1)
2020-06-06 15:51:31,783 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:51:31,783 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:51:31,787 INFO sqlalchemy.engine.base.Engine Thread-9 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:51:31,787 INFO sqlalchemy.engine.base.Engine Thread-9 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:51:31,788 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:51:31,788 DEBUG sqlalchemy.engine.base.Engine Thread-9 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:51:31,790 INFO sqlalchemy.engine.base.Engine Thread-9 : ROLLBACK
2020-06-06 15:53:06,746 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-06-06 15:53:06,748 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:53:06,748 INFO sqlalchemy.engine.base.Engine Thread-10 : (1, 1)
2020-06-06 15:53:06,750 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:53:06,751 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:53:06,756 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:53:06,757 INFO sqlalchemy.engine.base.Engine Thread-10 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:53:06,757 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:53:06,758 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:53:06,776 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-06-06 15:53:21,893 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-06-06 15:53:21,894 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:53:21,894 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-06-06 15:53:21,894 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:53:21,895 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:53:21,899 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:53:21,899 INFO sqlalchemy.engine.base.Engine Thread-11 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:53:21,899 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:53:21,900 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:53:21,916 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-06-06 15:53:24,936 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-06-06 15:53:24,937 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:53:24,937 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-06-06 15:53:24,938 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:53:24,938 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:53:24,942 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:53:24,942 INFO sqlalchemy.engine.base.Engine Thread-12 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 15:53:24,943 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:53:24,943 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:53:24,945 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-06-06 15:53:27,682 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-06-06 15:53:27,683 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:53:27,683 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-06-06 15:53:27,684 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:53:27,684 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:53:27,688 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:53:27,688 INFO sqlalchemy.engine.base.Engine Thread-13 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:53:27,689 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:53:27,689 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:53:27,689 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:53:27,689 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:53:27,689 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:53:27,691 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-06-06 15:53:59,263 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-06 15:53:59,264 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:53:59,265 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-06 15:53:59,265 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:53:59,266 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:53:59,270 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:53:59,270 INFO sqlalchemy.engine.base.Engine Thread-14 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 15:53:59,271 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:53:59,271 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:53:59,288 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-06 15:54:01,385 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-06 15:54:01,386 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:54:01,386 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-06 15:54:01,387 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:54:01,387 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:54:01,392 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:54:01,392 INFO sqlalchemy.engine.base.Engine Thread-15 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:54:01,393 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:54:01,393 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:54:01,395 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-06 15:54:03,777 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-06 15:54:03,778 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:54:03,778 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-06 15:54:03,779 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:54:03,779 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:54:03,783 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:54:03,783 INFO sqlalchemy.engine.base.Engine Thread-16 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:54:03,784 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:54:03,784 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:54:03,784 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:54:03,784 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:54:03,784 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:54:03,786 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-06 15:54:14,015 INFO sqlalchemy.engine.base.Engine Thread-17 : BEGIN (implicit)
2020-06-06 15:54:14,016 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:54:14,016 INFO sqlalchemy.engine.base.Engine Thread-17 : (1, 1)
2020-06-06 15:54:14,017 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:54:14,017 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:54:14,022 INFO sqlalchemy.engine.base.Engine Thread-17 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:54:14,023 INFO sqlalchemy.engine.base.Engine Thread-17 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:54:14,023 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:54:14,024 DEBUG sqlalchemy.engine.base.Engine Thread-17 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:54:14,025 INFO sqlalchemy.engine.base.Engine Thread-17 : ROLLBACK
2020-06-06 15:54:48,221 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-06 15:54:48,222 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:54:48,222 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-06 15:54:48,223 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:54:48,223 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:54:48,228 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:54:48,228 INFO sqlalchemy.engine.base.Engine Thread-18 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:54:48,229 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:54:48,229 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:54:48,231 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-06 15:54:56,018 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-06 15:54:56,019 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:54:56,020 INFO sqlalchemy.engine.base.Engine Thread-19 : (1, 1)
2020-06-06 15:54:56,021 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:54:56,021 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:54:56,025 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:54:56,025 INFO sqlalchemy.engine.base.Engine Thread-19 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 15:54:56,026 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:54:56,029 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:54:56,031 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
2020-06-06 15:54:56,035 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-06-06 15:54:56,036 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:54:56,036 INFO sqlalchemy.engine.base.Engine Thread-21 : (1, 1)
2020-06-06 15:54:56,037 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:54:56,037 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-06-06 15:54:56,040 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:54:56,040 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-06-06 15:54:56,038 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:54:56,044 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:54:56,044 INFO sqlalchemy.engine.base.Engine Thread-21 : (datetime.datetime(2020, 6, 20, 0, 0), datetime.datetime(2020, 6, 20, 23, 59), datetime.datetime(2020, 6, 20, 0, 0), datetime.datetime(2020, 6, 20, 23, 59), datetime.datetime(2020, 6, 20, 0, 0), datetime.datetime(2020, 6, 20, 23, 59))
2020-06-06 15:54:56,044 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:54:56,045 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:54:56,046 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:54:56,050 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:54:56,051 INFO sqlalchemy.engine.base.Engine Thread-20 : (datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59), datetime.datetime(2020, 6, 13, 0, 0), datetime.datetime(2020, 6, 13, 23, 59))
2020-06-06 15:54:56,052 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-06-06 15:54:56,052 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:54:56,054 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-06-06 15:54:58,450 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-06-06 15:54:58,451 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:54:58,451 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-06-06 15:54:58,451 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:54:58,452 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:54:58,455 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:54:58,455 INFO sqlalchemy.engine.base.Engine Thread-22 : (datetime.datetime(2020, 6, 18, 0, 0), datetime.datetime(2020, 6, 18, 23, 59), datetime.datetime(2020, 6, 18, 0, 0), datetime.datetime(2020, 6, 18, 23, 59), datetime.datetime(2020, 6, 18, 0, 0), datetime.datetime(2020, 6, 18, 23, 59))
2020-06-06 15:54:58,456 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:54:58,458 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-06-06 15:55:03,952 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-06-06 15:55:03,953 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:55:03,953 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-06-06 15:55:03,954 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:55:03,955 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:55:03,958 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:55:03,959 INFO sqlalchemy.engine.base.Engine Thread-23 : (datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59), datetime.datetime(2020, 6, 12, 0, 0), datetime.datetime(2020, 6, 12, 23, 59))
2020-06-06 15:55:03,959 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:55:03,961 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-06-06 15:55:09,922 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-06-06 15:55:09,923 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:55:09,923 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-06-06 15:55:09,924 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:55:09,924 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:55:09,929 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:55:09,930 INFO sqlalchemy.engine.base.Engine Thread-24 : (datetime.datetime(2020, 6, 16, 0, 0), datetime.datetime(2020, 6, 16, 23, 59), datetime.datetime(2020, 6, 16, 0, 0), datetime.datetime(2020, 6, 16, 23, 59), datetime.datetime(2020, 6, 16, 0, 0), datetime.datetime(2020, 6, 16, 23, 59))
2020-06-06 15:55:09,930 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:55:09,932 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-06-06 15:55:13,706 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-06-06 15:55:13,708 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:55:13,708 INFO sqlalchemy.engine.base.Engine Thread-25 : (1, 1)
2020-06-06 15:55:13,708 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:55:13,709 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:55:13,713 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:55:13,713 INFO sqlalchemy.engine.base.Engine Thread-25 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 15:55:13,714 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:55:13,714 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:55:13,716 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-06-06 15:55:28,347 INFO sqlalchemy.engine.base.Engine Thread-26 : BEGIN (implicit)
2020-06-06 15:55:28,348 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 15:55:28,348 INFO sqlalchemy.engine.base.Engine Thread-26 : (1, 1)
2020-06-06 15:55:28,349 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 15:55:28,349 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 15:55:28,354 INFO sqlalchemy.engine.base.Engine Thread-26 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 15:55:28,354 INFO sqlalchemy.engine.base.Engine Thread-26 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 15:55:28,354 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 15:55:28,355 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 15:55:28,355 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 15:55:28,355 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 15:55:28,355 DEBUG sqlalchemy.engine.base.Engine Thread-26 : Row ('Locked date', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'Locked', 130)
2020-06-06 15:55:28,357 INFO sqlalchemy.engine.base.Engine Thread-26 : ROLLBACK
2020-06-06 16:17:19,304 INFO sqlalchemy.engine.base.Engine Thread-27 : BEGIN (implicit)
2020-06-06 16:17:19,306 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:17:19,306 INFO sqlalchemy.engine.base.Engine Thread-27 : (1, 1)
2020-06-06 16:17:19,308 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:19,309 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:19,312 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 16:17:19,312 INFO sqlalchemy.engine.base.Engine Thread-27 : ('philip', 1, 1)
2020-06-06 16:17:19,313 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:19,313 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:19,324 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 16:17:19,324 INFO sqlalchemy.engine.base.Engine Thread-27 : ()
2020-06-06 16:17:19,325 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 16:17:19,325 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 16:17:19,325 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 16:17:19,325 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 16:17:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 16:17:19,397 INFO sqlalchemy.engine.base.Engine Thread-27 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 16:17:19,397 INFO sqlalchemy.engine.base.Engine Thread-27 : ('philip', 1, 1)
2020-06-06 16:17:19,398 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:19,398 DEBUG sqlalchemy.engine.base.Engine Thread-27 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:19,402 INFO sqlalchemy.engine.base.Engine Thread-27 : ROLLBACK
2020-06-06 16:17:22,875 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-06-06 16:17:22,876 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:17:22,877 INFO sqlalchemy.engine.base.Engine Thread-37 : (1, 1)
2020-06-06 16:17:22,877 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:22,878 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:22,880 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 16:17:22,880 INFO sqlalchemy.engine.base.Engine Thread-37 : ('philip', 1, 1)
2020-06-06 16:17:22,881 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:22,881 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:22,884 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 16:17:22,884 INFO sqlalchemy.engine.base.Engine Thread-37 : ('21', 1)
2020-06-06 16:17:22,884 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 16:17:22,885 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (21, 'Locked date', 83, 'Locked', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 130, '', 107)
2020-06-06 16:17:22,889 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 16:17:22,889 INFO sqlalchemy.engine.base.Engine Thread-37 : (82,)
2020-06-06 16:17:22,889 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:22,890 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 16:17:22,890 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 16:17:22,890 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 16:17:22,891 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 16:17:22,891 INFO sqlalchemy.engine.base.Engine Thread-37 : (1,)
2020-06-06 16:17:22,892 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:22,892 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 16:17:22,892 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 16:17:22,895 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 16:17:22,895 INFO sqlalchemy.engine.base.Engine Thread-37 : ()
2020-06-06 16:17:22,895 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 16:17:22,895 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 16:17:22,896 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 16:17:22,897 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 16:17:22,897 INFO sqlalchemy.engine.base.Engine Thread-37 : (127,)
2020-06-06 16:17:22,897 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:22,898 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 16:17:22,898 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 16:17:22,898 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 16:17:22,898 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 16:17:22,899 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 16:17:22,899 INFO sqlalchemy.engine.base.Engine Thread-37 : (105,)
2020-06-06 16:17:22,900 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:22,900 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 16:17:22,900 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 16:17:22,939 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 16:17:22,939 INFO sqlalchemy.engine.base.Engine Thread-37 : ('philip', 1, 1)
2020-06-06 16:17:22,940 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:22,940 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:22,944 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-06-06 16:17:31,552 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-06-06 16:17:31,553 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:17:31,553 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-06-06 16:17:31,554 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:31,554 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:31,557 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 16:17:31,557 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-06-06 16:17:31,558 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:31,558 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:31,559 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT datesofinterest.id AS datesofinterest_id, datesofinterest.doi_name AS datesofinterest_doi_name, datesofinterest.doi_priority AS datesofinterest_doi_priority, datesofinterest.doi_comment AS datesofinterest_doi_comment, datesofinterest.doi_start_dt AS datesofinterest_doi_start_dt, datesofinterest.doi_end_dt AS datesofinterest_doi_end_dt, datesofinterest.doi_regions AS datesofinterest_doi_regions, datesofinterest.doi_type AS datesofinterest_doi_type, datesofinterest.doi_filter AS datesofinterest_doi_filter, datesofinterest.doi_hap AS datesofinterest_doi_hap 
FROM datesofinterest 
WHERE datesofinterest.id = %s 
 LIMIT %s
2020-06-06 16:17:31,560 INFO sqlalchemy.engine.base.Engine Thread-47 : ('21', 1)
2020-06-06 16:17:31,560 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('datesofinterest_id', 'datesofinterest_doi_name', 'datesofinterest_doi_priority', 'datesofinterest_doi_comment', 'datesofinterest_doi_start_dt', 'datesofinterest_doi_end_dt', 'datesofinterest_doi_regions', 'datesofinterest_doi_type', 'datesofinterest_doi_filter', 'datesofinterest_doi_hap')
2020-06-06 16:17:31,560 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (21, 'Locked date', 83, 'Locked', datetime.datetime(2020, 6, 10, 0, 30), datetime.datetime(2020, 6, 10, 23, 45), 'GBR,IND', 130, '', 107)
2020-06-06 16:17:31,564 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 16:17:31,564 INFO sqlalchemy.engine.base.Engine Thread-47 : (82,)
2020-06-06 16:17:31,565 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:31,566 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (83, 'High', 'High', 82, 0, 0, 1)
2020-06-06 16:17:31,566 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (85, 'Low', 'Low', 82, 0, 0, 1)
2020-06-06 16:17:31,566 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (84, 'Medium', 'Medium', 82, 0, 0, 1)
2020-06-06 16:17:31,567 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_value ASC
2020-06-06 16:17:31,567 INFO sqlalchemy.engine.base.Engine Thread-47 : (1,)
2020-06-06 16:17:31,568 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:31,568 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (61, 'United Kingdom', 'GBR', 1, 0, 0, 1)
2020-06-06 16:17:31,568 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (69, 'India', 'IND', 1, 0, 0, 1)
2020-06-06 16:17:31,569 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexgroups.id AS complexgroups_id, complexgroups.group_name AS complexgroups_group_name, complexgroups.max_slots AS complexgroups_max_slots, complexgroups.group_members AS complexgroups_group_members, complexgroups.group_created AS complexgroups_group_created, complexgroups.bau_only AS complexgroups_bau_only, complexgroups.group_active AS complexgroups_group_active 
FROM complexgroups ORDER BY complexgroups.group_name ASC
2020-06-06 16:17:31,570 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-06-06 16:17:31,570 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexgroups_id', 'complexgroups_group_name', 'complexgroups_max_slots', 'complexgroups_group_members', 'complexgroups_group_created', 'complexgroups_bau_only', 'complexgroups_group_active')
2020-06-06 16:17:31,570 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Test Group', 8, '1,2', datetime.datetime(2020, 5, 24, 16, 4, 21), 106, 67)
2020-06-06 16:17:31,570 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Test Group 2', 5, '1,2', datetime.datetime(2020, 5, 24, 16, 12, 23), 106, 67)
2020-06-06 16:17:31,572 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 16:17:31,572 INFO sqlalchemy.engine.base.Engine Thread-47 : (127,)
2020-06-06 16:17:31,572 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:31,573 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (131, 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 127, 0, 0, 1)
2020-06-06 16:17:31,573 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (129, 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 127, 0, 0, 1)
2020-06-06 16:17:31,573 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (128, 'Informational', 'background-color: #ADD8E6; color: #000000;', 127, 0, 0, 1)
2020-06-06 16:17:31,573 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (130, 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 127, 0, 0, 1)
2020-06-06 16:17:31,574 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 16:17:31,574 INFO sqlalchemy.engine.base.Engine Thread-47 : (105,)
2020-06-06 16:17:31,575 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:31,575 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (107, 'No', '0', 105, 0, 0, 1)
2020-06-06 16:17:31,575 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (106, 'Yes', '1', 105, 0, 0, 1)
2020-06-06 16:17:31,580 INFO sqlalchemy.engine.base.Engine Thread-47 : UPDATE datesofinterest SET id=%s, doi_start_dt=%s, doi_end_dt=%s WHERE datesofinterest.id = %s
2020-06-06 16:17:31,580 INFO sqlalchemy.engine.base.Engine Thread-47 : ('21', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 21)
2020-06-06 16:17:31,581 INFO sqlalchemy.engine.base.Engine Thread-47 : COMMIT
2020-06-06 16:17:31,623 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-06-06 16:17:31,624 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:17:31,624 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-06-06 16:17:31,625 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:31,625 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:31,627 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 16:17:31,627 INFO sqlalchemy.engine.base.Engine Thread-48 : ('philip', 1, 1)
2020-06-06 16:17:31,628 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:31,628 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:31,637 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_regions AS datesofinterest_1_doi_regions, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, parameters_1.param_value AS parameters_1_param_value, parameters_2.param_name AS parameters_2_param_name, parameters_3.param_name AS parameters_3_param_name 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_priority = parameters_1.id INNER JOIN parameters AS parameters_2 ON datesofinterest_1.doi_hap = parameters_2.id INNER JOIN parameters AS parameters_3 ON datesofinterest_1.doi_type = parameters_3.id ORDER BY datesofinterest_1.doi_start_dt ASC
2020-06-06 16:17:31,637 INFO sqlalchemy.engine.base.Engine Thread-48 : ()
2020-06-06 16:17:31,638 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_regions', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'parameters_1_param_value', 'parameters_2_param_name', 'parameters_3_param_name')
2020-06-06 16:17:31,638 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'Change Freeze (Critical)', 'GBR,IND', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 16:17:31,638 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (8, 'Easter Holiday', 'GBR,IND', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 16:17:31,638 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (9, 'May Day', 'GBR,IND', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 16:17:31,638 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (10, 'Late May Holiday', 'GBR,IND', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 16:17:31,638 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (18, 'Zone 2 BAU', 'GBR,IND', datetime.datetime(2020, 5, 26, 2, 0), datetime.datetime(2020, 5, 26, 6, 0), 'High', 'No', 'BaU Firewall Change')
2020-06-06 16:17:31,638 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (15, 'Summer Change Freeze', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 16:17:31,639 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (21, 'Locked date', 'GBR,IND', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'High', 'No', 'No Changes Allowed')
2020-06-06 16:17:31,639 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (19, 'Change Freeze RED', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 16:17:31,639 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (20, 'BaU Zone 2', 'GBR,IND', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'High', 'No', 'BaU Firewall Change')
2020-06-06 16:17:31,639 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (11, 'Christmas Day', 'GBR,IND', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'High', 'Yes', 'Informational')
2020-06-06 16:17:31,639 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (12, 'Boxing Day', 'GBR,IND', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'High', 'Yes', 'No Changes Allowed')
2020-06-06 16:17:31,639 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (13, 'Boxing Day Holiday', 'GBR,IND', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'High', 'Yes', 'Heightened Awareness Period (HAP)')
2020-06-06 16:17:31,644 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 16:17:31,644 INFO sqlalchemy.engine.base.Engine Thread-48 : ('philip', 1, 1)
2020-06-06 16:17:31,644 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:31,645 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:31,648 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-06-06 16:17:33,336 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-06-06 16:17:33,342 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-06-06 16:17:33,343 INFO sqlalchemy.engine.base.Engine Thread-58 : ()
2020-06-06 16:17:33,344 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-06-06 16:17:33,344 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'YYYYYYY', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 5, 17, 20, 8, 4), 67)
2020-06-06 16:17:33,344 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'YYYYYYY', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 101, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 5, 17, 20, 9, 21), 67)
2020-06-06 16:17:33,346 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-06-06 16:17:33,346 INFO sqlalchemy.engine.base.Engine Thread-58 : (100,)
2020-06-06 16:17:33,347 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-06-06 16:17:33,347 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (108, 'CheckPoint', 'CheckPoint', 100, 0, 0, 0)
2020-06-06 16:17:33,347 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (103, 'Cisco', 'Cisco', 100, 0, 0, 0)
2020-06-06 16:17:33,347 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (104, 'F5', 'F5', 100, 0, 0, 0)
2020-06-06 16:17:33,347 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (101, 'Fortigate', 'Fortigate', 100, 0, 0, 1)
2020-06-06 16:17:33,347 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (102, 'Juniper', 'Juniper', 100, 0, 0, 0)
2020-06-06 16:17:33,349 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:17:33,349 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-06-06 16:17:33,350 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:33,350 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:33,363 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-06-06 16:17:33,363 INFO sqlalchemy.engine.base.Engine Thread-58 : ('philip', 1, 1)
2020-06-06 16:17:33,364 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:33,364 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:33,367 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-06-06 16:17:33,642 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-06-06 16:17:33,644 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 16:17:33,644 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 16:17:33,645 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 16:17:33,646 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 16:17:33,646 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-06 16:17:33,646 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 16:17:33,646 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 16:17:33,650 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 16:17:33,650 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 16:17:33,651 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 16:17:33,655 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 16:17:33,655 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 16:17:33,656 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 16:17:33,657 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-06-06 16:17:33,684 INFO sqlalchemy.engine.base.Engine Thread-69 : BEGIN (implicit)
2020-06-06 16:17:33,686 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.type AS anon_1_type, anon_1.style AS anon_1_style, anon_1.`eventType` AS `anon_1_eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS type, parameters_1.param_value AS style, %s AS `eventType` 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_type = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1
2020-06-06 16:17:33,686 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Date Event', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 16:17:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_type', 'anon_1_style', 'anon_1_eventType')
2020-06-06 16:17:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 'Summer Change Freeze', 'Heightened Awareness Period (HAP)', 'background-color: #48D1CC; color: #000000;', 'Date Event')
2020-06-06 16:17:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'Change Freeze RED', '', 'Informational', 'background-color: #ADD8E6; color: #000000;', 'Date Event')
2020-06-06 16:17:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), 'BaU Zone 2', '', 'BaU Firewall Change', 'background-color: #FFDAB9; color: #000000;', 'Date Event')
2020-06-06 16:17:33,687 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked date', 'Locked', 'No Changes Allowed', 'background-color: #FFE4E1; color: #FF0000;', 'Date Event')
2020-06-06 16:17:33,691 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-06-06 16:17:33,691 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 16:17:33,692 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 16:17:33,696 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.owner AS anon_1_owner, anon_1.description AS anon_1_description, anon_1.complex AS anon_1_complex, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.owner_id AS owner, bookings_1.description AS description, complexes_1.complex_name AS complex, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1, complexes AS complexes_1 
WHERE bookings_1.complex = complexes_1.id AND (bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s)) AS anon_1 
WHERE anon_1.approved IS NULL
2020-06-06 16:17:33,696 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0), datetime.datetime(2020, 6, 1, 0, 0), datetime.datetime(2020, 7, 13, 0, 0))
2020-06-06 16:17:33,697 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_owner', 'anon_1_description', 'anon_1_complex', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-06-06 16:17:33,698 INFO sqlalchemy.engine.base.Engine Thread-69 : ROLLBACK
2020-06-06 16:17:34,633 INFO sqlalchemy.engine.base.Engine Thread-70 : BEGIN (implicit)
2020-06-06 16:17:34,634 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:17:34,634 INFO sqlalchemy.engine.base.Engine Thread-70 : (1, 1)
2020-06-06 16:17:34,635 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:17:34,635 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:17:34,640 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 16:17:34,640 INFO sqlalchemy.engine.base.Engine Thread-70 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 16:17:34,641 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 16:17:34,641 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 16:17:34,641 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 16:17:34,641 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 16:17:34,644 INFO sqlalchemy.engine.base.Engine Thread-70 : ROLLBACK
2020-06-06 16:42:47,925 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-06-06 16:42:47,925 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 16:42:47,926 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 16:42:47,927 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-06-06 16:42:47,928 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-06-06 16:42:47,928 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 16:42:47,928 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-06-06 16:42:47,928 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-06-06 16:42:47,929 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-06-06 16:42:47,929 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 16:42:47,929 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-06-06 16:42:47,929 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-06-06 16:42:47,929 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-06-06 16:42:47,929 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 16:42:47,930 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-06-06 16:42:47,930 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-06-06 16:42:47,931 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-06-06 16:42:47,931 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 16:42:47,932 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-06-06 16:42:47,932 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 16:42:47,933 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-06-06 16:42:47,933 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-06-06 16:42:47,933 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-06-06 16:42:47,936 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:42:47,936 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-06-06 16:42:47,937 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:42:47,937 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:42:47,946 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 16:42:47,946 INFO sqlalchemy.engine.base.Engine Thread-2 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 16:42:47,947 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 16:42:47,947 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 16:42:47,972 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-06-06 16:42:50,439 INFO sqlalchemy.engine.base.Engine Thread-3 : BEGIN (implicit)
2020-06-06 16:42:50,440 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:42:50,440 INFO sqlalchemy.engine.base.Engine Thread-3 : (1, 1)
2020-06-06 16:42:50,441 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:42:50,441 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:42:50,445 INFO sqlalchemy.engine.base.Engine Thread-3 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 16:42:50,445 INFO sqlalchemy.engine.base.Engine Thread-3 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 16:42:50,446 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 16:42:50,446 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 16:42:50,446 DEBUG sqlalchemy.engine.base.Engine Thread-3 : Row ('Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-06 16:42:50,448 INFO sqlalchemy.engine.base.Engine Thread-3 : ROLLBACK
2020-06-06 16:42:52,793 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-06-06 16:42:52,794 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:42:52,794 INFO sqlalchemy.engine.base.Engine Thread-4 : (1, 1)
2020-06-06 16:42:52,795 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:42:52,795 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:42:52,799 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 16:42:52,799 INFO sqlalchemy.engine.base.Engine Thread-4 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 16:42:52,800 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 16:42:52,800 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 16:42:52,802 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-06-06 16:42:55,076 INFO sqlalchemy.engine.base.Engine Thread-5 : BEGIN (implicit)
2020-06-06 16:42:55,077 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:42:55,077 INFO sqlalchemy.engine.base.Engine Thread-5 : (1, 1)
2020-06-06 16:42:55,078 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:42:55,078 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:42:55,081 INFO sqlalchemy.engine.base.Engine Thread-5 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 16:42:55,082 INFO sqlalchemy.engine.base.Engine Thread-5 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 16:42:55,082 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 16:42:55,082 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 16:42:55,082 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 16:42:55,082 DEBUG sqlalchemy.engine.base.Engine Thread-5 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 16:42:55,084 INFO sqlalchemy.engine.base.Engine Thread-5 : ROLLBACK
2020-06-06 16:55:46,927 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-06-06 16:55:46,929 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:55:46,929 INFO sqlalchemy.engine.base.Engine Thread-6 : (1, 1)
2020-06-06 16:55:46,931 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:55:46,932 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:55:46,939 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 16:55:46,939 INFO sqlalchemy.engine.base.Engine Thread-6 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 16:55:46,940 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 16:55:46,940 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 16:55:46,940 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 16:55:46,940 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 16:55:46,942 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-06-06 16:55:49,455 INFO sqlalchemy.engine.base.Engine Thread-7 : BEGIN (implicit)
2020-06-06 16:55:49,456 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:55:49,456 INFO sqlalchemy.engine.base.Engine Thread-7 : (1, 1)
2020-06-06 16:55:49,456 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:55:49,456 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:55:49,460 INFO sqlalchemy.engine.base.Engine Thread-7 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 16:55:49,460 INFO sqlalchemy.engine.base.Engine Thread-7 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 16:55:49,461 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 16:55:49,461 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 16:55:49,461 DEBUG sqlalchemy.engine.base.Engine Thread-7 : Row ('Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-06 16:55:49,463 INFO sqlalchemy.engine.base.Engine Thread-7 : ROLLBACK
2020-06-06 16:55:57,111 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-06-06 16:55:57,112 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 16:55:57,112 INFO sqlalchemy.engine.base.Engine Thread-8 : (1, 1)
2020-06-06 16:55:57,113 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 16:55:57,113 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 16:55:57,118 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 16:55:57,118 INFO sqlalchemy.engine.base.Engine Thread-8 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 16:55:57,119 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 16:55:57,119 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 16:55:57,119 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 16:55:57,119 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 16:55:57,121 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-06-06 18:37:10,459 INFO sqlalchemy.engine.base.Engine Thread-14 : BEGIN (implicit)
2020-06-06 18:37:10,461 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 18:37:10,461 INFO sqlalchemy.engine.base.Engine Thread-14 : (1, 1)
2020-06-06 18:37:10,464 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 18:37:10,464 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 18:37:10,469 INFO sqlalchemy.engine.base.Engine Thread-14 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 18:37:10,470 INFO sqlalchemy.engine.base.Engine Thread-14 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 18:37:10,470 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 18:37:10,471 DEBUG sqlalchemy.engine.base.Engine Thread-14 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 18:37:10,473 INFO sqlalchemy.engine.base.Engine Thread-14 : ROLLBACK
2020-06-06 19:28:05,740 INFO sqlalchemy.engine.base.Engine Thread-15 : BEGIN (implicit)
2020-06-06 19:28:05,741 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 19:28:05,741 INFO sqlalchemy.engine.base.Engine Thread-15 : (1, 1)
2020-06-06 19:28:05,743 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 19:28:05,743 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 19:28:05,748 INFO sqlalchemy.engine.base.Engine Thread-15 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 19:28:05,748 INFO sqlalchemy.engine.base.Engine Thread-15 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 19:28:05,749 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 19:28:05,749 DEBUG sqlalchemy.engine.base.Engine Thread-15 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 19:28:05,751 INFO sqlalchemy.engine.base.Engine Thread-15 : ROLLBACK
2020-06-06 20:09:51,293 INFO sqlalchemy.engine.base.Engine Thread-16 : BEGIN (implicit)
2020-06-06 20:09:51,294 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 20:09:51,294 INFO sqlalchemy.engine.base.Engine Thread-16 : (1, 1)
2020-06-06 20:09:51,296 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 20:09:51,297 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 20:09:51,302 INFO sqlalchemy.engine.base.Engine Thread-16 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 20:09:51,302 INFO sqlalchemy.engine.base.Engine Thread-16 : (datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59), datetime.datetime(2020, 6, 11, 0, 0), datetime.datetime(2020, 6, 11, 23, 59))
2020-06-06 20:09:51,303 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 20:09:51,303 DEBUG sqlalchemy.engine.base.Engine Thread-16 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 20:09:51,305 INFO sqlalchemy.engine.base.Engine Thread-16 : ROLLBACK
2020-06-06 21:57:17,784 INFO sqlalchemy.engine.base.Engine Thread-18 : BEGIN (implicit)
2020-06-06 21:57:17,786 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 21:57:17,786 INFO sqlalchemy.engine.base.Engine Thread-18 : (1, 1)
2020-06-06 21:57:17,787 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 21:57:17,788 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 21:57:17,793 INFO sqlalchemy.engine.base.Engine Thread-18 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 21:57:17,793 INFO sqlalchemy.engine.base.Engine Thread-18 : (datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59), datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 9, 23, 59))
2020-06-06 21:57:17,794 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 21:57:17,794 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 21:57:17,794 DEBUG sqlalchemy.engine.base.Engine Thread-18 : Row ('Locked date', datetime.datetime(2020, 6, 9, 0, 30), datetime.datetime(2020, 6, 9, 23, 45), 'Locked', 130)
2020-06-06 21:57:17,797 INFO sqlalchemy.engine.base.Engine Thread-18 : ROLLBACK
2020-06-06 21:57:22,594 INFO sqlalchemy.engine.base.Engine Thread-19 : BEGIN (implicit)
2020-06-06 21:57:22,595 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-06-06 21:57:22,596 INFO sqlalchemy.engine.base.Engine Thread-19 : (1, 1)
2020-06-06 21:57:22,596 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-06-06 21:57:22,596 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@test.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 5, 17, 16, 46, 43), datetime.datetime(2020, 2, 18, 11, 33, 5), 'philip', 0)
2020-06-06 21:57:22,600 INFO sqlalchemy.engine.base.Engine Thread-19 : SELECT datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_type AS datesofinterest_1_doi_type 
FROM datesofinterest AS datesofinterest_1 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s
2020-06-06 21:57:22,601 INFO sqlalchemy.engine.base.Engine Thread-19 : (datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59), datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 59))
2020-06-06 21:57:22,601 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Col ('datesofinterest_1_doi_name', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_type')
2020-06-06 21:57:22,601 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row ('Summer Change Freeze', datetime.datetime(2020, 6, 9, 0, 0), datetime.datetime(2020, 6, 11, 23, 45), 'Summer Change Freeze', 129)
2020-06-06 21:57:22,601 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row ('Change Freeze RED', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 128)
2020-06-06 21:57:22,602 DEBUG sqlalchemy.engine.base.Engine Thread-19 : Row ('BaU Zone 2', datetime.datetime(2020, 6, 10, 0, 0), datetime.datetime(2020, 6, 10, 23, 45), '', 131)
2020-06-06 21:57:22,603 INFO sqlalchemy.engine.base.Engine Thread-19 : ROLLBACK
